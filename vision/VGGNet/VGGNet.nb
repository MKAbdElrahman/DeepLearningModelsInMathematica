(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    740106,      13462]
NotebookOptionsPosition[    735487,      13372]
NotebookOutlinePosition[    735909,      13389]
CellTagsIndexPosition[    735866,      13386]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Importing the Imagenette Dataset", "Section",
 CellChangeTimes->{
  3.886966484834105*^9, 3.886966523606743*^9, 3.886966693820922*^9, {
   3.887136234764105*^9, 
   3.887136252051091*^9}},ExpressionUUID->"5d3719b4-7d73-4e50-adfe-\
59d3f1c490ce"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "trainDirectory", " ", "=", " ", 
   "\"\</home/mk/imagenette2-160/train/\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "testDirectory", "  ", "=", " ", "\"\</home/mk/imagenette2-160/val/\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"form", " ", "=", " ", "\"\<*.JPEG\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportLabeldFilePaths", "[", 
    RowBox[{"parentDirectory_", ",", "form_"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "paths", ",", "ExtractLabelFromFilePath", ",", "LabeledFilePath"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"paths", " ", "=", " ", 
       RowBox[{"FileNames", "[", 
        RowBox[{"form", ",", "parentDirectory", ",", "2"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ExtractLabelFromFilePath", "[", "path_", "]"}], " ", ":=", 
       " ", 
       RowBox[{"Part", "[", 
        RowBox[{
         RowBox[{"FileNameSplit", "[", "path", "]"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"LabeledFilePath", "[", "path_", "]"}], " ", ":=", " ", 
       RowBox[{
        RowBox[{"File", "[", "path", "]"}], "->", 
        RowBox[{"ExtractLabelFromFilePath", "[", "path", "]"}]}]}], " ", ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"LabeledFilePath", ",", "paths"}], "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.886964449137669*^9, 3.886964461373549*^9}, {
   3.886964502845955*^9, 3.8869645207942553`*^9}, {3.8869649524043093`*^9, 
   3.886964952960499*^9}, {3.886964988841268*^9, 3.886965114318097*^9}, {
   3.886965207618587*^9, 3.8869654939384127`*^9}, {3.88696554684308*^9, 
   3.886965676010015*^9}, {3.886965736601329*^9, 3.886965845074841*^9}, {
   3.8869659870679626`*^9, 3.886966019462158*^9}, {3.886966066220867*^9, 
   3.886966069284411*^9}, {3.886966102073146*^9, 3.886966128500276*^9}, {
   3.8869661601646442`*^9, 3.886966183613948*^9}, {3.886966331300652*^9, 
   3.886966345301632*^9}, {3.886966377989546*^9, 3.886966436889002*^9}, {
   3.886966529341906*^9, 3.8869665943305073`*^9}, {3.886966624374587*^9, 
   3.886966647446649*^9}, 3.886966720420967*^9, {3.886966998211691*^9, 
   3.886967007963192*^9}, {3.8869753574629717`*^9, 3.8869753686549997`*^9}, {
   3.887139532515122*^9, 3.88713953477319*^9}, {3.887139802262438*^9, 
   3.88713980462589*^9}},
 CellLabel->
  "In[568]:=",ExpressionUUID->"ad5534ea-6578-464f-9cae-f7dc8c33b6c0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingDataFiles", " ", "=", " ", 
   RowBox[{"ImportLabeldFilePaths", "[", 
    RowBox[{"trainDirectory", ",", "form"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testDataFiles", " ", "=", " ", 
   RowBox[{"ImportLabeldFilePaths", "[", 
    RowBox[{"testDirectory", ",", "form"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"labels", " ", "=", " ", 
   RowBox[{"Union", "[", 
    RowBox[{"trainingDataFiles", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", "labels"}], "Input",
 CellChangeTimes->{{3.8869666057572412`*^9, 3.886966611457056*^9}, {
  3.886966989448803*^9, 3.8869670149380407`*^9}, {3.886970618343615*^9, 
  3.886970691160719*^9}, {3.886975376999236*^9, 3.886975389803348*^9}, {
  3.887136313324113*^9, 3.8871363374601927`*^9}},
 CellLabel->
  "In[572]:=",ExpressionUUID->"56b7b102-ec99-4c3c-8ce2-1f43135c8382"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"n01440764\"\>", ",", "\<\"n02102040\"\>", 
   ",", "\<\"n02979186\"\>", ",", "\<\"n03000684\"\>", 
   ",", "\<\"n03028079\"\>", ",", "\<\"n03394916\"\>", 
   ",", "\<\"n03417042\"\>", ",", "\<\"n03425413\"\>", 
   ",", "\<\"n03445777\"\>", ",", "\<\"n03888257\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.887136338049995*^9, 3.887139482962305*^9, 
  3.88713953750521*^9, 3.887139808279004*^9, 3.8873034429825277`*^9, 
  3.887304678108287*^9},
 CellLabel->
  "Out[575]=",ExpressionUUID->"0fddf6e5-4187-46e4-8faf-6b901fca3ce1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "trainingDataFiles", "]"}]], "Input",
 CellChangeTimes->{{3.88713948741397*^9, 3.887139491561997*^9}},
 CellLabel->
  "In[576]:=",ExpressionUUID->"08e8b3d8-7e8a-4c18-a0b0-cc4506f18633"],

Cell[BoxData["9469"], "Output",
 CellChangeTimes->{3.88713949179099*^9, 3.887139541617896*^9, 
  3.8871398136601562`*^9, 3.887303445234653*^9, 3.887304682543679*^9},
 CellLabel->
  "Out[576]=",ExpressionUUID->"7e6cdfc5-0aa1-467f-8429-42de8d3079c1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "testDataFiles", "]"}]], "Input",
 CellChangeTimes->{{3.8871394944924603`*^9, 3.887139497533276*^9}},
 CellLabel->
  "In[577]:=",ExpressionUUID->"c194f5b2-6398-4e7a-a205-a14db8a66002"],

Cell[BoxData["3925"], "Output",
 CellChangeTimes->{3.88713949774338*^9, 3.8873034467654467`*^9, 
  3.887304683842628*^9},
 CellLabel->
  "Out[577]=",ExpressionUUID->"454c27db-6f42-4250-8680-fcc9abc41d44"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"genTrain", "=", 
  RowBox[{"Function", "[", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"trainingDataFiles", ",", "#BatchSize"}], "]"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.8869668449910603`*^9, 3.886966914632674*^9}, {
  3.886966947937873*^9, 3.8869669725251703`*^9}},
 CellLabel->
  "In[578]:=",ExpressionUUID->"734fceb7-aa13-42d2-b9d6-5ad97bb8dac4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"trainingDataFiles", ",", "#BatchSize"}], "]"}], "&"}]], "Output",
 CellChangeTimes->{3.8869670190905724`*^9, 3.8871363446555853`*^9, 
  3.8873034506530046`*^9, 3.887304685400329*^9},
 CellLabel->
  "Out[578]=",ExpressionUUID->"9ac45d8f-0ea0-4f2a-8f34-26b5ca3c522b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{"#", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}], "->", 
     RowBox[{"#", "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "&"}], " ", "/@", " ", 
  RowBox[{"genTrain", "[", 
   RowBox[{"<|", 
    RowBox[{"\"\<BatchSize\>\"", "\[Rule]", "4"}], "|>"}], "]"}], 
  "  "}]], "Input",
 CellChangeTimes->{{3.887136351995638*^9, 3.8871364028620977`*^9}, {
  3.88713643858812*^9, 3.88713666751798*^9}},
 CellLabel->
  "In[579]:=",ExpressionUUID->"cd20ee2b-5b3d-4ce7-8eba-28cc7437c0f3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
i0/1caOLPNl+XmwPAZXHwnGYBKE7r6ZmxfDQAKBco56352iOKSb7ggrIcS/Y
6pjS1IGI7td0s12fv0yGfjPH7pjOMFstRrPBZAZn1ZpMKoNh3qSbMyjGbQtT
CyO9iv631uk+kI4puh4b+9rMfW3QRPfsi1v9N0/2XDn28sSe/ptn1W+fTr+6
33nj1IuLRz62XB1ua/nw6Mbr25fe3rt+7+yxB5fOdj559O7Zkw+vXg33fOh9
87bvXeennt7B3r7ZiRl49sB+/9HyJe4wQ7/wbm/mH42gfzU/DtdjF42vbgj8
Z8/W4ak9x+lB0/Uas2ZeMfJ+duD1aGfryztnbx7f+eTKsb62O4PtD9+0XJ74
0K6Z+GRVzYIAyKJSAif18d2bzhePA7zIsWHugBCpmJGZGJQc7QP2BHqTYmTC
8CB2kA9V5IEXeRABAGC/2JsYGsgO9KP4eRI9BSghDyENZALZuXR6x5qV2f5e
ZAELJQnkeXvSeBy8rzdL7M8JFDH9vCme7ng3HlbAIfDZBC6TwKbjPPhMdy4d
mJcb29udI+TT3LgUd1ALOOERoefPnQKZ4JeZKINRMw9Z9AAni1lvg0yOCSOL
fTLrPwohcCqDxWxHSGuxaMxmhcU0Z9bPGBXj0MK0bqxfPfQeZPSW8Q+a3hfm
wdem/lfQaMfEo8ufbp2afHR54OaZsfuX5p7fVrxu6b596sX5g+9unvpw/9Lb
m2fbb5ztuHf18cVTjy+f6XjU8ubhfUBR/9u37563db142fu242NH18SnIf2C
FvwqB0KOe0Zfl4P8+xCCPt9/Mtu+OCALPOWnhyMWG0g61UoTfLPAYNIuzI1+
7G279erusXtndpzdXXt8c/XlfQ03j2w6s3313sbStpsn3z+91dN2f6S7XTUx
BPzU+/anZw9s9+Zho0LdZGKOjwDr7w4kAuPDx4E9wMV4clFCFhLUYD/MjwfZ
1x0f6Ef38sALBVh3AZrPRbhxECJvSqRM6CUgYFHfM6guvp5MJh1FwC3jsHDu
ArLQncDnodgsBJOOYNCQdCqSRkZRSWg+h85mkIHx2BQ+h8pjkwRcQBrbQ8hz
d+OWlxU9aW2ZGO1XzU3AET48/WiwAX0wwjPkcMT7DQj/foQ+px0WI5Ags0Vj
BckmyE/NCsg4Y10YgbRjltk+09R7SNEHTXcZ+p9Z+p/ZPj2FBp6P3T81eu+k
8c0d1fPrk/fPDt48MdN28/31E89P7nl2eu+zU/tbT+57ev7om5sX266df3L5
7Kt7t5/evPai5d77l22vHj1sf/yo49nTd20v+ju75iamQPscCyFgRwH9R6kQ
9HmEOCICcAKDwahW2zNuM2TSaeYm9MppyKTSzI31dTy5cXLbkc1l21ZmbKtJ
O9hUfHFv7ckt1etLE+oLYx9dOtB69djlozseXj3T09764c3zluvn1tcU+bmR
pCJ2gCfNg43yFRABP15cXIAnxYONAfyAGvAT4scGxwR5M3zdSX4eFKEA787H
eboTwQYIYOgUZ2DADVGJzlwmzo1LIuKdsOjFDCoGUMRhoQE/DJornYqgURBU
EhLwQyVhGVQCqGlkHJNGZNFJTBo4Fcmdz2AxKUwGRSzyTkuOqyzJO3Zwd39P
h0W/AMf5QJGsJvtKSPuKAtuvRgju1S/8fLkwn68R8GIW4EusentqqYZzBOs8
ZJo0K/sgdR+k+ggpuqH5bmii3dDboum4bu25Cw20zj48OffghOX1jfkHpz5d
3PP6yKa+q8dendz9cN/m2zvXXd/edHV7090DO1rPHH117cLj86eeXr3YcvEc
oKir7Vn7owevWx8BkF63Pu5++WL0Y59GueCYWHVM6f3HIGT+0l54mYHZotMB
eCwaFXBDkFkLGVX6+THV5MDscE8PAPr68V2N+XWFEVVpgfX54TtrM05tqzy4
rqA2N6ypOO7B+d2XDm7aUl98YEvdmUPbzh/dc3T3pprCRCEb58nD8ekoDtUZ
bHvx8QIGmk1Z7sbEuLFQnlwQwFCCfTlBvkxfN4obGyvgwlQA43GwwFuxGGgY
DLIrm4kFNSCEQkQQsMtBzaITAEU0OhIYlYagUBBkMpJEQpFJWDIJRyJiiQQM
hYxn0El0GpFKxTIYBC6X6iZg87hMNx6Ty6JyGaRYeeiRvVvfv3mmnp+0OzXz
V4TA9f73ImT7BSH7GjB41a5johWyzUPmScgwpBp/aZp5CSk7IOVraPI5NPLI
2H1t/ukx0+vz0OADw/PTinsHFHcPfTje9GLnigebyp/tWtuyrfHm+tqLDdVn
6ipPN1Rf3rz2xu6tT8+dvHfs0P0zx24eP/zw8gUQFL1+3NL5vPX5vTsvH9x/
8+Rxz5v26dFROImG/iRv/pOFWL+yuaZfVkqCJEurUBgX5m1apWVhxqKasi1M
GmYHR7ufP7l58ty+DYeaV9TkSgtjPXIjBUVxntVp/o2Fsrrc0Pxo9/Jk0a41
OTW5kdkx/mWZ8vK82LqKnOb60sLEEC4VxadjBAwsMHcW3teNJvZk+bnTeTS0
GxPnxSODbX8hw0dABR/ZVCSQGgrJhUx0ho3gSiS6wlSQ0YABUBNxrgSsC9AZ
OgVLJiDxGCci0ZkEjieDwxAEAgKPQxLwaAAPkYADRqWQgOYAiqgUPJNJFAgY
In8vHpcB+PEScjwFLCGPkRQt3bx21fPH9wzqOTjRN2od9/KM9hWFv7JLv8QD
vyD0ZYBDRpgfID42BWSZhYzjVu2geaF7tv+eauCedeoJNPHI0Hfd0nvV1Hlh
pmWvrvUI1H/H8vTE5OUtn46tbd2Qf29N1q26nOt1JTfWVF2rrTq7suRkVfHJ
VWXnGlaeW1d37+Duy7u2Xj+w6/yebTeOHXpx5/qLu7c6Wu8/vHr+2e2rz+7e
fPHg/qfuToNKBTnyROufI2T7NyBkMtqbbPuC0NyMfn7KvDBpUYzrJj+qht9N
fXj+8vbJI83VTWVJa4qiCmKEGWH0zHBGXiQnL4pdmuheneZbEu+eK+eXJvpF
+ZGkXsTIAHa4mJ0ZG7iyKCE3zt+NgefTsKDmUTEMvAubhORS0FSME5PgCvZ4
sEleXODUSAI6jkNGschIPHYpFuuEwy3H450BEgQiEk9AYbCuZAqeRifB8oIH
oQ6WiEFgXJfiUcvhI4kuRDJ8JBaHwGBhw+EwWLig8XgsiYwjkUGNZbHJnp5c
oELAx5EJaODXAEICJlHIocgCvQ/u2jwzPggQMujVIPOGV6fYrP8ehP5odRzw
ijadzayymUDSOgXpR83qPt3sO+1EG+BH3X/DPHLX0Hd1tu2I5tUx46sTUze3
au/vhTova27u7j9Y27mt8mFdxv1V6fdW51yvyr9VW3lzdcWFqsKzFYXnayrO
1Vafqq2+0tx0ev2ac1s3Hl3XcHLbxjunj9w5e+LpjYvXjh+4f+Fky+Wz9y6f
ff30sWJ64vMqmj+1v5ye/8tmR8ie4tlXT4AoyLyg0E6Pqsf65vrbR9896np0
vuXcjpNbKzdWxK/ICC5P9suVs1NDSFnh1JJYbnmCoDbLb31xSENh0MoM/7Jk
79gAktyPGOZDDPLEp0R65yUGlaYGUTHOBNclFPRyNgnNo+I82BQ3BhHvspiI
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
qG1l1t3SpKv58WezY46lR+5NCNsRJ9sSJdkQEbA2LKAhTNwQHrBGHtgYI1mf
FL45I9ZB0dbClB0l6dtKU+vTQ9dkSbeUJ28oS922uujs/i36uVF4jJgM8JOM
ps/PeXw1+yJ3y1+wL2vDvi4Gg2+k6o36eYV2ZgoCOYh+bvjVnQtbV2zKl9Ym
uDWmuK2OZ9Qm0DfkuDcX+TRmC6qTmYCimlQebMmsqngaQKgmkbkygVURTa1J
4lcl8AsjmSmB+BhfVIwYnxBMTwxhRvnjscifMYhFaFdA0fcuy/7ZeenvQe3q
9AcSzolORoALCnsZkivwXPA23omA+J0H09mdjWSQllGJzgTCcjQaninCopYi
nf6Z6PpjgBuhIE60OktaHuuTHMjy4+AZeBeS61I6zpVDxFIxriRXJzLKmeAM
72HiXWg4JyELHSJiBfvQAZksMpJJxXBpOHc2GURBIb58gBCL4CJkE1YUZ926
fHp+egggZF8q+W95GtS+ENP6DUIas3HWrB0zLvRZF95b5tr1Yw8MQzcso9ds
o5ehgXNQ9xGofa/x0RbN9cb5czXTh0tHd+YNb87uX5cxsDGvpynv+crUm4VR
53IijqSF7kuUNEcGbpQHNsn814T61of41Et914SJ6yMCVoeLmhJkmzOiN6RH
rsuI3JwXv7M0bVdlen16yKrUoKb8yDW50Rsrs07vXm+YGfkWITtFdn5MXxAy
Wf6iAWAsOgMwm8HkWPMDryUdHpofGYAUk7bpga57Z040FW3MldQlCtYk8RpS
2E3pvPXZ/HU57msyeavSuStT2dVJbKA5wK9VxTEAQivi6YCf4nBCaSStJIqZ
I6PE+iBCeIslbk5yX3xMACVShAdJOsi7AUhI5x9cl/7OefF3wFwW/w74F+CA
WDQs4IeMX04nOgN+SMgfCM7feTKcPbkoFtmJil9KwACvBzzdEhJ6KWrZ74jO
vwtywxUlAIRCCyN4kZ7YYDeiGxXJxjkLaFghg8QmoAA/FPRyEnIZj4J2Z2A8
mehQX3palFeCjCdyw3Ioriwamk1BAXNnErx5VD4NS0Y5cSlYXwGzOCv1zfNH
cG+adF+eRLP8yZNo/0t+7AjZPk/6W3UWw6xZM6xXdlsW3ppmn+pGbuoHLtuG
L0NDF6D+k9bOfeaX27QtTQuXV8+eKJ/ZVzC5NXN0Q9rQ2pSR9dl967Jf1iRf
L4w8mSHdkxDcHCVaF+bXIPOpC/FcFQzb6lDv2jBRnTygKtSnIT50U3rUutSI
hhTp+uzIHaXJe6vS1mSE1iQF1GdIV6XK1hWnHt/WpJ8ehhEyw49E2V+lYrPY
H8134PRXEDLB04ZareP+qUWns+r1Jo3OpFKOf3g31dO+8OnN5NsHLUc37qyK
b8oU1Sfz6xJZ6zMFzXnCDTmChjROXSob+LKGLLeySGJlDAVYRTS5OpqyMpZW
GUkplOKzA9GFMkpBOB2oUISHa5iHi9wXGx1AjA0i2+dqkMBnkTBLCC4/4Jb9
HrPs91jnH0A0wmWQaGQMGgEi6sXgyvLJzlTEH3j4nzj4n9woTjzScgrqZwZu
OfAyFNQSJgiN0IsYiD94UZcmBNCK4zxLYtzTQ5kR3sQAPsaLifDl4gM8WP7u
TOChgAvDI37m0ZBBHpSoQE52tEdlml9ZkjAjgu0jQJOxizzdyRFSX193lhuL
4s6iE5GuHAop0NOjKCP9+unT+qlJ+FF9rQrSLNjUC/BcnMUML4UyGs16Hchn
P68fs08cmb+8e8aeukAqnd725QExe6prtKqnLZohSPdBP/PIPHfPMnlV3XXY
0nMM+nTO/Gav6d0O9fN1iju18xeq5w4XTW/NmF+folqfNlMfP7Umua82+XlF
zMXsMFh/YkM3xkrXRwU0RvjWhnrUSIQrgz1WSDyrQ7wrQ7xXRQbUxUmaUmTr
M+UbsiLWZsjqkoNWJorXZkgb00PzQ90rY4PL46WHNzZYldNmtdJqMy7oVA75
UaoU8GyqzQxHNV9BMlsdt00BLZBJbzPqrAbtzPjI9Niw/XU9Rq1CYVPPzfW+
HH5+daD1XPetQxe3lW4uDFmb6bkh22NNCndNMgsY0KLGVF5TumB9hseGLOHq
eFpVNL4yilATTwWY1QCEIshl4aQiGSknGJ8qxiT5Y+J8MBFeCIBQbAApKZQM
knECHkW2OxQmdikT/TMVuYjg8hMJ7UTBIwlYBML5Z/hyUxBeNFcBfhET9c8s
9B+8aC6+HIyA5AxAcqeh+GRXLwbajbiMjfqDG/77MCEqJ4JTkehREu8R5YMP
EaICBehgL4pUxA325XlwyQwiHFbx6K4hPrR0uXBFRuDaAkldlldpoiBKwmSQ
l3BoLoH+fLGvIFjkEyzy5dBoLCLJm8tLDIvYu2F9z5PH8309mqGPtpkxSK+F
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
RdfII6J4nIbczCvH9l49uXdDXXFRWvj/z9N7QMmR1/e+fu+c++z7fA0GdhVn
pid0zrm7cq6uDtU55zA93dOTc5RGI2k0GuUsrVar1eZd7cKSdgGT/Bbb4GfM
tbm+YLDBgDE27xrbFxtj1mv0fjXi+Jzv+Z+aVk9Pddfn//19f1X/as230wuj
sek6N1HFx0skHJd2lqpEkXqCnKyELm1N3r+sdJ2tjL8aszbTtmba0snboCS1
ZdNoWDklWBVB5qpkb4TdWdqQJLVRdAjCTAhchexPsENpcSQrqnMBTY4fyTCD
WQpiz1CeUKX8R4AiyNIwZvD+mPdQyPVEDHK1oC0LmjhvbKaRXoGYKqKro9x6
i5kpodCVw1RNi4ZGyj9dFyDM1GULmFtD1pfCunLUlAsZI4xGxEd4XMegesyl
xb16v1Prc2hwr1GkndGALyb5ZcFZTRHFqBcCVTroSknOuOAIMtYAZWZQncRY
g7xd4MzBACDkT8Z9gFAo6GNYp8erN5lUJtOIw2FwOsxWi95k1EBdQ72mAOOK
Bjwx5etHnJmoO8rpwOVKCW9Odkd4SzXL3Lux/a0//cJXf+/NE0u10SK10JXG
y0gtqe+WrL2KayzjK8nObMzFsVqG0cWi9mTA0AgZl2PW378589ntwr998dq/
/u5VZaXZj9969J1XHv3444/+8tWffun237557rtPn/i91cbrae7FoO+jef4r
y9WffeTKo699+NEfv/boa2/8/J3nv/HgzO+cXHo413umVXt6tPFcr/PS1OTL
01OvzUx9eG72Y8vzb68tvrW68MbcxKtTnQ/PT350Y+H55fE3z649WBy/UMnd
7Y3dn509W6+vZFJVllqql86sziz2qpUs366GZzrJdold7cmLbalXpJtJpJHE
RjN0I0lAZpgoB66enDi32ewWiU4emW1SnYK7kbBA2oF31wyba5KhwGjSlDpL
64u8pSBY0rQ+hKh412HoqgTv4TDaF6MG0vxwilbFib4E0Vfi1QBemVOnkb6k
70jccwiU8B6OOA8GbU8kkP6KYMiRg+WAsRV1TOaUG2AXK+RsAe1BTE16KlAr
w7Za1F2HQpYEU/I04s5a3JEQ9TKvC1JaEdMAPyJlCXEuWfCTfiOII2wS65ZY
p0BbQCHOHmXNSc4a4ywyC6nbnQh6A7QVcQ95XYOYX8NS5oBgD0kOOeyOye5E
DI3LJI5areZBh1XjcZrsFr3FoLWZdWaDWrk91qJGPAaRtkeD3qSMpKL+uORI
wZyKIlAT45ILxk5N2lysbMzlp0eDULBGC1i75B/NQaVzjhV8UPIKsgd4lgWr
xJpDrCnGmfK8aS6LPb1a/OL12R+9fenbL2388itPPfqbTzz69muPfvDxX/z5
63///9773lvnvn5n9ve3Sn+4lPrva/nvXpr6+ccuP/raw19+/c1HX3/r0Z99
/tE7n/jJw+f+8OLO28eWX56ZvNNuXm/Un52Zeri29OL8xJtrM5/cnPnk+uRH
l7sfXZn8+Ob8m+vzLy1OvbAy+ebOyr35sadnO/cXJl/YXHrpxPp0LFSikW46
PNvMdaqxUpYr5NhySWyUxbmmfGq6cGK6OF2WalEUepNqEs9H3I0MAYEWAgnQ
Bf1vJ+1txZ2NiK0g6qFviiJ9KXIoz+kzjDZFqdO0LscZoZDF8ZGQtx8URgfD
vgHReVBGDiXJo48tqMipG5KxJurzJPRiI3HPEdlxeF9HC4SuxlkyyFAKGShz
mmbQNJ50ATzzRRJYasddtYi1FDADQvUYkOMFiqpRN0zeQtSZCtqh9gUZs0ga
eMIECEHZCnNeaJcYzMKT9gCjfO8HTRhpEo61McpYASEYQ5QpTNmCrJ1GjW7H
oMuu8riHgSJ4msAptQwSUSTgAgLBx7w2DeZW7jxSbicxaD0Wo90wYtMP2g0q
j22I9OsDrPLkaNAVC7qAHCATyiLsFSCRi3s7dRH8p5ZBqxl/q4hB517PeIox
WwE8RzRDmM9F/CkJHMwBJRV+rMeR8RTWlZ1XpuS/+uTV7390949ujj/66jOP
/vqtR3/9mfe+9+mf/fkb//RH9//2k7t/9ezC392a/se7C+++sfPe52/8+9de
evebH3v0nS88+svff/TOW3//wr2vXz3/9ubq81Pjt9qNS/X6rV7nwcL0/Zn2
w+Xxj611P77W/fBi6/WFUfgR4tBz871XNmYfnph/ZqFzc6r11OLEg+NL5yZH
0z5b1GvOi2g9KZRTbDZBZjN0rsCVc0wnyy9VIyv1aC/DVmUEOhTwIqW5SKPV
lA86F5jvYxnAD2nHPY2IA45jnBqRkYEEMQzJB/jZR0hTFMGIzMAS1LIoOpwg
NI/rGphVNaABfmL+Q5B5Sqy6wulzxHAOG0n7B7PocM4/knQNFDFtg7WUcF3C
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
ocXRzNpkeXO2fmyxfWKlu7M2cW61t7vYPjVd2ermT4xlTo9nz03nL88Vrs0X
7iyXnlkv318vPrWUujUbuTEduj4VvDYTO98NnRsTr01Ebk9Hb/eCd3rSvYnQ
x7frr65k745Ld8eDz0zHrwF4OeJcibg1zj6YlV5YkF/bzLy123rzVP3+XPzO
lHypxV0ek650ghfa4qWOeG06cmcxeXcheb7JItY+0jvC4waB0Iv7K3xYXIt5
+n2Ow7i/H4NeAB2AQgAzGsrNfsUZAMYCjIGndSyuZjANEIg6+53GgyCP5Qjh
HCSdw4QDap8uwtjgNTlMDb0YuBlsKInR1Ye7+1HnUbf5SbA12MDsRzyWA7jj
aAAbyQcslaCyWinH6XOcsSzZKkE7JOckqU1RuhRpSFPGPKecR4IxgevipDZG
aGRCHcKHg9iQiCsCFAEkwAkkAkKCIczrgTHSeYS09VE2FesYYmAPncO8ayjg
VQf9WlAI0UUJU5KxJSlrFDOCYCOOOzKUu0i78pipgKjHBcuVTvgTZ9o//OSV
H3xs7/sf3vnu6ye+9eL6V5+a/vzZ6pvHs8/Op66Pxy80g+cb0rm6dKbMnyqx
oJUEuhxHlmL+xahvMY4+1kIcnYmhU1FkIuLrhD3toLsleRoBb03yViRfOYgW
JRBeCtH1ZKBXTi22Clc2F66uzVxa7p2fGz0zWTnZyW4141v18J3VxuWp9Bkg
oSVcngjenpNBN6Yit+czN+ZSt2dTd+cST8/G703LLy2m3jxWBL26nLk3Hnpm
Mvr8Qu6picTVVvipydizczKkoJfXkpCoX98qv7CafWo6+tRsEt711W7kQlva
rTNnmuylnnRzLnZ7IQHOjJgPky4V51fziEZAlaMMTRMEZihYuLcPROMqmMVQ
6WBGU2g/lANodqDGwQiNM4DB4xrIS4j1CIhwDrCeYd6nFRG9TNuyQW+ctwIY
tLuP8fQLXpXoG5SQ4TCuCfiHOHe/6FXBdmT/xzCmTnHGgmAuiaaiYMwy2iyt
L3CmkmCBMYlr0qQOlKH0JcFeC7orAWeOMWdpAyjDGFL7gowUpbURWjk1+liQ
57OSNRNQLr+Ca8UpU4K2pmgboAIjKMs586Izy9sznK0QcFXCvlrIV5E81aC3
KaOjUaYT46YS3GyCmpWRBdl7skBca4ufPDMKR+HFefnpHnujjpwr2E/F9Osh
7amsbzuDwnN2q+yZMnciS6wn/aCVmHc17ltOQPHyA0u/winun5V9UzHfZNTb
jXgBoYboqAqOEu9MEuYU7chwnpzgy4pILoBmJaIgkdUQM5OP70yPPbW98uDs
5r2TS1eWO7uThaUCv92Uz/VSZ8bk42Vms0ieGZWuzSXPjkd2xgLnOsEbs9Gn
F1N3pkIX6tjpnP1mm7pSR8/m3bsFz8UasZP3bac952rEnUnh2cXQ3enAjS53
oytcaFBnK8SFFreZ8mzlke0iBtppMIAQvCAIfMlvOEDZj4o+tYCMiKia9ytT
1Wv+EGo/yPj6oDRAj5wM26DxgamtzG5kQCJHlGADXgRzn9aFKR00+5xbxThV
tGOA9wzDdI6R5hTrzAquUtgdo/SACkjGNHFSn2bNUIlyrCXLmMFJKpKrGnQD
FYBES/ZWAraKZAGK8pw+zxoBniJvBuVZ2LCUBGtZtLVk/3iK7CYJsP1m0PVY
9ZCrFnaVQ85S2FmOuBoJfzOJKAuME8ql/2bU24r5RmMoUAFlAtSU8XoYrYf9
rQjajuIgeFnY7iRweGUYJ5LkbI5bqURXSrGNavR0K7k7Gj9TD56tChfq3F4J
3c16thOWrZhpK2bYTphg+3jceqaA7hTws2Vqr86eLhHrCddi2LYQsR3LIlt5
bLtAbRWpY3liI4utZ7DVND4f983GEdB03D8p+zthb0ty1QOuIucogx1FiGac
bcSYikwXgnhWwNIMmmWxUoDuJoJrrfyl1akXzm+9eefc82fXLi+2Nuryckna
bsf3pnJneumtVvj8bGanF9keFU+Osrttdq/NXGiTl0bxWxPMjQ55vu4FXWyg
J/P2YynL2ar/8ih6s0dfGSXON5CLTaVzP551nSwgM5JhJe44UUB369SFLhSy
0NWp4PkOt11EEP0TrPNoGNVGSR0IygHrPoKYPkBBMkH6QRIxlAyaY6JOOY+N
DbC+o/BIiFQHiZEwMfL4IqxyEY02BP1qwaUKeIbipDEnODKsI0YYILQkab2M
DMVxdZY1FkVrJWCHw92OeMdkXw9sPEmAJmLoZBybTZO9pL8bd49F3W3ZNRpx
tsKO0QhsezoxXzfu70T93RgylSYXivx8QZhMUcrvxrGuDCnCqyjmH1POcuNT
BWa6yE7nmYkM2Utg8FvwtKkk1ZHxsRgBUrAJo6NhH3DYicJuUPAinQii7FIC
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
YWof+Cy3qlC9BtLulLpdhZv3S9/ZM/Dk8Yt/ffvaP714/Ml7t548vPHN6d3v
Lo5drq97ODX72b79twcHzzTUNgnoPuQOD+qZ2krUkJU5YiMNGZEgI81YYOO6
7YtO+KwNMevEgDNTNuSoATpqhIADUMImLHBwMOVATdqR41b4mAUGBACbtGDH
zfgRE27QiOvTYbvUmFaQeeQFNcqQ9RL4phpl8GYFslMJ65Vt65Nv61KXg6Ye
lLaMCBVllIWxz56r8f1obfTruY57OfuPJuqfnF/5l72D3+lNvpzUPB9T/sel
3d9b7D6VsB2KWtdCtlFt5bLXdDjlP56L7kt4FyPODJcoKCoyIZ7xUp+p16LB
b+6wcJp0zJSYXG8URyUcv4QT1khsYm5zIjDaktsz3jtYn3SohDpp5fzY4AvH
D6xP9B6b7D4y3nh4vLYnrezMyhuSgmyUkQnQs35mtZcBHKbKSgdlC5Q5AA9Q
ylpYkBUzkkH7lrQwUhsPjQK5KKrD+9Vo4EsNfh4oZ4Acv5UM4AnY/vM4HagE
CFWFxZmQIGijW1QIixLls5DCDib4Hr+VVBXlZ0L8kJVSmJthKCzsiusZ4FPg
FSB87IqUFNNl44G4O+Kt7LWxmpXkTj2z18js1BDWsrpTLa4ZD3s5Ktybke+M
CIDPdJnwbUZ8u5Xc5qB3OmnNhV6mEFO79Ph+E2XKxV8MKW6NN/zs0tofX3nu
m9N7fnBs15NHt/748nOf7pl4faj9eDR4vbn54fTM9c7Ok3W1I1bjsN0w5jFl
+fhqITovhHepUdN20qwNPWEonTKVA4TmHSiQkHc60bM21Iy1EKfB8ZIHt+TF
gEQ96yzcDpuyQWccyDkXCEu4MQth2EzoN+ABPy3yAjY1ImheAq8Vw2pE8Foh
pE4MaZLB2lSoHhWsX7p1SLUddG1tOnROiY5WwiKMMpCFjiXN/3R8/uuZlnfq
3B91hJ6c3fnbfQPv9cRuJrSXAoqf7R35et/EtebU/oh13q4YNVROW0TrKdvJ
fHA1Zt0VcXTqpfqKYi1sq4tT4uJus1O3ZOXkagUrKWTVapQBPk9DAL252SWU
Zk32Roe3zentcnrm6hq7cjUn9u178+rz1w7sfeXw7hf2jJ3d2THZ5OiqUjSm
KnNRZlWYXhNi1QU4DR5OnYtV6+ZUbTjPZsbepAh0aikrM2NnZh0sUNeiRmJQ
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
Ly9f+rePHv7s8w8/+uith4/u3b559fVLF++dPn13be3q/NTpqd71yZaJwVRn
iyvt4+dDkiofL+ViAkdKe2gpNzUf4YED0L5lvPSEg5r1cjKewi4HWZ8Q9Fz/
HaFNilwmAeDHpGJopWTw5eZ5NR9jFGCCanqVmV9t4MzX+17eO/TFtQOfX97z
+aXlO8tt6/X2hZRyb51xtc4I+JlPKdotzDoNJSvFAmUkmEQlPMKtiHBKo9yy
BLc0yS0GfXG7Hj/sZo15CrOC67WoWjU0xd1SV7l9zID947Xd/3Ju7qOxqtca
3ReDiv16xn9cXPvb9WP3B/LP5yNrAcOERQYQeq656lh1dD3qm7cYLjXWP9/a
uhaLduvUHhJGCt0uQpfI6AgRByVkwXUsuJkJsbFhbi7CL0CHK9ExETohwhT+
b3xYglue5kGquOVAdUJ4qwzRJinvU8EG9dhhM6lbg+1QY3tN1BY1oVVLyUlQ
VSJEilvhJTztJz6VZJekuWUx6vYkiNCUbXbaNg3+KRmiyM/cWsXbkUIXzauR
vznQ/eeTY59P5M6FZUPcijEh+k5r/ETEPG8StQhIITwkTEEluAQ/BR6kwxy4
HT5imZcCcZBhfgHVzWVwIOVMJIqHp3AxFBmJLcHRzEzhYKa+1uz2cUQtekez
QN3DVgwTRcOltN0I4QqSt8KR7TXafnLp4p++98mvf/jZJ588fPT4/t1bN954
/vl3Ll5+eObMm0cP3T6y+sLhhQN7+uan8v2N3oF6d2NMlXHzAEgbtDALl7L9
nNoQH3yZ9XLrI7LaoLTKK66LqKvD6v8fQkYlvbC0R0La5AeM4FWdEG+Xkpxi
fK1d1OSRnRpruLU69MXV9c8urtxZ7jjWEVxM6/bmLQdaXPMZzZBfMOir7LCz
67WUjBwHlJZh4yJkRAADCvOhYU55kLkjxiuvV2K7zNQuE6lJja5SQP2Mp0LU
b7fJYVNG4q9OT/3u5ORbbd7rCc0Fj/CUg/fXi6t/OLPrxXrfsYhhl1M6ZVPs
S3qO1UT3RlyrAee0QXMmlzmdzy36PN0GtZ9OlEC28eE7pDSkiIVmkyokFIiK
VqGlQ9W0MhWpWEXYZiQX2+jlHmaFk7LDQ90eZgGKYBk+NCdENEoQ/Sp0u7B4
SIvpVaMbBGV5fmmGtSNJ35rllKWYxRl2aZz6rANW5IYXRYnfihKLMvSncvyt
EebTEf5WB/1bamSRh1wUIRW1MIrudTn/emH67+dmvpisuZGzToqxddhn9jvE
617lpI6boyMjZESCRYjzSDEuPi0kxXm4JB8f5uLcdJxXwHDzODI8Xklnalg8
JZUlxZIrK9BRmSalNiqQOCUcG2DxQ0RWmsBqJvF6CfxltnavyNRD5vUI5ff3
7Pvl44c/+eyjj9978PEH77z39uv3rl9998Vrn9y4/t2Xrn3nlRcevXT+xoW1
04dnDy327x5r6qvz5sOquqgiH5HmgpUNCWljUlYfA8ei+piyK2fvqLK3pmy9
dcH+ltgmQoX1OxsIbVYxcPDfz4AvQWqyy8guKbk1pGv1q85Otl6ebfvgzNLj
YzPH2sOLKdCCaffU2herzWNRxVBQMhiS97qFLSZmTk2qVhGzSlJChouCrC7C
BvlIDwvipBX72WXAARo0lEY1MSdHxUQVHtpTSe72fh1h2kD86cHB/3lx4d3u
8NWg6IKbf9kv+ev5Xf98fPpanfNQULHkEI3pBOsp36l8Yl/YsRqwj2ll+2PB
g+notMfWZ9XH+HQZbAcfsk1KQciYOB4JIqZA5HSoigFX0CtkpBI5fpsSv1VH
2KbDP2vEPe0kbgsxy2Ls8hizBJhJDb+8SwppZD0FolFL5fYc8+k67vYca1uT
sCJJfSpDeybPLa5lb02Ri2qZ/9DM21rLKMqQi6pYRW5ckY9elFE81e1BrFSx
V6KEA37sny8OPLmx88mF6U+GE1fThhkZoRb9VAt527yRPaCgxAklSRamWsxM
ixl5taDRIKxVc6sk9DCP7GYRnVymlcmWEclCPJGHxvLRWE4FnLWjPKO3ODgC
IQKtozLcQomTw7NTGAEKO0Zi1VD4zWzpTm9swht+ZW39N598/ONPP3r3/t33
3r777v07965feXjz6se3b3xx//YP33n9s7duPbh16ZXLR26e3X9ubW6+r647
5+nNe7pytuaUtiWt6cwZ27KGhpims9ox2ZGa6a6Z66nbO9V9aHlcJcGrpQSt
nKSREQsL5MU4IHCweQa8tLn3AjjQbMy0t4gJTgkJINTiV13Y2X1tV8+DYzPX
Z1tOdiUWksaxgBxowCedTBmW6r1zOUeXg9+opwF+qtWkKg0lqSTH5eS4jOLl
o+1MqIVS5mJAIpXolAyfkRGATQV45WF+eb0C068jDkoQH07W/P3S0vfHq16K
SC672ACkP5+e+d3xibudgWMx5W63cEDOPFUTu97dcDQTXI96BtXC5YBjNRGc
8Jj7HPqUhKNGlfHLt0rwEDkNIyLD5AyEggVVF6ajI/VsmJFZoaeVGMjbjIRn
zISnHcRn3ORnNgtTglXcJIb0K6EzVtSoFtrEe3rchD5eqzlSrdwd5vUoKga1
iBk7YcFJXHIRDsbYR2KsBWv5qK7oQjv9tWXzx+cyP3615zcPxn7+csf9nebb
XZVPXh55crn/fz038GFf4LRXMCFCNxK21hOeXnYKJozcNB1aLSTXKthJMb1O
J8ypOVVKVlxACXDIPh7TymJK0QRGBYIEgcCefZZQXEwpLWOVQWMGs4lfaZXK
jHKZ02L0uZxepyMViTRmq1rSVUP5pnq7v8rgODA29fNPPv3RJx8+vHPz0esv
vXf/ldeunX/9+oWHL1/59P6t7z9+4/uP73/85u33X73x3ivXX7144tjS+NJg
867hxpmedG/e1VFl7atzDzR4gTuNtSbXpnpO7Z6+dHDllfMnXrl8epMfvZJS
2J1jg5lNWjZ3fQEnwaubAsd6Obmw1EJCqvXIexPmG/vG7h2de2N94lh38mh7
bDKkHvXJZxKm+YxttTW6pzU+GNYCfnJKEIQwwIKqNfSkihZX0KMKupOLNTMR
RirUxoC52QgvDxmuxCakBC+nAhS7ejmuTYJqpG69mNL87uDQLxYaXkspL9np
F13M3651/Wq9715P6GhYvGTjDEppV5tzr412n87F1hO+PpVg1mvekwmOuAw9
Dk2VgmciwkXQbWJkqRyPUJBhUmqFjF6qYJarWeUGNsTIKjXSik2UZ23kLTbC
t224b7nx3wqQ/iHN3tauwky56BfbDPemgvN2ZI90y8uDru+f7Lo94htUFU8Y
ofsitOud+vvj7gdTnsfT3put0t32rZ+tmf70ev5Pbzf/4pXcl9cTP75V/c+v
N31zNvTetPRPZ6v+fKLm72c6vpiMnPZyZmTYTkbpkBh+NKldCSgaQTyQUNMS
WpCDT8mYcRE5LWXGKmmhSkZYIrQwWKwyOHprKQ4KK9n6DKJ4BwZQVFahojMF
WKJWKJZViiQSiViuoLLZNDaPweEjUXgCloKH4nBlqOpA/LMHj3704Yfv3X7p
gzde/s7DV1+/eeHOjTNgfPfezc/fvf/V+w9+8N7bP3j84PsP3/rw1ZdePnP0
/P6lC+s7jywOzPVWj7SEgfOsjDbuGW8F/AB43rjy3Pu3b3z21huAyU1+DCoq
0CZFm8BsIvT/yKCgeLRsh4ycNPMH0rYT403PTTafGsitNQXmE8YeK38hZT09
mD/Yld1VHx5Lu+qMPIBQjQpXLcdVqylVOgZAKCSlBKRUOw9vZqFNdCQQAMlI
LnMyESEh3suGh3nwJAdSz4PWEp5akGO/mqr943rf+432F32cKx7mL1aafrra
8lZ/8EhYsGhljsoYN9rr7g52HIp7VwLWNglj3KlZyfiGXFqAUL1eEuBTdTio
FFEsR1doyQgltVTJKNWyyrTMYh11u4G2xcEq9vFKkhJEjFcM+sSayrI2FWrA
SJh0MhYCrBt91s8P166GsEczrB8cb74/61+P0Vp5RSte5KVm8Ue7wj88mP1y
X+yTBc+LDawZVdE3x7R/eSP610e5Pz2s/sXd2I9uBv/5bvq318I/3Kf5ekn9
2zXf/zhW+9PlzAtp6aqF1s+vGBJDVwPCOXdlgwSXEuBDPJyHiQ5WkrJKTp1B
lJRwfByam8MFFoR/thy5vaICDtsGKYHBIKVbt+JLK7BbizHPAJbg8GdLoM+W
YcrRJc+Uo0qwVBQD+iwSW04i4NgIGDHkDn/57kc/+/jTxzevA5/57tu33r1/
7f7di2/cvfzowcvfff/+9z948PW7j3/03rvfvPf+lw/efvTS9XvPn3vr+nMv
n10/sTKyf6bjwFzP9ZMrt547cO343tcvn/3OvbtfPXznq8ePH7/6SmGPMhXZ
rKYa1YAQYDVEcEavLEyeB0QBZgpbDykLgBkLSwsLm+lZpfiAmt4aVndFNC0u
YY9PtqvWCYpXi4G5p97/wkLPnuZYp0fZ5la1OqRtNkGTgZHX0usM7BodO66g
+EQ4Nx/r4GGtbBQwIhMNpiMUqzBbzeTyIB8dYkEClB1e3LN5LqKWVtbFgjwa
yP7P84tfTWZfzylvZUS/OdD8j+tt703ETqcle72V4wrmi235Gx31iy79lE1V
xyUMmqVLSfewW9PrVLZZZdUqtoeO0iG3A1koFXYe3CVCesVIJ7/cytziZD4b
FZfltajRcGW/k95nI0/5Gbti/IUQfcSG6NZs6VYV3Z01HK+nfbie/um5/j75
tlZ+0ek870qb8K1p82f7oh8vBd4aMd0bUF/NE3aain5wTPKLS4qfvaD91zf8
v3vD//MXrb972fuH695fHjO9O8L8esn809XoD3dXX80b9vnE7QJ4lvpMYQKA
urDKzMtEAn68LExMTGy1VnY7RBkxzoLfqkZspT9dhCoqIpZs27KtaDv0W3Dk
th1bikjwMtjTT2O2bEM+vR1fDENuhxKhRMgWOK6CyCVUYkoIFAwbhWPtKMPo
1KZ377/9+cOHb75w8YNXr//g/Te+eP/u+w9eevTmzQ8f3f3e+299/u6bX77z
5lfvPPjh43e/evjo47uvAi/67v07j29fAeno8pFdV44uf/Da1e++dfutFy89
vnXj+48K/Hxy/82Ht29rJQiLlmhR4/UKjEVF0CuwOgnGrCHrxDgpDwnCj0FR
eBq4RcPSiQBpdK0Ma9eRbAqcTYpwSeF2fmmdnXV0tCoqgvcGJFcXO2ar7VkV
vd2jbLRJO1yqoaCpwyKpVjDSEkpWQatSMxIKUkiE8fLgMRkB1C8tbosG9bQO
86yVXBJmQ2OUp9LUZzJsSIwGbZCxXxzr/Jfb5/762umfHe2732P5cmfw71cH
f3+688vduTu9HuBCE1rOa6Odt4fbRvTCYaNo3KFoltEmfdouo6BBSe+ziwac
osKsDzG2Q09L8WHtDv5IQrvY6OjyceqMmKVa5UiAebrf/f6JvuUqaYJVNORA
fn6h62A9ZypQ1msv6nEW3Tug/uBE4EdXu4/ldZ0S+GqYfzjDvjUie21S+WjR
e2fA8v0DrY9nQ5P6oht9qC9OiD46QP3lVeXfHgT+7WXzby6r//1F619e9Pzr
Rd+bg+xV19Y9HuSJatVSUNEip1eLCFER1F9Z7uLAzQU3xloZBB8PnxBhzg6E
Hx5smQ2Ts7yiGsm2KnEZaGwd7BIRvYiCL0KUF0G2FUG3FiF3FKFKn0GW7IAX
lyDKYWgYBo0iYNBEFBqPQGIhcAwETcaTOTg8+crl87/45vPXbpy/e+3sx2++
9Mlbr3z1wdvffPz4y3cffPHw3g/ee+ubD9766tH9Lx8++OKddz5/8NaXD98C
5z996+7jV1988+blt29dfXz35vtv3v7knXufPnzr04cPvvPone8+evTOnTtG
BWpzX3Gblug0FPb9tmvJdi3VZ+al/OqYW2lXcwA8BgnVomCD3k2vwNsNFLuO
YFOiXCpUQIPJmKltQXFcgbm20rWnLQgyc5tH2h3UVOs4g2Fzv9fYblXW6wQ5
NatGw8qBOCTHR0SohAwTFEA97HIQfvwcGOipXbQKP624llccxheFaSXtZumR
vrYfvvzCk+89/o/HL/7TtV2freZ+dbz+yd2Zv10f/WZ/w72hyImUdn9Ae7O3
9oXO3KxDMeNST7nVbWr2dMgAEGpSUXpMnD4rp16MbJYh5rz8fVX6VhO1Rotp
s5H2tehf2pW5POntscFemPS9f6x9Oc2J0Yt6Tds+OlH9qzt9b687r83x3zmj
/PXj3B/e6/v57ZFpD7upEnU4qz9eK7nay781Knq44PtkNf/eQt3lZu2C+9tf
nTH99Hn9+2ukTw5S/nBT/+R193+8ZP7j8/p/u2z+33SdBVRjab7tuT0zPa3V
5YW7J0CMEBKCBIK7uwR3d3d3dyncXZIQV0gCBCnKq11muqd7uufesft4H8Xc
WfPuu3etvb71ncPhrFrFb+29/+Ek/GXFl19h3OR8KwPzXrqZYiRSyU3joYPG
QzvoHWvIJ5baD3Aacng1JRstVXcw0SMejiQThN3BE8mQZv/7zYEKFR5ynVHo
xhjT1gJiYYppbIC+J1HBEnnHUP09lfsydz+QUX10S/7BJw/ufnz3zsf37t96
KHdXXumhvIrcA3klDR19LR3N6emRy3Pe2nzfzsKglLMjpq4/5TFeHvBA+XnC
ob0Qsl6KGc+E9GcCDnAYANJTPhfQdcZliOh7vL0N1s4aj7J1wKRKuAwJh3Ut
HlvC47B2dwA5jlaaQLZmakScKoDHwfz6zRfFGaHjPVVt1Zk5CYGhnjZ+TniS
ryPRDAJCzd5Kx42o72Kh6WSmEmCr62+pSdT/uCTM+nSzL8UNGYhVy/WzzPQy
B0ZUHuKSYGMSRzCOsYJHWxpGmkNAow7EqPiiFCIsNAFCHkYP/YwVPQweOWh9
Yq9x207tgyDEXQ/d98LxOh0Z0fz5yZ+k4r9diH9gLn+z0v60L+WroeQrWvMV
r++Hx0W0bJ+xQKv5GK+lhIDF5OD+YMd2f7t6b5s8O0ytv22eg0m6jVG6NRQg
lIpXTzVTGo6xezpTtdcav9ZEGs517EnHV4fqeENlcHdkdhrcjsfjm4I0rG/L
EO/JNPg9uDqv/4mZ+nrT/z8uEv/2IuPqy+aXmxkxqE+S0IqPE1wW0mw3C7Ab
eShGudOn49nkPJ9q4qNWrw++W/f6ieJx3KdHLr8t7dL404b1XzZsfpgy+8OM
9d+3Qi477fsDFJKMZEJ13/XVuOWk8Imd0h1bjU8IGrcs1O+bq8oSVJUdtFV9
jVRJxrK1oKvn44ajlAYjZccTtXqjNGbzreYqnPpKiK1FhIYcq6oMy7Jk67wY
y+QQsyhfnJeNgZ2ZLgamBNW6p6X8karCewoPf/Xg3q8/+PA3j2Tvqao+HBpo
vDylby/3b812c7emBNvzp4y9Sy79jLl/yqIAF3oBXEhAe3EIEooNLOiSx7oU
cgBFJxwaoIiztyXY3ztk0sVspoTDFrNZIg5LzGUztre8HY0cLDSdCXpeDjBH
Cz0iVtPHEZ0Q5jLQUsIjz2/M9M8MNnfUFJRmxDeV5sQEu3s6YPzcsDFBduHe
5u6WOv42kBAixM7g/lxjOnmgPNxSJ9vHPNYOkeqGLQtzzva2IpkbRloYRVkZ
RlpCI8x1gUcFY9WAQnCqvii5IFNVQJSj9m1b9Y/cIbLugCX9jyPtIa35UXtT
A+cs6lcS0Xdi7jfsjc/Xeo670vhVgT9MFV0Jp/622s7MCZsMsl+M9liI9aTm
xyynhvSFuLQGOlZ4EGr97XMdTLPtkckWumlWOplW2gCh+Wyfq6eb/+d85urr
jasv5q/ejP8sqmcP+pR6fzKaYXg+FTmWauCjLmN9SybSUOar9bC/cpK+3PH5
+TTqP54nX/2+9Xg+koR8P5ugMxzlsJbrIeoKoFZYc2u9Px3L2cn2zET+ZjDs
oXQA/xPZ69UsjlYlu1d466JL+7MR5OdDqB9nbf847/N6wG0h3iAP+2GcwcfR
hnIBuvLuao+c1O7Ya9yzU5cjqis7amp46GuFINTjMfKNPtpzGYjxWKWZFBVy
hTGtwYrZ5rpcbdeVg+koMO8usu6vdByu8Ryq8emr9O0s8+kqD2gu9KvIcM+L
t08JMw/3QnrYaIJmAoco6Go/0lL/pLk+7VyyTt/s25pp3plp425OHu2vnbMo
J7TdY/ruBXcf8HPBpbw4ZF/yGeec/XM2/ZzHBDpm74vpVD5194C+L2IxADzX
/LDYh2/F2N6MCiA6WUIBNimRbiQ/or8LrjA1bHaoaXdx5MnhPp+yIuVSRfTt
vcVJIXVz6fHAcGftcFf10njnZG9taUpwRrhzRZJffVrgfEteTy6JZG2Y6W3h
DlNIc8flB9iEW0CjbeAxRESUNSzCChpsphV4DY96GF4d8BOIUQJEARdyhTwA
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
83VvXC/RqAStmopQikWpAAsKQKn7ITWCTXTCTXXjzSEZRMN8J3hNAHYwzWWp
1ne+ntCbpztZa7Le7bDW5bre5TtZ49lf5D5aGTrXmjJeG1ORYJPsq58baViV
gcoIV63LM6vOxiYEaYb7qMSHQUP8dKLCkR3t0QOD6Z09iVOzhYvrFW1dpPxi
x+IK54paj6w8YmwKrrDEbWQsfXoqf7AvuastsrMpvKs+eLw7eqqbNNEeMtMV
PNbs2VNB7K6wHGmyOWSyADlAwHxuyJEKhMCR/jeEbvznSHh4nSy8A6BDLl/M
4X7+9NkJmwWiJz8mzAVtGEIwsdVXBo060d44gYiINIdGWhiRrGAecHUrLTlb
iOpYQ+kJfeurc/EpZ1/CpFyKhaBNiVkACc7/K9bNCm4OzOpmPWbR/ylwRkyn
nbyt1lLazivayu9pkz+uN37eSXpVavciG/c0zfQw2pgajJpyNqw2VcnBqmbi
tUqJ8AZ7TLsDbjrEmZYZzCwI5JR57eVZkouxwmab4w47bq0ZpRBOKUSNRapv
5GI6/R/Gw2T6wh8cdtlwW3CSPgKYubbKIVPpSmPJ8jNZWqtFsN0qHLXR/HDQ
7mjM/nTc+XjI/rCLIGg3F3ZbiAasaU3IpXyNjTzdPy7H/ulx/PMiV24IZtsF
tuqJ6bWGlKKUUuHysUjlUKQqQMgfpRmKgYRh9KKxeqAO5djDSj2NWyKtB7Pt
qYO+Pfl6Takq880WG70uGz2ea13+Xfk2cy3Al2IHKwJX+lLmu6K7y51HGt0r
0+HV6YiuMuuheteJDr/RtoDUKMPkSNjYQNxQX1xfT/Tj8ZSFhey+3rC8XPO0
NFRhkWV2vnlKFqa4zK6tM7CrK7SjPaitObChyr0k16qh3LGlyqGz1qm33rGp
BF+VjWgoMq4pMDxgMAEwAB5AzrXJHByCsgrW/03AcIDe8iN4i5DgehLn8l6e
SqUc9glrv7eq2NXEyNcc5QTTirLFpblZhuEgYEqNd8BGWqMtNB4R9VUyAt2P
qRsXbOo5j34hZAN+jnhMEYtxITo44jBOOLRrWv51/Rdsbg6lHCYQQEtCJwPr
O6DuXT+TQNk4I899TZ/6hdr7zUjym1q35/lmzzIxJ0kYfjRm3deog6CWg5ZP
NlYstjRoccK12WP73CyXSC5bKe7ryTYb6fj1DOPFJOh0rCbQUpL+aobxaDSy
0Uc7GiYTqCXT4Cu/XWkFpjB+jyOn02ajCjGRodqfID+UrDSZrbNUDF+vQG/V
YqktlpxOO06nLbPJcr8Ou99gSmvBCvps9mqQu6Ww72bC/7aQ9kWdnzTZmhGA
WXSBd1toF8PlUo0exsIUwhAqQahrCwIIhRjrRaC1E8ygmTawQhfj6gDz5hj8
RrvHSodNS7pGe5bmSCVqog632OXaXWxRl44bq/OfbAmbbieNNgYMNfoMNXoV
xOnPtHpMNjmPN7lMtnnNdgemRWinRelPDUUOdAb3dwWO9IdNjUf1d/vmZqLi
o7XyclFxiboxyXoZucb5JWb5hWbFpZZlZTa52ZiMFHhRDqaqFN9aZ9PZQKwo
QOSkaJXm6acmyApo9Bt7OeGDngxasRBUEZBlYPM/CnQPoBtyAEhvU+yaKwFt
/8snF89Fws3HQ96Wpi4m0GAbbDgRG+9kmeCIj7YzCyWgnYw0CfqqueH+3LX5
5wLmOWdfTNs747GfH4tAFwJ3OBXyxSyqmE3+7+tbSdj7QP/17C7z5nWhI9oO
c3WOtbVyyCALqRuivdnXjMmfOMO/n8970+bzvNjiWQ7mLM34KNGEHgofc9Iu
un536qMCU60mB1PgQh2OZiM+hKkQG0q2x3YGcTRYt8Lq/Qqr3w4Hq6+koBdT
LAZjbMIM7trckyEhPmoJQ5Kb/A+GSRu1trRO1416i8l8SE+iUkesHFiH0jXG
siCjWbCxLOR0DmomDzWXi5jPg8/lG8wVGuw2YvcasPt1Zq/HAv5zLfOngahv
avxOk4lb3qhRon6ViUIm/FE8XD4crhSMUA9B64Si9YMR2mFI3TgsJJ2AyHMw
LvXEVYeYlgarU4Z9xipNyqPuN2UodxfpjjdgR+oscklquRG6/ZUeU+1hs12k
xYG40ZbAkUaPiTqnsSrrxw32400OSwP+aRGqKeFqA61ubbW2nQ0OXU1Ofe0u
LbVWmUnaCST53Ez95DSN1BzdgnJUfhkyPdcgrwhRXGaalW0UG6eemQkpLjZu
aLBsabIqyIMkxMulJCtExt7mUcEP7gDAA8gBhACQQMEGK/Ci/1EiNg8INFiQ
XzevBAJ+wB3OhcLPL68Rei0WFidEmumqOBsbRDhY+OMREUSsB9rAQlPBDW1U
nkBiLk3//ObZCWPv6QEXOImQRj7mcc5EwgMWg03ZPWCSD5m7gIf/Z2WQRUwK
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
SSsuQy8hC5JZggiOkguKlA+LUY1O0o1NgUQnQqLjobFJ0KAgBfLqGsAGMAMI
ARuADXuPDDb/JAcc/lPAVehkxj6FQdvbp+2SGTu7ABjutTb5e9tA3L09LoXM
pe4Dj6LtUilbe7SNHerqOnl5lbKyRl+7Fm11hbI0z1gD5CwzVmZ3pkc2JgY2
JvrWx3qWBltH63IeN+dMNGR0l0U3ZvpVpLhUJtuWp1iXJ+HbSp0acqzayohj
Le7jHR7TXZ6DtYS5FqvVTuvuMqPGAt2eRsREJ3qx22ihXumPNNdvpo2/7TP4
ZQj3S7/j59VEaQ7xLNP+WTLhLB6/G4zssVcrMZfPN1cssVKvstJss9bpt9Yd
sdEHFPU5ItucjUvtYNcIQVTgDz82lr8Dk71l+PAjrJq8iaosTlPRFqHniDZw
wyO9rIw9LVFuFghnMwMnUwOCnnqwJao13W+1M3GrO2qnL2KlJaArg5Bgo+IH
/SgEeotaHjEbjvmsI+yvE6R/7/D+udT1i1Sbg3D0ug+030mr3EIp3VguHikX
YSAL4oxkpAgGtHCYfISx4vXfOzNTTzFWzzBWTYLfSUK/l2v3fk3gnalSQ8m8
r2Q5iDnpvTPkttrnOt3q0FeF767E9dQ4JYTg9VXeR0JvJ8fbpCbjk1NQQeFK
dm7vuPq96xn0XmjMvYiY+/5BHwWH3U1O1krPgHoGPPAOU3D2uevseyc4Rik0
XikiXjE9HxoaDdJNLjpRLTkTkpQBjU7QiYhUD4tQ9w+U21tZBcAA/ZMcMOb/
o8YAZnb3mNec7ILWzdp+uyHTbvjZ39lhgNjaWmNvr3K2Vhlri8x1EEar/N0t
QBR9c31nYWF9enppdGRucGC6r3emv2dpZHBtYnhjcnh9cnBxsH1luH2hr2Gi
qWSoOnuwKqu/NK2zIKa/OLorP3SglDTVkDRSFdmU4dKQbt9T4l6VYjbZ6j9Q
49BTaTXe4jBYb9VZblKTqdmYq7o8YNVZCS3JlK/MU+6r198Zw640q/3MdP9i
BvV5P/RPjy3+Pu3xfbfri0qnFyVOz9MtLlPMmCTUiIt6lbl8MV6+1Fy1zFy5
maDRZa3VR9QasNPrdYR2uMAqidA0cx0n3QfQOzKw++8iH32IU7nvYKhho6dM
0FHEKN/Bqd0m6D1wRMh7mKp44VQ8scruGEUXpGKSO6avwH+01Lcvz265JWis
xJWEv+MP+8hd451o2G1ONWnIS/e8yuU/RsP+PhD0xyqPzzJthSTTDR+jIQed
GrxStrF8EkKRBHkUbiAPKHoL0vWH28SZqqRg1TMwmiVW0HjDW7GIdys9ZQvc
PqyLeHg463e8FibdihYuR2wNuk82EUbrzYdrzXoqrLsqAl0tVJVuy4R464X5
aUeGaoLosbd/x8np3zw8342OVkhKUg8LfuDvcysiVCEmWj27wCQtFxkcqeIb
+iA8TimAdM8v9HZSpkZknGx0vGJSmmZmrkFqBiQiSs3H54Gb2yf+/rKU9Q02
SC46A6y0rW369g4g5zrUQNUhXzeZ/bUN4CHASThbu3wKhUMlU3c29tYXyWvz
1LUF6srM9tTwynDnXG/z+kjn1mjX+kAL0M5Q+0pX/UhNUVdZ/mR7w0hjVUtR
Rndl7lhLWW9NVmN+dFtR1ERT1lhNYluGb0em73hJ+FxV7HJDwkpj4mJd3Gx1
9GRF2GC+b0eaU0eG00ChW3+xy0Cp/WKXb1ex6XCt+cawR0OednWuSmGObE2N
dnWVbmr8vdpi3ZVRx6lm5EC+7OtN51dzFq9G0WctUGGR5kkp8lW9w5sax5e5
Js+zTUTJJptBRgN2WrVYxXITxXKsYoONar2NQoeTWq+rVpejRpeTbrO1diZa
zsvgfa33ZCC3ZCKsISVhTrm+diku5mBQjrLUjSPqZLjpFfrqlwbp1UQYVITo
pjnLJjrJB2A/SnFTnaryW24OHy3y9IW9bykr46p6/ZkhDp/ITEeij2vdl0NV
fhkL/Nto8Ld1Hq8LnA8TLLf9URMOkBYzzQK4cjJUPgoiHwFVDDe4VpSBXDxM
MR2lkoPRyDfTAy6UipHPs1EpclEp9JSvDFdtT9OTrMedbCUKliOZM8HchQja
ZOBaj9tip8faUGRLATHU8YEz7jeZJOhQs29dvqWn7Uc+Dp94OdzKSUQWpGOi
gtRJweoxETpJCQalZebxCdpe3rdIUQp5hYYJyYpRsQ9LK40yczUysjXLq0xq
682TU3S9vO+6ud7y9LgTSVLfXlqmbW9yQGztU8DKo153Hsb2Fm39uhgzNrdB
9JAXlvcWFvaX15gb65TV+a3FxytTQ7MjXZO9LYPNFe2lmXXZsQVRfrVppO78
xMGSlKnqnMXmwtnanMHCpKHynMmmisHqvLaCpIHqrMnWgtHGzL6q+IHKqMcN
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
zBiwcwbstAKxasAuqlFLWuTpNupOB+Wsg/7+gvLcIHXdgZkwleoZERKC/6AV
ujaKHrcVL3SUG8lgMz14ubP67ARxfbBhuq2iV5c91Fyg54Xz8EdZuIMC+iG9
zLtFF6CWeYjFnky2C422Xyb1MBsCeMw3VYJDBqGLgXuolX/URHurW+TSKzzU
J9x/qiPo+Q3E3mPsfz+t2/u4du+jur13K3/fhf65Xb53DvvfNeyH1uzTDMga
AbKAhgzXBJjTD1DAIDQYJC14+/Yw4ver/OfnUX/cROy9j9y7g/rv9cbvN2Df
riC/mmt4doK6947621naliysHQ56PBf+n4uVD0Zjr7ZH3nHm3R+sBvi50gz7
oJdw30m/ZEHc6SJ+6KSeN1RdN1dfVxZ9bIB9oq+9zso/AYP0Z3vbk90Mia6q
ZDdFupcg2V2Y4qHNC7AUhXaURw+jc2yorFZsbhclr78pd0KUuaDO2DBn7tjS
N8wxVx3pn8yUfr0G//E0bu9d/i9nKWvWWIswkEVx5dC96GQPAsEVRziGwR3j
CsNY3FAKwxeNP0amekokELkUIuaHaCQReklIsyrcqgxT8nzETDcp10stBWsU
AWKhj1Ybxhf6EigHSXQXDOUwArcPR3WjMYNa2VVOBXrCQBnVEp2yxl4JyilG
9UsahuSYURV+XE2Y1JJmTfRlG3e1jb/Syl4xkVcMhEUdfl6DXjVTznRxrwwq
rowo1lqoCwbcpAIxJodPqVHzRtxyM3m1lbKob1w1YU7oG9Ys6DNd1N1O0ulO
4oUh5qodeaoXu9yFaJekKKkhner0yc7KQWtetyKuhRvkkMfNtBcvdlfNd1dN
2Uv69Fmzjqo+c6ZFEiZhuglph4wK3zZTiF7lJ5f6GQwQ4B0R8F0kQhcW/TUe
7XWd2L1V4W8V+1p4Hh1SbwNjn57+9/c2y397RP/jIea3T2r++Kj6z/vlP98s
+OlC7t6N2r0HTXuPjd9M1J4VxWyx4k7RExYIUdPosBFE4AghcoQW8dksbu++
Zu8D5p/XUT+9U/nbRcTedfpn09WPpxvv9cG/nqXvndNfMRd11f7zRmfIz7tF
ezdxT1cqH05UPF9nfD5JmuckWUqPybL2zXJSbzkaL7dX75hzd61ZdwdqtqSp
O6LU07zUDVrSFDzInnVQEf0PPuRvgvjXuImvUWNeoce9Ks7cp8k93F7pM0VL
HGIk9bOTjsvS18xZW63JW62RF7sh743H/t9O8c+Xqp7vFj+cT/lyDfrXdcL3
p+vP9qV26aJEHH8hN4jF9EVjj8Dgb9QgDwjl0US6D5rohkQfptK95fJohSxS
Kgwzq+PMigibJhqQXhIsZXkJmzzEHG+pwE+tCDPoo3l8cCN2Pxp3gEA9Rma4
Mzn+eII3UF0mdLg5K3Xe8lJLLYwVO2vVzpo1kpYBY7E1LVvp63b2mV4JoFNt
nAUtZsVEWDYSAISW9LhTLTRAJwz4cRl8RFwzLIJNKZHLFtJ2N+dsr+Bcn+CC
k3u+j3XByb4+JnxvSnJ1lH3GQdruwW334naGiJsDmImWMrs0qVWW5DDnDNvy
jbzA0Za0pb7SYUt6qyS6S50yYM7p0aXPOMonu4uGbFnAC6LguBllPlaVn5Rz
pNueNDtZqVH4qqTuEsEhCe+AhH2g0xwx0p46aEtxGGM71CHNYnenOeDfTzU/
f87++RHx14cNf36G/M9jxL8/hf3nAWzvEX7va/HeDdqd7uwtUdR5RdZZSdY6
M3GLk3penr8hyW2vdZ9u8r87CP3lLGbvg6a9u+y9T5QvtqgO1BFT8b4VQfqO
uqAf7ddRdxho0V8vl3+/Wfl8C/58E/3LGebzU+wtXY4s5zVqJKi11vveMOnj
aepZe8kHE4gHs6gz9pyT+mxt2SF8CEiR8cY8M3lHUTpDT22H+Uuz94nz9vOy
XxPkvqYpPdRa4z5BjjhnLLrmhF8Zgr0/Xf/ZWsMnJ8rfm0y9N534r42shycS
n78D/fNW7U+Xq/64hf79XeK9ubxTPQk9pnipKEQsDKXRvRqwh+sxBxuIriJt
PF0YQmD4NAAuRPcSS8KBC8C1Fn2SSQaxKqMB6aThUg6YT/cUNHnL+AFaeaRM
HMqgeWGwh7G4I2SaB4cXJFPE8gUxkzrMhBY9pm4YU6KmtJh5MwnQjBY7byAA
wQRo0UD8/2nFOgV0YxNhTFo7q0PN6dDTatSstnHJhJ/XY4AP5zWNC1rAl4g7
HazLA1LAly46xTvdnK1O2nobfquLfH6QfWmQda6ftttL3urGnh0kr3WjFtpg
U7aXOaXnRprEMUNtBVOO/Fln3og9rV0d2SqD2OTRrbIYqySq35o9bM8eacu2
q8OV7KManqtWcIxPfr23JX5xotQg91ILD0vYrysF+3WSo2PdSaMdaX3WJLsa
0ioPMUs8+5qD/nqu//mJ8I+veL99Sf/1Mf63L9F/fYna+xdm7xvG3neyR6sV
26aYFVHUFXPx7WbYJQX0vCjnHUnuOjdrlh431xQ+gD08z3N/NF32xzvMvRuq
EVLgFC22tcLHUuLR1xC4LgeaM/a7TeIv58n/ucH84yrzr2u8F2dZG/okBfR/
eJkgZfEbd0bwP5833hhAXeqrveysnRDF9HMjpfV+lPwjqPi/N0S9goG8wkh6
y1ofsaAo32hBnnXgdx2YDXvdZkvllrn0UhvsownCuyPVNycrPlqu/2ob/dla
zXuT2e9PZTxeL310svDLrbI/3iP/cov03WXcnaXiaaP/ZEtkqzYasBcOJxDV
eLCu4SCR6Ytn+TPEEXRROJUfBFBEYfkKJWEiQYiIH2hUxgDFW8wCA6eCHyxh
BXJpPsKmAKUwQimCMCheRKwrhegJiEb2FvLCVOpksTRpXIUcltc6hVWDoiog
gBbNeCCDJhX183rsggEQblGHAUzmpJUM7KllI35O37BgRC+aMEtm7Gozeauj
abuTtdnO3O1kn+3mXnSKrg3Lrw0rzvXwgfuzKtSMHj6urJw3IU61407aG7e7
CVfGWdeOc84OU1c6EZPmEsCFhixQAy9Kx4cMdxZuLyHHezNaNaHthqgeY6Ka
7SelebVr4vss6QMtGcP2rC5DtEHgaRJ7tCr9gLNLGzbRmWKVupkkR0zSty3y
Q86W4OWxvIGWhFZluI7n36oM1Qs99OJD929g9n637D3X//FE/OwR6emHiKcP
an58hPr3E/ret+Lf7/Jvj1esa9JOq/Iv6cpu6itvacsuSgqu6equGeuuW8oX
WSEjOJdpps8MM3BFmDhFTR7FJ1tKg87o4T9saX/ckey9K/vzBvvXK4w/b7Je
XKK+uET/4mTDCNdDAgW1Yw9/doLy/Jziux3FRQdy1Vg6oyx0MJKGZcW8hnh4
HhgK2Q8NfgPq//ccd1C2GwjqCyoOAtEKPJSNEB0OYifHOhmJk7z0FW3uoi5u
rSXufH/urcnyW2Pll50F1waL7k7XfLiIOmVL3e7OnjFGt3Pc9dS31cS3xm0p
Vk0sgAed7lNT/yYCc4QpDiOwAxro3kiyB4kbROEF0rn+IkmEVBwu4PqLuQEy
XoiA7gdIyQ+X88M4FL8moq+AESzjR9LwXhS8F7D96SQwkwIWcSOFglgYwn1C
WT+pAtoLEmBj3UY708vZ7eFu2qknDLh5LWpO3bCkA8oMYdWEWzMTTzWTVpoJ
i2bskgXggbLZydjqYu68zCz+lp1xur1pt5MD6LS9ad1CWdQAcwxxohk9Z0Ge
dtIuj/O2HcQz/dT3FiR3V+TbTsKmEzvTUjFoKHDoswGElKywTlPaqCPb2ZbQ
qguz6SFAIovpHkKKR5cxpeelkoZtmQPNSXZFYKvct1sf0qMLHLHGTrbGDJuD
hlv8x9rAPTrXxYH4UxP5vcbITm20URDYpgo3Sjw0ggMzo9G/fa/Y+6V973vz
j485X9xFfnq74ot7sOefkf78Wrj3Q9uLm/K7k/gzxvJNUd4leeltbeVlSfEF
SdUpVsFZacE1c9lHffV3OqoWWPGT5MRZRsEUGdpaEeXEJN4ZIvx6SQrA8/RM
/e+36C+uEn+5Qdm7x/33+8wfLuOf7qKf7hK/P8f+dJlyYwjnoCZoa8KmJIgJ
YaO0LqcyN7YoN7EsO74qM74sJiTL72iS+1vJbv+McQHVpXoRoUGw+LdLQ14p
DwJVgkHV/iBKJohXAtIg9lnRrtZGLyvSr6UxrA0XpYb5N8S9IoF5C2rc8fmv
MWsPCtFuvaYsvTKWRvMGKnR1/T4UwY3CD4ETPSowLqWItwE7AhDC0zyYLDCA
GY/tx6J6STjBTSRPNsVbLYrWSuJ5tEAy2pOK9ebRQ5pI/lxaMIscQMX6itkQ
tTiJRg0urDzcwcjr5RYPiSrG5TVAQp2w4E4YMbNqxLIJO62ET0lrFjSoE3r0
y1PbuG4lAqQByE1rkSstxNVW0pyhEUg0INcAwwGybFGHBQoS0LdPmslbrQwg
1Kb0dcdN8DODzMuTghUbas5Us97ReLIDtdBSCyA03VzeKkgwcCNFFH8WxkPC
9FOJfDtbopo1IXKuh14SaJKHqbmBemGoSRRiEgV36eKcloRWmb+B72oSuluE
rg5FQLvQrVft2ad1dRqOqumgXoNXl8bXLvMfbE6ySkLNIn8AoWbVMbP6wK2L
tc8eKZ59KvviLu3OpYoL26kXtpNvXyj6+Dri54/l//2k+d+37Z/NcM6pyneF
+Rd4uRvk5A1G0Ra79LSg4B059KcV4d5HI7+e1L1rJ00S8o/TyiYpJcoCT03p
QQfl6AB734X+qPsLBbemsz7fqv58u+L92cyn5+p+u0W6N190ebBgUZtgQfkA
3/UYr6a1sQge7IVKia0vL83KyoiFhMUFBqQFh2QFB2aCvZO9jiR7H8BCY6nl
8eWxLkXBr9VG7yckHCUlv8nM/18J7FU9ysWA8jTU+RvrwnU1UerqaFa2fyn4
FX5FGLsiEJG5j17rxQaexY2ScMPg8Lcqq18rr3m9HnsUMJ/C2reg8H3F8P2A
HRGa/OsaD2BwLhwWmNPkwyC545EH6ytex8IPyrjhBnmKmBVBw/kBzAAnlxYq
4UTT8WACykMjSbZqc/BYcA3a7/8ByVPqEQ==
       "], {{0, 160.}, {193., 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{193., 160.},
     PlotRange->{{0, 193.}, {0, 160.}}], "\[Rule]", "\<\"n01440764\"\>"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
v9Hq1EFuZ29zd39r72D34Gh/d39ntLV57dq1crlqtdrn5hR+U5NzM9MLC/PL
83PKUOgVow1bXFilr2hcsZOiYmCp5jjWXA5HwOeL0kKj17seCiVAMZUqgWI+
X681R63ePtHj3tHtk2sPrt16cv32U+z0xqM7918RSV69/rC/eVJtbhWrA2Kh
BKF0c0TyC7rbe2fSckhK0uruVOoDgIRPQBIlxNsCHi0SR4u3BTwSXjRQkhHy
go1klYdwwUgonxc0Cmx0VyvOd1wSBb+PD5ltQGW2uxRmdhem2HN5pf9zc/mC
nCA/YnV5pcTnCa6vOnwmu3fVETC7QiZnyGgPrDiCFncYf80bVSg0EomC3x/T
HavUWPQ8F5zkUFvoovroG8ljtZarNbKYpB56+PfJO6ek8JLNJYMhr92hKn6o
H3IHZqJ+GFonqsjI/OICcBL7oX7laqlSzslqFqn+afMaH5VQRE9m3MQL83og
rdmrY61+o4Nj3Ox2Rx06/a3BcGfUGUJntVSrtvu9nYP9q2envV4vHo2tmcyG
xWVsbmZ+FvzmDDJvblgwrRjM2NL8iuobLTC5MG80LK0uGyDTIjObNqubVjoO
u1dWHfh9kWAgHgwmA4EUFg7DZK1WG21uXj04uHV4ePv27Wf37r06OTnvdPZI
AIvFLtYd7MPb8eld7PDk9tHVO6fX71+/9ej8wcs7957TYWRr97TT35MpMCSO
nBR9I+NABkl1u/1DAiopwvAQ7BEK8ijqp3ntIOzpJRfBDORkUPCTcRFGDTyn
1anaNbViyU7H5gJFhxiHcoKYNxiyu5FHl9Pr84RCvnA0uJEkPrN6AyaH22B1
LdtoPdiaO+IOJVL5ajJTDEeTvIAlo1mbqN3QIz1hj0PJODR/qtQPAgntPsNP
as7ifGXVAacR9WEy5+t2q5KLrDcgxgM8KUH7An6Z8gBLmYnz+n3EfrVGFc5F
32SSVxdAjAiQHETWWQmfqqynJpHqbQ2/nppI7+JqwW9nb7s96IC02W4zrZoD
kfVOt3/19FooFEGCZ6fn0FyjYWV+fnFman52ZnFlec2wZDIuKcZoFXIafoBH
pk7HtIJZlw2riwsr83MGaKSvMWlm3LxmFxp93nW/Nx70J8LB1Ho4E41k49E8
logXa5X+5vDoYO/62dXz2zcf37z+8OrxnRsky7B3fPvg+Nbe3jVIo38TH312
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
XC5bRiFrtUGtNmo0tjqdveHweGeH+BCXfWdv78b+/k0pSNJyuKNtlNs5uLV9
eHf3+O7+1Xt7p/d2r55vn9zeOr5VH+w3+vuNznattVmu9fOlNk+ezhSD/lA+
W2jUmslkmmQqk8nV6s1MNu8NRkh7JX2jVanc4ooUCvR4mL5aQKUWDGRF5YRA
KSZjSJzknpKNaiqkkl/UCecIftoMCEFgCvVTYtgsw6fEfqrqQpqn8W+zO0k9
rkxMLS4t43y5gDL9AXVcSQQQdUym43uHW+Anaa+WZdf57cAGaYyIx5doUAjE
1+Nzt7ZG79+/PT8/x+d2Ud52u15XezfK5arfF8adedxBLhyXiQ5BCM4C3kT3
eFugjhFpLVanRIaCpcqRNdjEBcvHlhES2M/wExORlFBQVzPhVvfI4/5XQ+7S
xMTlqakJbFL7xyA0/rf/9lu5QBcvXna7/Ldv3fvLn/+OPXr4vNXs81GanVnS
Cvl2TRhV9AiK/IFIpd3mAUW/L4L5fHG/PxkKZWKxYipVy+fbxWK3VOpBo1iv
dzAYHG1uIpXXdvZubO5e36Ldv4mN9m7098462yetzSPNDnpk1lpy3evtILOd
9rCYKZwcHBL9WNasfn8wEolyrd3+gMFkNq5ZtW1HZgjEoRBgQKAekEglQSZt
pfo3voIFoZOMWAjEJANVod2wjRypkTZJR7HRyhbLcdhDAOGB1Hg0GuzsbLnd
bvALhqKkP26PDwEkAhTnK+v9tOWmRtjDjzndjlRmQ03XttTCPJ4c6eO30AIh
KMqeYu0FqBWkEgFyMr/rxx9/fP/+/Wi01W5398k2Do5arU44FLPb3LBnWiHD
dtEntiesEq2DK90pCGYYnxTcB68WCDnURNuF88XIUsUQQzHBT1ztOHXjWfD4
J13/vOt+GZFD6BR1U5eAEJucvDIzMyVpCRASIV26dIXzoT0ajRNIkMWj5/FY
Cn+Hd56ZXpicmJ24MoOpiuXskuavVQCpFcMtK0aL3R7UaiY+my3gcIRcLgVk
OJx2u9dpk8lyJlNLpSpYodBCJzu9g97gCC882D0b7l2j7e2edneOq73txnCn
0d2sNvqt1mg42Bn1d/qtQWEj1SlX0Fmn1TY/O2c0GlVYZTEbTKsE2ksrUsJa
5ZOyOGdcmDNIdCHvHn2J+sTzireVvFKW9mEiRLJcE8PzIoCIoYoSK0niPVne
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
XyK+kUgk0skUbTwai0Qi2XRG27vSarfbMJXNZjkTorj0uUI+thEPr0fiiY1I
dJ1OJpfdPzwYjIagXG82Gq2mw+WMrMeCoQhcQaDkuRLpyX432JOJDxlE/Yji
jk6O7z04Pzk97A14nlqjVW93W+QjPG2xXCpXKzu7+9eu39w/OCLjIFNej8Z9
/jCiJ+mtlJdlulZf1axvLJIRfaZMryELgbzzUmqW4pheT9Zncj+r7322rEWm
PJQ2fqo5SwQo1Ik7Fj+r654Ons7eOH56pUWPDMV+zfn+HD9BS8dPF0ld/WSx
gVr9MjH1+99fYJy/EbSi6wnYM1uci8uWhWXbwrJjxmC7NLNitgem5kxWh//2
nQd37zyIhOOwp9eZpbwgcaDE2xII6QkIEMqSe20+0cDP4ojrtXat3m42uq12
v9Me0NKvNzrXzm5du3777PTm4dHpzvZBf7DV7232+ptHx2fY9s7B1vb+/sHJ
zu4hnaunN87vPbpx8+7NW+c3b905PbuJlGmTEX6ETvCT2G8cPwJCnDJBIC0+
lB989vzlh2+/efPu7bMXz1++fvX1h29/+PGP3//whw/ffPenP//zt9/94fsf
/vSnP//96w8/XL9xt97oxjcyOn6yjlTfSTS+d0MvwiuPoIGnLxjQk1a9iiI6
Jjt59U2+n21tG99cqa+oFyalzAJsuvoJfnr5RdgT/KTI9pnb1Ysz42mIbuMO
d9wR6xyO4yelZin06cQyDnt09HXU0Pib3/wTf3gstpHPldcjGxarC/Zwuytm
z7LFt2ByzRkdv59Y8gSSN+48uffwRSZbWjasGZdVKQ/GZMuMfPDF4Qp7jMus
k7qh4rxhYnJWrcReMErtBfW7eeveTWA+f3Tn3uN795/Qnt97TPvo8YsH2MNn
d+8/YeT8wdPHT14+e/7m+Yu3r15/SefFy3fv3n8j/fdffvvy1Xs6r9989e79
hydPXyWS2WBIZQTwhuclv4Ax/K9M/krJZXpmDqM/MztP4Pf8xSswe/joyb37
D7Gnz168//Kb777/I9R99fV3f/zpb/cfPN3bOz05uXV2drfZHPp8UbPZzedU
nK++PF7kTsdPik6Cn/qQji2aGt+wpq8W0D2vOGIhU19joC9l+fkmDqn7gRyk
oXtjd9Ca06d39ckOYU+P+n5e6JMf1BOT/y/4/Zw9wU/O0Uc+Zrhjmon0QSA5
V7fbTyVzXk9w2WjGzy6bnCaL12D2Lqy4F1Y9X0wv37z/8t/+1/8jmalOzS57
veuTU/P6bkFxMeP3KmFEJj31wsvk1JxUm7X7Nal1mDduP755Dm/P7zx4Rnv7
vrpL5/mjF/cevrr3+OWjp+8ev3j39MVXT199+ezl13QePH7z7NmXT568e/78
/bt3P7x8+RX9N2++wRh5/frD23cfHj58uR5NAobN7tEu/TK2rN3RXlc/SXsB
Dxkk/CMXfvnqDUL3hz/+BeTQtw/f/IjWQd1PP/2L2PHx7Y2NYqHQ2tk5rdeH
gYC6m7rHG0L9BDMJenUCf9H5frZr4zMXrC+e13e3jecp+iYFfaOWbrokgpzk
vMtLRkxEj1ZPaXVvK+CNO9ZxJfwMv/+p8/1sjkMv9ElOIQ+NT8PheeVQOqT2
+XxxNNoKBaM2q8tgsCwYzEtG+6LROWtwzCzZpw32oxuP/vi3/3F0/QFeeMGg
btpPLoyPlo0JnxVYRAGkBCFJn8r75pak7mdes8t64Bt3nt28//zug9e3H768
fe+l9O8+fn3v0dvzJ28ePv3y4Ysvn7z48OD5+/uP350/fPPsxTcvX39P++L1
N++/+tPrd98/f/ntlx9+evfVH56/+sDgq7ffAHAgnJA7MGiCrKI+eJNlBmrJ
nzbrQWdufhEUkUSny4PcIXQ//PGv3/345w/f/emrb/745Yc/0H7zPSP/jA1G
J6tmv8sTr9Y3N5JV05pffdWFwyurC8ZN1pGOzwH9QxW1BFa/8w+mT2TI1Nt4
2VnwkyxYn+HVd51/ts5ZxFNKzYKfqJ9I2Wf5ha54v8jez2ffdPu11OPnScc4
fnqhT8fviy8uIowcku3yF2WzeUL2dDr7cU/Win3ZZAe/mQUL7CF9pdbuv/6P
/+vWwzd4YYdn3e6OXJqYd7gDq2sfo53x/Fd8sRQfpOag7pajkUnmC3vqq980
/JDT2w9f63dov/XgFR35Aos7j95gPPTwxddPXn/77O332PPX3798+yNAPn35
zZsv//jy7Q8v3nz/9Xd/+/q7v7x+/8O7r//45Td/evj0XXA94/R9xE9SDH2a
Q6aAp6Zn6UxOzdDK3Q/unt9/++7rN++/A+Zvf/ibIEfn+z/8/cef/vWPf/pf
NrfP1iwBjy8h99A2mrx2V3jN7NCXieoL+cR0jzz+VozjJ7zpe3glvxDMJO3F
RAkl/5VxSUAkT9E3nkusKGVn3fmCop6JXLpwWXyuXt/Ta4DjbvcX54XHsfy1
wstn9Ra9yPxr+NHhIyPFFpvN0esNarUGSGhmW1tzWSwenO/sonVx1W1xr/9v
//v//ezND5FkeWJ+zWByrll98GmxexBAWWYgZVVV2DdZ9JD7431yNF8sKxNk
zTkCK5Nup3cfX7//7PbjV3efvrnz5DUdjA7GyPmzt/dfvH/w8suHr77S7MPT
198/f/vjqy9/evP1n99++Avtq6/++PLLP3z5/d+ev/sBPr/707/duPcsGM+Z
7H4tbTdKvCfZhz7PC4EyIhMiXl/gzt17X36lhPTLb/6i8azsw/f//N0f/vWH
n/6Nttndwxekck06fACtTvW9FVab++cLmGWJhd4X/ET9ZGWLPp0h+AlsuhKO
3xuNfyaTiXZtjUehlERjFuYWfuXfuBL+h70bWsVDgjRBVzaAyAYNbXva7Gem
bx3CadGZvDIha+yvXMKFT6gNmmoxMqJ6WfZ9/JJNyRaPC19coZWl1JMTalsH
6Sf223+6QD+dyrdb/WQiG/BHcvlKvd6vVruNxsBq9U7OGLf3zn76y7/j2kLr
manZFXXrdYdfbjW8ZEBYPq5s0YM9Pc/9eIswLTcR9gj/xqWAnwKVmw9fKM8L
dY8Ue/RvPXr5+NXXj15/Tfv4zYenb7558vYbadV3W7z+5smr7568/Q4Un75T
kkj79Y9/f/XhD28+/OmHv/07z+mPZ1cdgTmjZdG4qrOH0EnyK8v/pBZNH19M
5vv4ybMf//Dn91//8f2HP3/5zV+B8P2HvwiK3/74L9/88PdKY2gwudP5RqHS
teJ23RGzzWta/bhRV1/jJ75AN/12Lh9LT5r0QZq+gQgIXS6Pjp++fePTdnL1
T2rQiKMG2KJ0fvHfZ9HgeN1Dd5T6Ynu1AE9jTzAbN30DkfoC3FmSF3XmxGX0
E3W7Ms6YPviLBm+XL01dvDAhswzSv3Rx8je/+d3vf3eJJDS6nigVa4mNTDyW
qtfasFer9Wjv3n3y4sWXDx68ePLkzdHRjVgsq27+v2Knhb2lJfPystUok3Gf
Ztkk8tHLL+N3DBMXPDO7KLKg3+WJ/OLOoxfkHbcfPifjuPv4pYw8f/P10zdf
P3v91ZPXX0mrjXyDe3399R9wu6+++vHtVz+9+aC87Zff/+Wrb//8+usf3n/4
6fs//8vZrfue8IbZ4VsyWQwmpXj6ej9dAKUWLS1BIJnvo8dPyTu+/vanD9/9
5Zvv/pn2qw9/+eqbP3397Z8l/CtW2gR78kXbfAA9/uiqRX15oiztEwLlT9NT
D1ntLN6BcTUxp2ka7BFsSxpitztDoQgQ6vjp7GmsckjIZwQ/Rhe1f/85fj/f
Zj5e+NVHPkKoNud+jh+HIm6ym1LbtDsngwLVZ/gJgb9sl9XqKagDP9ovfn8Z
o4MSkniie8PBdqXcAEJy3majG41m3O5wMLhxeHidFPL4+Gax2AS2y5fnVled
6KF8OximCDSaZ2ZVsCdLK2Vv4HjlWS/46zQKfoIoZ957qNi7dVflv3fvP4PA
+48UgU9fvH/y8v2T5yrzpaX/7OWXcPj81VfSQuOL11+/fPfN63ffvnr/rdZ+
ePfVDx9++Ong+IbTF0Ka1K37Vfpp1qVPkl8RPVG/+YUl8Iusx8h8//q3fyXv
+P4PxHt/+/YHhSKphwbkn7778a/FSjMcTVfqnWBE3ZjaF4yrr6hY+Q87x+Wv
E5NDKbxwGiPqzq5auqF7XgCj4/H4hEbBT+RREmSzGURN4n/BTwNsfvHTv/8I
nvqnu13ZRjQueuJz9bsP8ag2R/wPDysqJ/jpGyd1v6xv6f25k/1P8EPrMHiD
QzqwB4eIns8bArlGvQNygJfLltDAoPZV14uLvDse5M7lCs3MLHMoX0Ln98cY
Z0Tu8L+wgP9alWBPXI+81bLmShIQ/b5heml6vBbBaef3Ht+6+/DW7fs3bt+/
e/7o/MHTR49fPNRKfE+ev6F9+uLti5fvnr96/+r1ly/ffPX8xdtnL9+9fvPV
63cf3r2HvQ9v3n79UpX7yETUyLuvv93ZPbK7fTa7R7u536o+5aFPfAh+Bu3b
zVE/0t50Jvf1h2//9b//+1//5d/++vd//8s//9uf/vqvP/70NxJhjM7bL78t
VOqpbKlYbTg9QXVLf2/IuGbVV9Tri+plVbPYeAIie3h10ZPMQvfFaKCsXZH5
NVl8pcFpEfAkCCTq0xhb+IzA+U//JPATtztei9Pxk5BPx0/QEvbG8RO507VR
Z0/ivc/sFwfFBD8RQOFwaXGF9NZh9zgdXgjE5xLy4Xw34mnS0isTsxOTc3A1
O2e4fIXE0B6Lp/OFajAUC4XVd7XPzS+T7q2YrJzAoTgdWesr4ZwstdKLgboS
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
UjZmzsYcZrnRJLY7ZOFgYGy4fcfm7JaNkPL27cUNm0qrN2aGJoqVrrAnbNSw
BDm2YauQt4qELVw9CqsNQGwiU6iEEmWL0I6AVqxzyF0Wmdek8xtMfoXRJTM7
gZ8nmde7Ap54NtPem6uPprvG4/UJX8eYqzLkr4zZkz2x9vFE+2iiMizTuaUa
m9Zgl8nAm83rDtitLoYfd/ykkH8p9RQC9iAwo2AMzhvUFFN3nGElGgk8eog1
lSCV2sEe7DXAA42l7r4q7td7Kl297VjQfVY0V8FPiOfao+1d+c7eGj5fNpdX
b3JaHUGXJxEI5ZyeKP5Um9OXK5VL1VooFoUfAiuMiJj2ZyAU6s41qz8Z4ZJr
x2l4Iz5RWqMJBFJAAbT4hqWEXCN+fJkb+WOEH6RR3RF4JNA2wI8cP0oqwBeQ
0eQ3k3nfjxAir48QJZt7CnVf5rCxtcsXky7xlkH7tXFp8OJWKTjEVdjMAhBW
Sry4RcjO3CRfb26Z19I6Typ29HXXdm2t7N5R2L6ltnt3x/adpXUbgz39qfaa
2x9QgV+dBu6YRCGHGmZnys1C+cI2a5vatlhhPU3iPU3unSeNNhlTSp9P6nKr
XDadW622Iux1BBOeaM7gDAUS5UJ1uNy9pNAzle2dTvbORLuXBstjjlRvojaZ
aB+JlfrFaptYbpIpDVIp7I2VEkuokh3vmoTbpaENQNpSA3tQdI34keAOhPlv
MMSFGBZEY7GShvuHwBYQVmoFjsMCwKt2lsBhZ3c7rh1dFa5WrszKQzrT7V3Z
roFaV38n8LO7YXY9oA7sBcN5hzsC/ExWFwLpeDoTiETh41icHn4jmo+F5yol
v7zFx0aTGExgj/Cbm5XJ9cqg6ID1meHAI+OLBcHGI0r7J6cg1yi0uUebz3Ty
i28kzda4n8wbYl7R8T2fSfudkgbDbw9+ucuBmG/sDK9PxOVBtTYLBS0SEUtF
luEOHEUaucVy+EXSBULxPIhMYqhVOs/cXt+3p7RzW3XXrtq2Henlq0y5oiuR
0NktYo0S+GkMsAUqhViuEco1TVLN19u8C1WOeYJyi32Dr77e1r4zMjBgiKal
lrjCHtQ6oW9NJk84Xoqma2ZnPJKql2qT5frSXOeSbH1Jsr40Uhv3F0dc6Z5k
50S8Mhwv9AE/odQgkmqkEpVWY6LsJqppAoGId2j/lg584VARYIAQCyg3FrFy
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
0WK3O8EePByoRLHKNG+RqH9qzYvv/OyZ4z968PCbDx55+7FX3rv96VfvO/zO
6x/8/tFj7247eGXv0rWrtuwZGp8eGhoZG+yb7Ovcunx82/RgeyZan5jeeMl3
dn/37ukLrhk4+4q+sy+PzWxvCubmKYwid6B/5dpl27Z5UmklNEwwrrGyvSmr
zeWweyCEH5w9u9VlMlhZRZIZjp/TpDWrZRqtgmX4NOIn0ejFKoNIaRQp9eCQ
JaUotDqFyiSTWWRiu1TolIkcgtagXBEQS9M6A5w9+8IWr0DqapOElHqfUueQ
a/UShUzIUhaZHlOpW1pFgIpKw4AiHsLyUg8f1lGBw69x5BYZX177kfGFnGJ8
SbAGeGSIiUCA9D8KMCPkyCJv2LR34+azIFhv3roPN4GlL5gCexq9AxCS8QV+
mXw1k68Uyh2l9jokkSjEEdQHk05n0Gr1MrG5ubmxDu7sw9SgwxmB+Vy5UChl
UvmgP4R3wWl3Ab8AQgtvECFwMZ3PJ7OZWArXShpfV6gWO0aHJqORjFSqv++B
p54/+oYvUrB44iqLb7HcoLUHO0amNu85b9eBQ32T0zqb06AzGzmPU8M2s+D4
cYfL3P4VNNJCoWrDnvN+8NHvnnnjx3c+9coDh9865zu37/rm9d+45eFvP/T8
dY8fe/qHn7z4k9/e+Mjh1TvPq3SP5XPVoXrPisHBrWNDazrLaY993e59Y3u+
0b39/K4zL+k861ujl9zSfeDb4mL/PLPPXOwc3bJjZO16WySqsNkNvqDUYIEt
YEWm8PoQ4XJNg+2sP4oX7IFA0oHATyPX6pR64Ef7fiwviMdPbYIIFQhUjSoq
XlAoVRKJVirWS8UejTZhtftUGq9c5RIrbW1Sn0SrXyhwy7R2mcYIV04okbSx
Cin8TKPVRn0MqB6WWl1RJz1ShlRpzueXcjWzBkrRxDsI3w8aDAIrCYGCglqD
fiPzSlqOhOILIg3KDbJqzQ5exZFAyxF4JIQfFlu27ccV346IQ29yMzfGEUTQ
AQJD0Qx0YCyZi8Qz0H7AL5erQlKpUjSajcVyoDESyXg8EXAINahWmxGPisQK
zrllBzeRcJKbBV+IhBOsEMzq8ntDQX8kFownwslYMAoOw1zWQTaehuQThXKu
3eeOaFTWJ556+aFHXwgna3pnVKh1ni7SZjqGL7n2tvufOvrA00cPffuGjr4R
rdpg5JrZaWQK1uFHwQ6dcWP56i3Zat/Vtz9w4oNf3fvsq/cdefOew29eePOD
+79756X3PH7ujfdf8eDz33vno2u/f/ySu5498v5vL7rugYHJ9bFIsTNXna53
Ly+XxyKhksvVNTw1vuvg5IGrJi68sbbvqtLZV9UvuNa7bLs03xMenhpYt6U6
PmkNR9Q2h9rpkhlZbT7f+IuK8QEhaLSaHfAAWUtPgxX4gT2GH1erYNCz03A1
F7wDOYnaDJFqLFKNiUIqVgPOyhO0bGyq2uiF/yOE8mVbzdzWjUl6ejO+B9+p
EyuVAinhB6Vqd7joBI1mp/I9xmmwMrl/lPryRUc1LiWY5ls1t7QRYwCPXDXu
dIO5bY34YQHqiDdcSQhCXvD1uJL2a1SAuG7dfs6mLWfjWWg/g9kD7QcP0O4K
wrtD2OvxIxxmOVe4gsBMpkIE5vO19vaerq6hSqWbIPT5YoBQq7XK5XqpVAuB
F+3zRoOBWCqZB4dmg92kt/ncDL9MPBsPJeAN2owwUY6IL5QMx+PBaDKUTIZS
Zq09Gs4dOfLGA4885/RnWxUWhSW0UGauDs9cdsPdV91633duf+CyG+9YtXkX
rBjMDROZGoGkTmNEaKw22LaffcGzr/3gpXc/vP/wcbB3+zOv3fz0a/e/+sM7
jpy45+W3Hzzx/n3Hf3TXqz9+4MTPH3jtn29/7p8Ov/PJ1r2XRMPFtC/RG8/3
+SNDbs9YKpfJdExsOdC//Rv1XZf2XHDj4BX3jF11b2LT+d7RdfmZTV0z6/Ld
g+5oXOdwgUAN835tVObMuvpzuUCwv8APJhj44c8DgWadxaA26lUGgxq3WD4H
FLieVUMzV1auMspUZrHcIFEYOQXImkbSkAUxvF6Z1qgy6aU6l8Hh1Nq1AqVF
bjBCAUo0BqlaJ1UpuEMT+H7w3cwWVpGNbyQdSD3KqDQMbhLwo26TfKtJLgmQ
9XeC3mPtqJtalsxsIFm6bCNkavkmkukVm2dWblmxZvvKtTsgWCxbtRV3gBa0
HDl1jRqPD4RxXX0yQsGVdCAEa0QcZpsfClBndNHYIwQaXNqVnYTbhXYmM+35
UheulVp/3+CSaucg1sVKT6HcjfuxZAk/B1EM4mgo0kSiBCz9/ji0pUYN18en
U5tcdtat3+Pyu21wxVkZCcxxLBROR5MxT6QYL0R8CZvZd+yld+5/8Bm7Ny3W
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
x+zsx7/7r6PHf/Lq2x/s3X+xzRFVqOx6hGhKq1JpxscWwr2AZrPRxk3Acbid
Lg8356uUSJ61ddv+7bu3rt/8+MPf/9YVVyeTZac7rjf7LK5YqWN4bGr9wYuv
vuame6665rbJyVWlRLmWrBZjlVyi+vSTx155/cePPv36Hd87eu+zr9/13PG7
Xjh+19E3gN9dL79x50sn7jx67P7njx774btPvHzsscOHf/rJxx/++pcvvHzk
occeXr165bLpmUcffOz1w8cfveOxB65/aPvM7lqgMharZa3RdKp7wwXXrvj2
fTM3PzF63ePrbn9h23WPdy4/yx+ve9xJu8XLEmagYJx2C8tfCsAP1HBJQXSc
KlGoKR8DCoqGVAra2Hwi3dympc6itwbcwVgwHvKGfU6/z+m1mxy4CW8WgkjZ
qDFRtKLhsnlpYAHfi0+m0kLaxGyrWaFhJYOIM+RqHX47RRY04IwO10jvnYIf
36eR0lBJBwLCRthIlq3dDiHwICs37OLxW7tlbkeF6GoUQEj4gTeCEIvtOw/w
+AFa8v2AHyJfhdoEAoEfJxZq4w/8PPGszOzUOP3Dy9d+66a77n8KSu7Dz/8+
+5fZ2X+fnf3kD3/74NM/ff7fs3+enf3F7//rJx99vnXH+TqDVw0X2+gDfnI5
kPPAh4G9UHPjRfRaFoa5HE6/1xcJ+BM+77Y1qy8+98AVF1/68H0PXf3tazes
375+/U64WEZrwGgO5Is9Fxy66vob7738Wzd210dsaudofXygOvrkYy++/94v
v//siZvvefqxl3542/dfvvWpV2597tU7Dh+/88Xj0Ht3v3LigWOvP/3aiedf
fe2N99799We//fDjD+64+6Zrr7/ixImjDz9w++TIwI5NWx6+55FH737ymYde
vOnbD4yUJwaChZwpEPBl+tbvnfn23dO3PTV2wxNr7z5y9j1Hx7Zf7E91G0x+
q8Vjd3jMHrc14GFVqFxFjI7TftQOAsqGDlVhHMFeS7OwaXEbCGRlWazGRylV
aEEIfgjLreWyc9kOEmvtrWPV0Co2H00pUXA31awVierk1GP8WLUOeIM3ITcG
jrrUAkIIS0k62fsOCpBv0D1XlP1ls3tymJGaOhsTgQQb8cYjRxqvUXj8CC1e
QBccPGDWiB8J3ccdsLfrzIPgFuEq9J7LG8MCoQf0HnmAFHpwyX6OM4TyXM/g
5Tfd/u7HnwI5YPbb/5j9w99n3//ks1//O3v4f/42+8nnsz//3d8+/O1//cuv
/7rv3MsdrqTdGQM5KpVNobA4HCG5HB9hAyWmsm48ZkvQH8hlsh2V8nhv98bl
MyBw5+bN+/fsO3TBxTffdNdTTx155pmXzznvko0b99x88/3Hj79/7bW3n3PO
Rcun17PsJmfyhSeOHXnuxEMPHn7osVduuPvpe5954+bHj938xMu3PIu44/W7
Xjpx36tvPnTi7SfeeueVd997/4MPfvHLT1478fItt1z9wH03/uT9Y5//9md/
/N2/HH7qkemJ0b3b9z724LOPPnj03jtf2Lf5wl5fuuoIeVzRYNf4kitvW3Lr
40M3Prbsjuf23nd05cFrs/UlZnvYYvc5fUFLwGcJePR2Bh7EyFVmAQBq10m7
HDCObMjbSfygbYRKzQKheKFIItXqWS6liQ3TYQNw1WqdTmM2swlWWrVGKGRD
hFnZO3cmoVay7XUd6+itlypVIplcJFeJFWqZWqcCfkar2mBR6ZnL1KjlGqfG
n8IeP+CDb51NLWQbqYOi4wW8kTTiB+O7cevZvM0lZ4+MLB9rQMj+8nDu3nPB
nrMO4SG8LLh/oUghka6otFB6DoTA3D6Mg9SgymgfWbHuiVff+hOo+9vsj3/9
h5///i8ff/6fv/jsr7/56+y//J//+Pnv//Pjz/8O+dc/z376p9mff/rv37zq
9ki86g8VTbYQTLBCZYMllUh08J9VSj3wwycd7l8ume2r9y4dHZ8eHV47tWTH
hnUH9+8/a+fus3btveKyq2687tYbb7jtxaOvP/P00VtvueeVl9741ce/+ex3
f773jvv3bNx9zSXfOfrkke/d//3rr73r2cMnnjjyxv1Pv3Lnky/d9cyxO597
+e4jx+576dVHjp944p23D//wn9796U8/++z3b791/O47bnz4npseu/+WFx6/
55c/e/v3H/909q9/OvrkU+MD4+fvu+Tlo+/eeO0jh876Vn8g2x9MBp0RS6yy
7Js3Lb3+oaFrHlx6w2Prrvvemktu7Zra7g6VYC8sVpZ0wTwsu5Na2VCHQ76b
KBsFKJRRMwRWk97SxuYFq3TA7/RWwdeaWlqkcpnOoNDp2MhYh10ohtMmNxgM
XA95DY3CZqOLufMkKEaaa0BDe4VSmUimlHGt4NUG5inpzOw4XsV6ZX+JPb5/
KW2Jn9KjGx8QjsM5/PCrKNygKIPf4kPAi3CDol0sIGs3ngn2WKHH1n2QTeCt
QTbD4O44d+vOA9t2nQfZvvt8CK0PXPAtPLvjzIP4smL7gMkWBCe4iuUmg8Vv
d8c0BrfFEYbI1Yh0M4fffP9Hv/n8oz//7cPP//qLP/3XJ3/+v7/4498++rf/
/tWf/i+TP/79l5//N0ww5Fef/R3yk4/+7dyLrgumukzOpN2bVRv9So3bao/o
dC6LyavXWNWIHl3Boe6hFUtWLBmZ2Lp+4/4zz9y3e/fmteu3bdh06MD5V1xy
+UUHL7zsom9ec+XVN193E+SGa66/7aabH3vo0WPPPf/BW2/+5oOffPjDHxx9
+slN69aGw+Gp5asu+Obl3z989PEXX7rniScffP65I++8/f1jLz71+ksf/59P
f/vpL55+6J4Du7bc+d0rjz3xvW3TS0fK5SMPPvyXj//1ox/86Hcf/Oqxux6Z
Hlp+3x2PPvv4Kwd3HRoKF8ai5aQ9arMnhzbs33L1/X0Hvrv+5ienLr9r7ZX3
9G88zxGtQrGHHOGQ2WWXaXxme8DlYSngBra37HX45CL4YTpEDawws03CglOR
hKarw/+D3VzY3LagqRUCbQkXjtsnUVNtPgBABNraJhSwvlfMGaP6AlYBqtJQ
njmdnbHceCU3MEvH7S2f7MKt01tozNYpI7fojko9l7OhZNmSej4A4aesAjzA
xke4p1DHx7zE3oYtZxFsJECOF7BH+AE8wAYhCHdD7+0496xzLsGis2cCMabO
5NMavSKZCdIq0jULoMuDuO/wJJas3PKDj37383/72z9//p/vfvr5T3/3l3/h
2PvlX/4fsPfLf5tj71cn5ZM//P3D3/znifc/vfDbd3iTnQsEernOZ3LE5Gq7
159xu+Mhf6qQqtQrvUPdw6un18Dwnb/vwIUHL7jgnANnbtuxe+v28/edAwLP
3Xv2oQPwBi++5v/l7C2Aq8y2fd9Xr+re9+45+3TvxuPuSogQJwqEECGerMhy
d3eJKxLc3d21cXcIEiFACAmSkEAI0pY3vjXh67Whe9c5r2rUrLnmWoRAfvmP
Meac3xizZ8+tr68xmeBlY0Xlosb6g5tWn9q16cKRPV0Pbrfeurp1wxqdVpk0
NTEweBKJQVu9cf3WfTtXb1l/9vr5J6+6bt29smnlgg2Lms7u3bp/3XItg1on
layoruXnl6xrmN/34Mnz2x3n9p+s19fPq15wYMfRWmVVhn9UYWhiEvzijHIJ
jckUVi9nN60n1q6VrjpEr18D+Yi8Yj6bLkuJSIp09Ipx9PSztnceN8HT1j5h
clSId6C3g8e4f4zBzikmOFqNsUFliH76aTRqrT5qzGhgDPXdAPP1m4gqi1r2
lERdA9ANPbwSON7SF9/BQ2cZ+IMPuP338UNNCfG2MsiQ4iHMQOL+0nD2wPNa
Uocjh4seAk8sLwdDc7m6GsDTGhthnJaaD6SNs3YHPIA3N68QD5+wkPCkzBxi
ckpu4rTs6tlLW1+9B/xaXry9+vjF/RfvHr/9FdTv6bvfgL2uwV+fDvyCWf9n
MLMG/gZBYM/QyI321/NW7qRwNQSymMpWMrnK+MTMoKCYQP/w5IRUQgGJSeZK
BfJKXWWVoaJCZzKodFq52qDSVBlMNXpThVpnkKuqtIZ6U3mVVqeVSFVCkVGu
qNVqF1UaNzY37ly++Oj2LSf3771+/uyTtrbbt27s3bt3bvO8xUsXHTx84NKV
i51P2js6W0+cOLCwofzGqUP71i6tknI3z2/ct2qxgUHJi4+lZ2ZtW7RkoKPr
ztkrO9ds27Zq2/olm+qV1VlB0dmBUekh8T72ASGh02jSGlnDOpJuvnDOBqpu
nrRyQePcFXOr51UK5OTElKBR4yfZOQTY2henpG5atLReY5yVlOpm7ew4zt56
tA3I4NjRE8Aw9fsJkz4bO6xWP7p2AoAFTgSN9QGEUJF5y3bPeMNovOUuiiTR
9RW8jy0yvPmF2be6/KXZYtWfnBB+X6UPww+vcIUOgnGhQ/gBad+b2eeqOAI1
V/gv0meJH2IPqJMoKpAhCBGHoH5gNJYsp4CaV0Qn0UR0thz+FDAJ3nnRsk3G
yrnwsZ0HT9/u6gPdu9LZe/lRT3v/x2fDI50Dn9v7PiD2nrz5DIbww2zgt46+
X+/3DD/q/w2Cw9bnQz9fajl+7vat+12nz9/asGmfSlWRn0/KySZAemvQVtRX
NZZrygE8lUQBBAKK1cbyap0RwKvU6M2j1iCTq4UivVRWZzAuqq1dUVuzfnbD
1oULdi5fvnX58t3r1+/ftn39ypWXzp1vf/Dw1rWrVy6c7eps72y9d2T/7s1r
lp0/vHvdgobF1do9q5oPrVvcqOTRM5OJKfGikjx6dsaF/XvP7tu/bfm6w9sO
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
aoAni8jka01OdSpqp1hr5atNSrKgeoI+J5qkYGQ4nWDreEVLMypUgtEKvHle
tGCNFMvwgTgNyOF0jSgq2bJ7saR2ao0l1VzmkR1Ll8YnQ2MT4L+YP0wEsGww
lgvFKRA0Lm9Y1hfGQXMRwo9l/FECKa0L+HnsXcDPy37A1YVj+f8TeP6jjevC
C+6/wj38Vpe2PPxAqtwqUBIWyvn8Kd982n1TItlAjLp1O+gLpqGHlXDCF5uM
EBNB/MpU6PKN6UvjM9dC6bmy7GfQdEki7JX2wdOTz992h29aW4MmROjtw+X+
0Vr/aPPRk8WNvXZvp3NvtyCZEZKJUixWgFzzwOju692D1Z0X+8N3hycfe3tD
Y2nn8eD49dmHumSrDILVb81y+uu9jUVnueWeARilOw85GI4M99+mw3G6htHW
jHK+ksFLyUQxibOAH/AWTgqAnz9eSdFakbczBRm7m48nqXJJVBQLdn+AWZFp
wFI5H6YDrgUzc+E8QSKGbYBBGPWFelVXuKrOIcDPQrIB5iuyulBpipxTFSAT
wsZEK1XUCqcJSJFUGdVFoFWxea3FKC0aOR5vUAuy7QnY82aARhh6TLpDzhhR
9yc3ug3MlCQ7AVaVKGFwX6QIPcnUObUN6Z2Tm6BcCc3eSV0dm7p+c3bKD3kv
BhVm/vpsMA39TCAJ1M1H4UGTbjZIUr8BND/ARA==
       "], {{0, 160.}, {213., 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{213., 160.},
     PlotRange->{{0, 213.}, {0, 160.}}], "\[Rule]", "\<\"n03417042\"\>"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJxUvAd3o9l5ralre66vZVmWrdRSB3V1qK7AnHMCA0iAIJhzziCJnMOXcw7I
kamiui3Zd2b+yfyfeUG0ezRr7T7rKxYBFBce7Hfv8x32syPP0tnf/exnPwv8
L1iWDiPjfv9hbPlX8IdVd+Dy3H16MusOnp6f+vuO/h6+eAv//T/wX/1aFrMg
RcqBVCWrqTldyxt6gWNlnlMEXhEFFVaek1lGpBmRopQUKsbjDAhFRZrWeTYt
cJl4lMYQkSE0EpVTMTYRoSlE4hmd5WSalwhCSKXq30DiCh4Xwl7kcs/tOrg6
Wt2ZGRzesllXpkaavvj1VOe3e9MDB9P9R3MjJ84pa3fr4eLifa6m83k0ZkZD
hseteAKaNygfXSZ2zwPuEIolhUSAgCdMhEh4XSTOYUmRIjRZLOhatVr5c636
vW7eK1pNUqskbcSjJI6wAqtpchZ+TFDaqOQyt6pakKSsIOUlpSirZUEqMFyG
pNM8f0fTNRTNJRImguUopkLSZbhgxJqW+SCZb2KY4YsKEUSLorovzF9d4yx/
S/BvruK5c6RyTtQO0ZyLLeyG8PMkfujxTC3ZWvvbm3qaO4a62sZGP+21NDuP
R/a9Mxex7Sh3RppnhHZO6ue4cYpqV0wprL8N6R9cTPUIKx6S5XPp3Q5V3UTy
+3j5grm/YR7dzL2Xvsez/9svvHVRFXi5HTRzJt1dZ94dabdX+R/OMh8uzT9f
GB+P2PuVWHopqK1FzUOyajlPfTWz+U+do3/X3PXPg8Ot+4d2hhtlM4NCaZAr
9tG5Pjw9SOWmhTuH8WFBfb+of1zVf1jRvl+VPoK21P84Nr6/1h88Wu3GeHOT
/d6V+z8Pjf9aZT/aUrfL1JuFVG4hJCz4ErOnF0PL821j3S/6X74YePVypLnF
0tVp7e+zj2lKAfAT+TRIkTPAnmkUQcAeCNhr6EcCOZlhNBSXUykeQQSSVDkO
HggPzwJXNKkBfnhKTEYZEIMpImfWieXEBn6pBAeKB0jfVQzwuzq8du2frljn
HGOjy5PDkz2vx9u/2Z8ZdDkth7aRdUvfXG/b4vh4whvOqVU0rgfc0uEBun+A
nF4S+2fR/XO/L4TFw1Tcj8eDBBpj0QQPBP6En6qU87k32cwDLxY5ocBLJZzU
CEzkGVXiDSCQY1VJNFU5D8pm6wSKckFWS4AfJ+RoNg2PQtA0QRQpqgxiuBqg
hZPFaFyPIQYtVHntnhTKSTITx81gQrn20V4/G0dyYax0EcvshMz1kL6bMN1i
xS9kA5x84vdPLFhfdTU9b/uuube1aWjwD70Trx2H/TueydPwWog9QtXDpAw6
SEhHKe2SKvjkB5/85pKtHeMlQG6LKAN+B3Stfh1Nb4WMc7QUlT8GuDcuonpB
lE6I4j6RP5fvr9Jvj+TbHb66J94eSY+H4sMuUV6Np5cj+mrM3IibzYvn/7N5
5O+a+j6ZnG/dOxn3h604N0ybwN4QXxlkCoNkYYytzClvltLf28RHh/RmQXy3
wL2Zp+5Bi8ybTe7epT0Ecu/C5b94Cv95qH5Yo94sEg9L5KPFZ0z5BKsbnzhx
dzmXX4z2f9fX8nq49eVw+9eDzd8Nt/cuTCycbBtaCfDjGDAxA/AD8NJmqYGf
wMO7o8mSDoILgJAXVJbVcVLFcZkgFJY1RTEnCTnADwyQpY2frA9WwE9gDYLk
SFagKAnDOCTJJ+NsIkiFPCnPSTB8HQlceA9W1ix9PdbB7pWZkYGXf7L3vz5x
jB3ahucHmxdGuizdHbaxSYnSkbDsuWJ2NqPb25ELF35+jR5fhm588UgAT0Vo
GpV5UqcwBcwQ2JOEvCIVGwQKfC6FSiiuUIyJYRKa4gA8UTAoUmQo1dTL+fx9
Ol3NZO7gZ2H5DLifKBcJSgeJchklMjQLZngH4sVblq+iVD6a0pN4huTKovFG
Tr9j5NskmfXHVU9IBPZ8UcOdzJ0nC8tuyXEjHOLFkP4Wyz9GZQPcb2h24nnb
i29bv2vu62gaGfmkb6pl+XTsOGy/QXaTyimVPSXSZ2RmNy6d4KaLKbn4qou7
PWdvD9DSWjy9msotxsyliL6VzB1i5TO8ek3dernHC7jGSlds7ZK/PWbKgN+F
/rDHl9epwgZd3iRLa1h+I5XbRLNrSXMxInVtuH/db//Zd73/MmjtOnHPo5yD
FKcxcYIpjAq1MfF+nK+NsrUJvgb4OY2PdukN4OcQHh3s/Tx966Bul5mHDfbu
UKheqvfu3J+9xf+6yP51V/jgRGqz4cxMQBm7RLu3XC/nlj/rG/yk5fUXHS+f
D7S+nhpqmpsYWncueS9uOBLwkwQgRxM4EyZRNlMB9mAKA3uiUGdPkQ1VMWGF
a1HSAT+C0sD36mMX3iyYVkIO2AOB+4H/AHsguAD8WErFCRbw4ziNZVWG0sEk
CUQmkxIaYVRai3kil3tH85aJ0a4259ToWMfLrq9+Y+9/tTc/7BhpdU70TvV1
dL9uujl2R72074o+P0auL6lkykggqtufunJHAD8iKUhMWmYzgB+BSByTNrSq
ppRFPsexGQyVAyEiEmOAwLppJ1lFTEPGYBkFDL+YfyiX3+p6CT5KkCXA2Pk6
hNkGsYCfrN2pxhtFfwTwSLpIsCWgDmeKrHRLiVVWuRO0twRXDSZ1b1QNJs0w
VrgKG65U6ShRmD1j7G4ByPFpj4nsnZ+Vti4uBqYnXnQ2v+xq6RjubbdM/aF/
unvb7QgwGwnljC1ei5VrsebT7o/RtIuv3Eh352z1hKocUbXtVN4RUJbiaXtQ
WQgq22jhgn24ZB9O0eJBPAPWd0lW3dKjW3lzylVPxdsz9W6HLR4qD1tsdTFh
OqLKOpbdoQuLEWHkPPYPLSP/2DHxW8tS26FnNs4tUAZojs7MiLdT8ptp6e2k
8DDJ3lmY22nufk54eLK+N4vCm0X+cYl7XOUe1oV328IjsL3DlPe4KrzKKl6e
j6WnfJLlhrH5uI511yf91l82df2muf3zzvbngz2vxgefT04M7GxvJ+JXsuRV
dZg78C4Ae5D9MulyLluF+SvwYHdgekaDvb/Fj2EUglZIUqZplefB/TLwcDBP
cBISl7AUhyZZAhVoQuYIhSElhhYZVuR5XRTNhkNylClSaYXL1nKPUV/s5uTy
fG9/ZnhwerhvYWqo7avfDrz6dNM+uDTVPTfSZp/oH+pot43P+i5iEQ8TdHPx
sCpwFRiLsQQbCKQAdQZVJS7H02k8JYF4NmPqNV2tCFyWpoxkgvf70FiUwQgV
8IMPGnzE8tk78Hz4qXW1CPkhHCZCETIQwpOICGOXEbIpXMYoTdIAv5qi33NK
FaPzKSKDMwWYuQAezlaSRD5FFlC2GsVyVwHB5RM9CfMsqB6FzLNUeS1gjh/h
C37tnL8/pfIRo3JDsOunZ4Mzltc9ba+6W9uG+lonpr+yLFkukR0id8QWz8Tq
uVBxCTW/+faEzMPFpXR/SFf2iPI+VdtCi46w5oyba0gehu8Rc7uTyK0G1I2A
cpDIuqjaJVW7ER9c8sMhXToRaqfKLeB3rn/YpivOuLGUNHbY/DphDJz4P51Z
+dl3Xf82Pt954p9JCnbcnEaNWSI7z99ZhUdgzyq+n+Yfp9mHaebOSt/NMffz
zN0Ce+/k7pZ5AO/NhvCwIbxZ5++XyeIimpuNqKNXVPdhvGsvPHAcm7hIvbTv
/75v5h+/bf3Hb179tqXjm6Gh9pmpLsd8k8M5dn69g/PHgr6FcvAugPvBCjYI
7wsQCCMYnOGJvTp4mppu4AfzVxDrJgb4EYQEHYTjDEGoowvvKeBHkwpQx5AK
B17KGhJTz1fgooAfQAsGCCUFHJLGNZY0BMow5YLnMnBxeBHyBNbmHaO93YvW
8bGeVwMtXzinOhdne6aGXi9MDdotI8MdPadbF8ErJO7n4yGJwtMMncFxEcME
SJsyn9flMhAITwsQwtgF94OVpU3AD0WkaIQGD+S5LEVp8GGBdJExq3BR/zfT
aixGX1wEvX4kEqOhm8Dk5aQ8yZqsmFOMKkGnST5HcFmUzmBMluBLBF9GmUIw
roHjxfA8wlRiWPE6rF74RVfU3HZLB7HcIVJd9JvWa2kTKZ2LD8dEOp65dZPc
2tnZkHX6ZXf7846WpsG+Fot1+NC3hmZOlUfwK2DmhC+fcuUr5X4PzxyQhX2y
tI0VAbxNrLKOlVdShW26ukmWt0kAsnpAVOrzl6peC4+nZAW6yRlTOWEru2Qe
ZuKJWsdvj7uFsbuKZrbo/AZpjt7EP7ev/X3n8B9ml7/bPhvyodOoZsUzM3hh
lr6bF97NMG+m2TewgubYt3b+rUN4uyi8WxbfrgiPq+KbTfnNtvx2U7xfo2tO
ojQV0fpcZMdRbMiFL8T0hag0dBh4Mbv181e9v3jV9avmzt919Pyhu+/Z4FCL
dbZvbcPuiy1E8JUkt46KoHrhlfNQQAA/eF/A+iCNQyZXFaAu/f9jj1c4vk4R
yajgfg38Gu4HubEh4UlQeGGVWRMSPmRIAmdQhCEJAYYvRYBJAqg6hLRwACap
//LkKuyLuE4uJkfGhvu6rBM9o30vRnq/dc72OGa6rWOdjqmRsZ5e27j9Yt8b
89IRDxUPwQwV6iUCIOdyulw1lJrEF2HaQt4DgQHCCIYXglcE4GHiQ0hIp28V
pQg/KTieLOfgH88wBkQImLlgfTCdoWsAb+B4rFDgxCI0ZdW4I7g0IWQwzkQg
OrI5UiiiTD6Kmd6oDPglyGKCrkLRcEfNq5B2Hja3fNpeqrweLy6GcmtobZ95
OOZvXWIZ8LvGmaWjo+7J8W86277t7OyYnBxa3dlCjRPlLVSDTSK/R5WOuErd
u7jqNppZTRjLUQOm7WI864jnFiBMYpVd/nENK6wg2QPuzm3+4M/+1aN/vJHf
1sMhUYLHHjClbSp/IFaPldoamV1Fc6AtqrhJZUauY5/aVn8xMvWrKVvvdbDf
nxiNsROoMUOW5tjHOf6jTfjBxv55jnk/S78D9ua594vC+xXxw5r4cUv7fkf9
uKt+3Ffe70gPK1RxLqqN+7ieS6rtGOk9w+YTBjSdTURrWzz4+YvOX7xs//fm
rj/2DDwbHvt2fKrJah9c354995wImW3aXEVl0A6ThvcCBOyBIBGB9UEsh+H7
xF7mJ/zqvQNqLysJgkFzOrD3E35gnmCAje4MVResDwwQJIDVcDpHS6kkEYti
QCC4DfDAUABqhsDki7NAJIj6PdGgL5pKYIsLKy2vXo4Pd40NNLW++r1ztnd3
bdIy1DQz0j09NNj9qmNv+TDuJoDAqI+Mh2koEYAfPJvA5nkmx5BpjoZ5Ch1c
jUVoAmoIIsHLNXJpNn1XLX/IZe5vqx8KuXsoueDbMHYh8lGMQQKEuKIZtWzx
LeBHMhnAD8auqNfU3L1oVkkxm6I1lMniQiHF5MKoBkUjiNaTni+RroMXkM98
8qFfWfdrq9HsrFe1hzLb7COY1RaWcavVkFY4SyBzW5utI4PPWltf9PWNLK4u
uELgeAfSm+VUdsbHL8XNXbK4jefhIbAuRLQ5v2QPq7MhY9KnTIfMBaQ4n8is
EaVT9d1N7i+X+sdD5nYXL+wRxSv13Ql3e8xXwfd2udKBfLsnlZ0pDUDdIIrQ
QRZS8jcrBz9rH/j56FTzyeVIBJlIspOEPk0VrNyDTfizTfyLjf/rkvSfS8IP
C+xHB/POybxf4t+vCh8g5gF4O8q7HfHNNn+3QhSsEXHgHGnZC3adoZaIusZU
VoncmCv+jXXtl619/8dXrz7p6oPIB2P3q8HRzoXlmRPXdhQ5Y7U9St8m9E1M
30AVWBv4NQgE64PSAfiB++laFtTAr576nvBjORncj+ag/9YF15Do4CHwQEAX
Hghhj8R4EJZikCgRDSFYiiJwlqFlGOgwnSEfAnigUAAPBjGfJ+n1xqNRIhJB
d3dPh4dHu9qb2pq+7O54NtT7zdby+LpzrPv1M/v46FjnwPTAdPQGoZNq2IPD
BAeooEojCQlJKFhKowkTCKRwA0dlEDgex0CgLWhKvVvBRwN+Rigapl6V5QKU
JmCPE7Kgp/09gwAn5DPgezSXQyAxEhqMWkrIJ0gFFzOgBK2mmAwll3GhFML1
CJG9DPN+JOtLZfZc1EVYC1O1Pb+86tfGTokpt7RB3e1wD7tQRZW7gHnrE/Tj
SHTMufCip+fT16/bLTNH4dQFpe0QhVW8uILkllOZ1VQWPHCXKR/wNUDR6uXn
grIjbs5G09Z4Zh4p25LFJay4SpY2mQo8M2iPqe1z1SOuBs+zx1b2uTIM3H2h
cqjcbXH5+bjsjGsXxvsttvj14sHPWgf/dXyu+eSq3x8bTzCz0DXY4iRRGkmV
x/HHaeb7Gfr7RfYHG3Zvxx+Wufer7Hsneb/KPO7r3wN4u+LDBlO1x7TRa3zg
PD5ygYzc4EtEYVt+3GBL/SehP4zP/7Jt4N9ae3/T3g0D99OuvmcDI532xQWX
74wUXZxxiEv7mLoaY20edOYqNudGGuzBSKrryf1g+IL7PVlf5m8n7xN+0t/i
B4VCkuotEiozEChL4D/1usFScr10YAKRZAiUoSmB5+AZdGgoFCFjiIggQiRM
hUNkwI9B6PIHMU8AOTjxLK5sdrS3vnz+eXvzs66WL6zjrRuLo7Oj3Q7LqG3U
Mjs0HXEleMxEIjxgBhMcakUiLiEpFdIgzxQaNgjW+uSBCvCpq2X4ucAkqadQ
CpEA7A7YE4SsKOae2EsDfqAkJqGkilMmgmuRlBiMc+GkFMO0ECoinEFIWYRL
I2wWFQtxJutOSH7UcCcUXH6gzI8+tBAiK0nh8ThiLPnksXNq2iMuo8V1EkCq
uM2HWO4uYeZ2fd4+68y33V1/bGrpnls4STL7Scnqpqf9IlgcBKfFmLGSMqGf
bpEFuJ4NiMDeGlVexMpOorLCPi5T94tYcYUorlMlqJz1lShuEPlNsrCGZbdh
8opVAG9PrG7Q+WXCWML1ba60gqf7zsK/mVz65Zjt+dbpQCA5HCH6AvhoUpkk
cuNIcSRVncDeTJEfrcTHHf1/rzLvFon7NfbdJvd2hbxbJWo7kPrw4nxcn/Rx
41f44Fms7zg8cYXOR8UttryI6EPnkT/Nrv6iY/DnzZ3/1tb9+66+33f2NM/a
beeuY5T0yhmvkj8llbUwueBJOv3IeoTZQYRj0qib3hN+EAKBH2CvoUb2a7DX
sD6OlQA/oK6BX8P6FKV+7+D/C420AuzxjFrfW4NqTMokxrKUCFMYBA0FAlsy
ycXjDJATilD+IO7x466b5OF56OAseHrpn5mZbW36rrfzRW/7133tz9Ydo/vL
M47xwY1Zu3VwynMUEPA0jaVJDNgTYwkhEhUSSY0k0iwDhb0gS8BbGaoHjF1J
yBlqURGzUIhwhKUQDggkCIVmTVGu7zCzfBZ8D1oGBQGPToPvkXwBKkYMVYNx
wR/jA3HBl2DjjIHLBQAvxecSXD6IG1dR3pNUPYhOme+l0l/j/G2Uq8WFu9OE
uRSUrV4BcFpKpleQ9IlYDucfE/lqQjPt+7uvBnoBv09bOoZXdq5YczXMT7rw
2YC0DCMVya0lMssxbSWur6R0Z0y1heQVrLDF3S7hFQdWWqTunGR1CS+B+61R
dS3j+WUst4xlQDD71qnCDl/ek2ubXHEJN1dIc0csbfP57mP/L4ds/zw4+3zr
fDLGzhG6JSkPhYUJND1NVabJ22nicZb+YOdg5n5/aPzXNvdmk3nYE9/vSW/X
qOpiKruEZmGIj7mwrr3gyHnCHuIX49JyTFpNypuYOnLm/3J68ZedQz9v7f7X
jp5PBoa+HJ0Y3tlf8gROCe6SUQ5RfjtGbUXJzTC1nwTqlBsh79VKAa3acD9o
H/UIx+tPWy7geJkn9n4cuw3r+xE/SIC8BuxBCATrU9WcaRShLz9tFepgejQh
/kgghENCAvejcK7hh8AekmQTCTYaZ+B9jyY5f4jyhpnzm9T2UXDvNHITQM9O
XUM90D46LAPt7d99ahttP1ixTvd3An5jncN7i0domAf8MFQPhthYUo7FFVAi
poAHMnROVaqmdgcE/jh55Tw4HoQBeHWVN02tADOXF3NPe8s/4ofTOkhUKtA1
BO2WFksNAsMpOZiS/IiU5LKEUkalMrAXY7J1/BJiiMoFySym3pPp91G+EuHK
QOAlmt1M1h0MyuwqYqwi2qVaTpTfxDL5y1Syzzr1rK0ZUt/nHb0jmydeubIY
5JwhFcDbpas7dGktaS6EBEeQd4ZFmMJQV7dhqkoPTrRgTWTtaNmOFpeJ8k/4
QQZbIsDlsstkDsbfBldeZ/KrVHaNzgGBm1x+jUkPXIR+PWH/WVPf72ZWx4LE
slh2sKUpNDOFl6zUrY15tDFv7ew7B//nZfE/1qX/2BXe7XF3B8LDsfx2H2Ie
krWHJXtInLwhp9yEzccAdbtk9pAt7hCZ1bgwceJ+bV/+Xe/Iv3f2/a536I/D
419PzzU7V5bD8c04uhHDHJ7o3EVgxZ86I/WgXkPLH2OFR79RcwmZU9pojF2w
vvr2HcxTTnuyvmwDv5/GbkMcL9dvfACQoibJhqKmdQPwy2fSRZjUogClQ6AJ
eK8FcDyWAE5YEINzFC7UAyHKAn4weVOoCFkrEGPdQcobYS+9xM5JZP887gnR
oWByYmhsuLvTNjHY+fJP/c3PVmdGpnraneOTva+65kYXLg5C8YgEjucOMJGk
ipFZuA4EOaARPFDXbgE/qMAQL39yP/BhYC+r53PpiqaV61srQn1vmRHqoths
3frEAiMVgb26ATLZFJWu30oj0zBqk3whJRTjbD5KZ0N0JkilfbiOabcJqYxq
t2T6Lardx+VqiC25cPMAT2/j6X06v0dnD+Cbs7do+T6i6s7jw5d93V+2NjWN
jHzeNdC3cnDOlRx+AbrtJpLfJcpb4GMRdd7HAn5LUfFEvtvjqgfy457yBgau
NZl24OUFAmywsAimRxZAwJ6TzK9Q+RW2uMlXtuTbda7gxA1Y99TbeUTuOPL+
y9Dk/2jr+8XQdNuJz0nnlvjqHFGaRsuz1KOVfLCSb2zko4N6u8i9W5e+31N/
2JceoLzssaUtMrcYV+YC7KyfWQhxw8dh4M2X/XAuVTdS6lpCXorw857Eq+m5
LwcGf9/Z9Yfe/s8GR74Yn3rpWOnbPxk8upy88jsCyY04BZiFjFu08h6vfh/N
v7lWipAA16LUSoj66bxBA7/6vQDBeDp7kPlb/GCtS1RFSeclXYZMqKY1PdvA
L21C9svKksEzMlTdxgr4kQgNK1ense5+JCFgGIfjMkoq4Rh35UPP3YgrQJ17
iJ3zxL4LuQky8Si9alu29A8sWyctPS29L79YHOtzjg/N9g/1vOwc6bTMT22d
ncTDUfk6wAQTCkkXETQdjojBEA/4mcYj4Mcx6VSCl8V8IXuXNcumnKtLySgi
2HUJ2KMYs35LV8oLShFKLsPnMSb9pCzO5nAuTwpFWqrSSg0VygBeiDD9qAbU
BUgT8APFxVJSruDGPZt/T+XexqTSDaafJiFa61uoeshkz6TCtVaOFR8SuaKb
Iobn5553t33T2dY2MfGnnpEW2+Z6XLH7xKWIvpowNpDMespYjamrcXkbMw+Y
AnTYTSoHyWqLqzmQzGwqA+wtkKW5pDmfSi+gmXmsrgUit0TnV7kSaEOsrvHF
ZSa3wRcBwtYDzz8NTv/su6afD4417Z3PIdIqX7WR5elUeRq5szN/thEf5oh3
Dur9EvtulXu3JX88Mj6cqQ+HXGEdUe0BavoGsXowwGwL1fep7LX+cGM8HoC1
IhrgZ7mItzg2v+zuedbV9mVP57PBga/GLS/tzt69U4s7ZHFH5qP4Lq1f6dVo
8W2q+D6olcEA1+Jg+LTNi837iZUYD9QBgY3h28DvadelXnvBAH8aviCp7nh1
8ETFVLVMgz2Qodf1xKousBDvFZGD7Kf8hJ9ASz9mP0bBcR5FxTjCh6KsL0KD
9Xmi/LmfObwhz/wc4IQhUuQmujI7v2yddoz3DzR9bRvoXJ22WPsGR9oHB9vG
e1snlxfPvSHxKsC5w3w0pafQdAoxwANpCj41dzB/GQq6hpbWquXCI+Cnixlg
LwOfKSENpQN870eJORDUW5KHtUhwefC9+u4KV2ePVW457QHhK0E8fRERzsP8
VVz2ooYXN0FuVI0JRTx9zxTeweol9dMoe45Ix6S2hUiHtOk2qqHcXSRbumG5
zZur1rGBlz2t33a1to6PPxsYfzm95vBzwN5GKreFZJ+U3kbSe2T2mCudKzWw
UDAfSI8wZJ/wM+1Yfg7JAn7wxwZ7IAfgxxZW+NIyV3SQGQdpLjJZa0Jq2vf+
atz5s7bB/9k7+HJrz5ZiVvmckyrOYtVZ9MGKgt395zz1wzzxcZn9HhoulJoV
srLJlLao9EqctfkQqzuxEKTgo3TEZE+4vMd8OKDSqzF+PSFuI7rDR7UsnnzS
M/Ztd0fLYEfb5GDPgm3i4MAZiKxjzDopHWrFs/TdZeb+TC6f0OlDRNqOkMte
xO4jZ/2ULUQvxPgV5Me9O0V5wo/RGRqMTn86+lI3wJ/wkwRVebr/C6YnazlN
y+vQdp/UqL31YvtEL6xAGlQPGLhokobADwVE4g1ZMOH5cVSIxchgmAD/qb/7
cgljc6Gk4o0JEdSAwccQmsHpB6vb9rEx+8hw9/OvR5tfO4aGbIMjs/2WkY6x
5m+6rVMbPj974+eufazHxyQQnSBzBG7SREYWSopQYgjdlEvV/CMI4h/P6LDm
M7f57AO8bmNLGXyP5DMorSOUhtImr1Zg/gJ7SdKEsYvQOYwtYlwpwRTdce3Q
S4IAwpukep1Sr5LKVVKC4Qu+R+XeJJTyZVI4i7FBIXfNGocp/pwyQpn7SOHB
rWa3wjHL5vp3vV3Pu1u+7mh9PTz8zdD0C+u63c9vYMV9urxHlbbx/Aaegfm7
SdQL7A5TPyownzCWsPwGV1sky/N4wYYXZhL6IpaGWrFEZBfIvJ0oztNlJ1db
EW/B/Wai/EyEdiBC/2XkV2P2n7WN/Hxo5k+LW2Oh1KZShtQ3ixZsxN0C/Wc7
/mGR+SuwN4+/X6bfLxK3s1Fj0i9M+ijrTWryImg5Dzj82BGT9qbvPebduVhY
COCzN4mlALGHKgtetMm+/fve6c/6LN8NDnRMjY6sLNovz09ZPlZ9jN6+v8zc
nmgVYO9cv9sm9EU/vuzFtiP0QUoE51xFVQAP8JsLUiyfoZ+2XoFDScoCh/LT
3guMVE0GY9RAqqzpkqbwMseIQKYs51QVwCul01XTrMAFPAoYhmegaZWiFGi4
IBpqJiZKXJanTYCqfj+OqO9INwpII3PCYw2j/HTgpJbNVvO5ym2pZkhK6NoD
BjjROTDa0mVp67G0da1PTls6ewab2u3js6NdE3OW1URYvrkkEkkdqkckzCEJ
SaIzPK4JqJoXy7fp+6p5l1OrHGUm4kIgyPgirD8mRhAlhMgQ7Xi9KhgVnE+D
eL0cQQWUNRDGDCZE+LY4nsboUpLI+5H0eVjcukTWTuPHfjZI5sNswY3qZzHB
jWsRoRCXy0Eh76aMS1S6SvEXQQyXSymtdsMVruXqDqbMXQXtF9fPhwa+7un4
U2tTy8T48xHrq9nt9WR2gyiBv21RxQ26uJBKz8a02UR6NpmbSuSmkcI8db/E
v3Oyb2bRkiWWgS/aEBMm2iYlbkvFRa4yS99Zucd54Z2Te4BxvIwoyzFi4vzm
T9Pz/9Dc+fdtPf82Pj8RFwHRFeWtk3+cJW7nsHuYtuB4TvrdAn5vQyr2VMmO
5OxJczooTnqIgT237Sq+k5KupEqo8CFW+eHGvN2j9PHTwFIQW49Q0yeeDsfW
y8mF5yNzX/RPfj1pm3F5L+RMIH/ny917s3dXZu1MKR6w2S0M8iG7FKY24/we
Ih+k5O0EtxgiZzyJyevorC/lCBOMkKH5NMOlgcP6LQwpKz1tv9TdT06D4wF+
mqiqgqLysswp9aCoFCFB6Xolnb41zRqEefgKqD7XWJNh6ntr9U3dp3sKeErC
kiKWFEhUZkkdUKyfQaVUXcml9WIuXSrla5XSLahcrJQK5YxuKJyQiiROt4/n
x+ZGWvoHXnYOvmqb6u6ZHx6e6u0Z7ewebh+0jzpde8Gb01Q4yMcTKopoLJk2
+KJOZQzKvDPv3xc/vC9/LJuPPJNLplQoKaGU5k3IiFCM0RmUy/HGnZC+JaQs
ypuknI2TEsaZKdqAPHDlpwMxNYkVkkQxiGXdKeMsJJwEuJukHmZLISZ/A5U2
KUPY89PpIJv1sZkbUq/jl+ASOETgW1S5c1MFl1Dbwc2Zq9jU8dXXg4N/6mz/
rPX169ERcL8m2+5qKrtB1Vbw/Bpd7xGzCWMyYkyl8jNYZQqrTqK1KeLuqR3c
WdEKfH0ynp2Jy45IahUhVpn0olC1ie9mhY/1m7NEZQnP2ALo0P7ptzOzv2jt
/IfXbZ9YZtuP3eCNq9p/rBt/dYqQ9B7q+JFvnPSb2WTJhpTm0aI9kZmJKBY/
M+YhJ26w7aR6TuZvpFuPcuvR7m6UyhFjrCfYxUDKdh0a3T1vta98OTjxZf9Y
y5Stf23P7k9tMeaFcXssl3YpcwvX1pPSYpgBt9xMiadM5ozNHkDRCNNLHnTB
g0y7wktR/IDRT4QMrI2df17KcGKa5836IRbBkKV67a0fOYBpCzO3Dp4EK1xD
SmzgZxhgfbUGfrJcgC/WN3KfkIO1sa8LAvaAQAKRwPoEJi3zOVnISHwa8MsY
pWKuWi3d31YfquW7UqFayJV5VqAIFksQfldoY357uH2467v2wabOjm++mR8d
WbRMdL98OdDabRu1OafWTnf9rosU9A4cMzgqo7F5lTAb+JWVSsW4NcQSjqiA
H8Q5QiwDeFEqHSaMFJ/jMw985g4R0xFcDKF8Y285yRjuCHPhJT0RKY7lk2TF
j2T9eN6H5/1EAdiLCdU6fpje0BWuglyYArpE5WtEYtWykn1IitUz1DzAMqtx
aeIsOLhzDMn8s7aWT1tePR/o/7JvomV+fyWZ3aTvrWHFHtfBfGZixnQsDabX
wG8ar02iFQtStqClGQTKQmEiaowHWWeSXkQoJ2UsS7dO+QO43yRWnoynF5Lq
4KH7y3Hrz1+3/Y/nTf/SM9S0fQx1Y4GtLsoflsQPNup+BqlY0aoNu7Xjd5Zw
ZiaanYtlLAFhyIUPXqQsXtIREX36+7DxMai9dwu1Czp3gqt7SXY9lLKeX3ct
r30zMfnF0MgXQ0PfWSbHd/d2Eki4/M5b/Hgklecj7ORVEtoK1ArQMZsDHRLm
RkwA6uzXCZi/G1HWpRSv9PKZlNvCxNUEA+wJUl5UcoAfy+oMU789Afg9HfYz
AD9wP4mVJVYEA9Sh7SoFYA+Qa+AHK/xRkvI8n2ncyfrpnsKPYrMSlwPqFCGv
igWQImaBQEPNN9yvkK2AcplixsxDhaFIPpEgo0Ei6E7urZ5N9M70vu4dbutt
fvasv6VpcXpitKtjqKPTNmadGpzecO5fXyaT8fpdD5bIqkxBo7MGnS1rVZ02
dT7PkkY8xiZRhdduBfMerO8mxgcxjVRraumDmHuT5NK+BHsdxiilSEj5BGX6
4qI3KkdQCIGVOFVxxw0flgvR9W29KF8BAn1kzo0boBvCfDI9+STOnSZ4IDBA
m6xe4fRb+La9mOIM8NYbbPjQ1722//XwyB9bmj5rbX7W3fNZ10jLwoEzaqwS
tb4zbPiGmgzIMzEYuwUgbSpZnEgUAL8pvALsTQGQaHEqlbXE9IkIv86ay6S6
yOSXxXuH8DiFlywwr2PqxHXyhX3jX9t6f/6649cD4986NwevIjbMmEim4Xms
8Gz1Zy7NoTVgbx6rjfs1i18Z8/BDLgLYm/KSq5h+Jt3dSO+v2ccLonKCZE4Q
9TDBbQYTizfeVpv9m/HRzwZ7vhofarbPDG6vOb03ByS9joprmLaYEK1+Amry
QpjdSKlQWNbiwkKAnLtKOjzYVpw/YzJuseRWKjuIcMRqB7SyGieXo7ggZ4E9
iHOCkGYYhX6qHoDf01FnXRENKB0CJ4N0yTC1XP0WiVaGydvADy4avsfU02Ma
LsAJQQBkAz/IfgCeLpdMtQJVFFZTKxlqEQop4AcQwohXJRNeqC45gxGKP0x4
PajfQ5wdhmyTa72tQ92vO7tfN335+3+fGeldmp2YHOhzTE7Zx2fskwuxMM8x
JYkvC3QhLVYLSi0vV0rarSEUoH0I3NPBUdoUjBqAEaNNYA8gFLJvleJ7SquG
Cc2T4L1JDpOKcSYdQFVfUokQWYSvpdjbMFG8ThgeNBsgi0Gq5MFzVyn9MqG6
khqw52NyoEtMO4BQHaGvCC0mFcFX4fl9TGE7Ik1eICMnkcEDL+D37ejYJ02v
vmhv/ay943ftA63O49mA5EiVBl3M8DU34ZOnIxlrIg/sWeL58XhuAq6R0gxW
shJFK1awYjkbkZun8msilNz8AlMvHfUdvCRAqztTWvPywe/6xv/xRetve8da
1w9HrmMTIWYioU4i2VmiYifvoPNaU+U5tArsQd4bueFHb9ixa3rayy3E5R06
d2Hc+3Mfz8i7g1h+y6/sBoSDELPpjdoPT8bWVl6MD76wDHwz0ffNZH/botVy
ceAIu53RqNWbXIgKa6i+nFQcQRYInHIlJ8/jC15yOcjupVQXXwrqD165dgRM
BnCHO3at5JDbDx69uJmggL26nopD405uY/g2Dts3NlKAPYDQkE3Ar36TTq/8
LX4AG9gd4Ae+15jCf4tfI/KB+xlKGfDLGrfQQAvZu3ymCvgpMPEZlaXq+4TQ
l6F9JxDZE2RvPFQgyHtuyPWli8GuyVdfvx7q7Prjr/9lqPPV9tLswvTo8tzU
+rzdOjIdDdICW5a5MrifLpQL2kNOqUHjECgYxwZF1s/Mk3yOVkuomIuQOiqW
CLkGSrA5b1K6DDPuuBDE9QhpelPydUzwJNUIWYjz1ShV9qJZL5YD/EA3aOYi
rh0FhaMgdxqX3WTax+VBLlw/jDKga1JPKJUwaYbJtJcp7SS08XNk6DQ2ehLu
WTv8Znj8N69efNnZ/oeW1n9v6W9ZPJlwszD+5pNFAM8ShOCXtkRzoIlYbjJV
HI1mLMlc/RgeWbBTJQdbWhFr68r9PIDHFGfx/FQqPQNNBMs4EoojRH0+OvuL
5p7/9bLjyynH6GXEnpKsaHoiacxR5XoxYe+tSHE8nBkP6hMBHXwP2IN/gD2s
bJG5c+3enXm81u8updoJWtz26ysuYvkisXzun9na67ZOvxzqeT3e3WYdbLIO
PJ/ub1+3W32XK2jUmUytINJKqn7Mb9qDj53BDxuZukjM3WDXcj06QoC8YAv7
SWUjRIN24jRSfiTv38Rzle14amR7X1FgUJo8p7GMAiuwB6ZX38HjVY6VGVpk
GQmuIQcaatbUCqZeH7sNNYJfY/L+1DhgpWkd1EiAeEp8OhFax69hgFmzCgQ2
7kdwtEZiIoEKFC7ANTxPKC7fBHiXl7vxSTce7nA/NG1ZaW/p7enobH7xVVfL
V4uzQxvOqQ3H1N7y/Nz45MnedSoqMXgGS6gMYapiWRWLIDQlJhM8gskMFCK1
iIuZGA2M6Um+GKWzPkS9DLOnfvIszNzERQ+qepLyVVx2xSToF140DWHPhxa8
WMGD5l3J9GXCvEimT+PqYVg8iUmXmOFlCx4mf02aZ5h6nJJOEPmKTgf4nBfT
rpLKJVXYRtKWK2rMhY1fxNqWdp4NjPzq+TeA3++bmv+tua997WL0hgbkHGhl
Jl6YiubAmmaRylS8MB5LT8Qzs3i5YXpzZG6BKS3xlWWhuiRWJ5BsfeCmMqMR
ZS5lrJCZ2QDevXn6+77xX7UP/K5vonX9eCZEzxNpsM36nTWsME9W5rDiSFDp
vqC7zwnw2zE354iby6nMDl24UO486cdro3JI65sJdtVLz58lrbvuqc2TsaW1
7qnJ1wOdL/qaO6d6e+fHhjfnp85250M36zi6xjCrlDDlxiYuUiMnsbGzxJyH
2ER0YDiY+3jK5I7I9E5CXgmSkPp244JPqmDldzEje5RMTO7stVhnXo6Pa2oO
ei6wx9By444bRD7AD7IfgAdJjKYEwE9V0k9HsPKmWfkJP1ADPyCNojQQQSgI
IiQSbCrFN34PDqouDN8GeECgJhU1Oa8rhfrhE0oF8NAkC8IRvn5KkDYDUek6
IJ9dcccX9Oklc3KGrq2eT07MtzS1Wsb625q+nBhq2l2b3nJO7q3YnNNTS3Pr
ITdGYToSFwlEhZ4rCXlZKrJ8FnyP4fNa9l7K3qdY05fi/YgUwHR3QrkIcadB
FnjzYaYfz94ghiumXMFITaXB5VxJA3i7QXMBugIXxxEVBPhdIuZ5ynBhGT9f
CgjlKzp7imrAHhDookzAD2i8hq9ExUMss5nKTLrZSTczfh5/aVv/vGfwF8++
+qKj/TdNLb9q6evYdI24aUssMxYwhv36ZCzvpB+XuXdzWHksag4F5TXlHbSG
WSIL+DnZOn7zdHYGS48m82NYeSSeHg6IDsTYpNLj5/5Ph6cBv08GLM/t6yOu
yHxKn8Phm0vTRHUibs6kctBN+q6Y1sNk13EK2JsNKcfymxP57ly+vVSqF1L+
mFY3IYz5EqPbZ0MrB/3Otd45R+vEyMuBjqah9k5Lz4hzwrJpX/dfejXRXywe
yeYCxtqTwoyXmvUwzrC4RxUulTvQIZXbTMlrEW49yu4h8jmb9cqVGyF/jMqb
wdTMzu7IkrPXNts9N9U1OwnRq+F1P4a9p8ILAvzA/RqWCJHM0AumUTSMoq7/
OHzT6dtM5g4IBIsD8IA0cLwGhBgmAYTgh/C3MGef7nxVATlgDwiE9gEVGFxR
ZDOQDOEiEaGxpEDjKoHrFzfkTVDxBI1TF7ezj2xuhdc3btZWjwf7h6Ymhi2j
nZ3Nn1uGmtYdo7OjnfMTIytzy9tLx9BwQz4MKrYiFVFcI+g0wWVpsSCZD5xR
RdgsRDKIdq4wcx6k3SktQGTA4gJELi7WImz1GklDtPMSeS9R9FJlD1m6TGXO
nxzPhWQPI8ppwgjwt6BLNH2FZyPaIxTbM8jqINy45rIesQDrGaHBOL4ksitB
cewCH7+pv9Fjl4mWpb0vBkYg9f3+9asvevp+3T7Yt++dCIr9PgmmLRTS6VRp
LJIZDemAyjL/sKm+29Y/rCsPi1wFYp6DLtjJ3CyWtqTMcaw2kqpC23VS5QVE
G7kIfju3/JueUdAfR+ZaNs7A+pxEAewOouMsUauzF9V6r8hXO6GW3YjFx28x
tQvjo0t7c60/Xqv3F3x+N8U53eHJw/Ohzd2BtfWxrfVep/35YNeXXS+bR9sH
5oaH58cs67bDqDea0b1GegNh50K0PaEu4/lz7e2V/vZcvNtGM0sh3uGjnT4K
6sYplYWiETYh9ZUOksLCVWTm2GM9vOiyzrSDgwx3t471dU+P6EqmkfzrPffp
hHPjsEFj+Dbwk59OtmhaXtOKjS2+Rvlt7Pg1Jm/j4HqjfcBXGr8HV+/FUi5j
VHLpGqzggYAfmCGkMpjIjRXwq/92JKYwhE6RZiAk3QTkiyth/4jc3Els78SP
jxPXV4md7YPpqbE569Do0Ou+jq9sk11L0wMOy/Dc6MyabTPsTkV8aDhI8FwW
ei6nVOO4jnI51nwglHII10O4Cut5kLpOKOB4PixznTQh0QWZqgcvHAcVH1G+
QvOXqewlmjtPZQ5jOugkZQJ4Dfz80HyVN37xzi/WwurDcVI7TKrHMMSpzA2f
u+Zz55RxguunmL4XV+1ebsxFjrvFqYA8fBZvWzn6vG/0k7aO37x89Xlv3y9b
+9q2XMM+djCgTCYKUApsxC3UWyuSd1DlVfEBwNvU3qxKd8AegGcDD8QzM0i9
xlqIh3HsYQar2LHsbJDu2rn4fML2y87B3w3NPHfujbmRFaq4Jtw7qNs5vGan
atZkejTA91ygAy7ckUwfa+9c6e/P1DfezHtf+t2NXN5LstbTm77V7S7nSu+i
s3XO8myw7Q/t33zZ96p9urffMTzoHB9yTnoYZD8Wtl/eWE49C0HmULy7zPz1
Iv2XQ+F2LanPXOEWyIph4VyoBDNvg5nHUObxhNI3QiTkvXNS2U8wY7unz0cn
+2yzXVPDzSM9r4c6mke60mpGV9MgU8+m9Tzovw8b1DcAeV4XoIk83eYA9mSt
0CgXgB+sMHbB+hpbLg324Is/9RH42/rxEs4E3wP2YAXwQJADwfc4qr4jnYpx
aEKo/+olqsAApYkMimWCYfXGLbmuhLMz7uSU9HhYDFVTScI2N73omJqfG+xs
/tPEQPOGfWzDNjXZNzQ/blucXfG6wq6LUBIRw0mB1WopvoDJFVK7i7M5KBQ+
REkw9aN6HkT34hkYshdR9SqR9mBFVyK365NcSOEklj6IGocxE7QXVQ/i+gmS
2Y+ooOOE6SKKwF5IefQJt1dMaTcqbkX4g5R8xeU9UvmUTh9gKugYM7bi6kJQ
mQ1pM+E0VNrB00T35iXg99vm1l+/ePlF7+A/N/e+WD4ecFOjUXMyla83U/rW
TlUW6MqKeLsm3C6z5Q3pbgWsj8zb0DSUCGgZU0l9IpG1EG8mybeA1kxcHTgJ
fmvb+M2A5Zc9Y59OLXcc+iANLrM1G16aSuSmopnJiAEeC9/pQNKLeG6dKu3z
d0fiXf03SqjcblJZdCfHds475leapmZbpq3tc9Ntc8NfDbz6su9F60xvj2Ok
yz40smFbdp9uhHzbscQeyh2zuUv54Ux5v0nc2gMG1CtniNuncmdi5UKsnoul
Uyazj8v7qHApmF4lf5CiJ/fPmq0LLyxzLTO2Z92dz/s7m8cGuq0Tw865rJ4D
Zcx8Nl3IpUtZs9g4u6Iq2af7axnoJg32VKMEauy6NPZbgLrG4eGG4wFyYHcw
kYHAxmYgSBYy9bEr5+tJD5FgwgJ7MH8lDkqxgiVFGtegMkBsA/xErsSSRSSZ
RhJ5krjH0FooaIbDCkVmaEpaWlpads4uzo8P974e62teso6cbS4vTU/bx6cm
+sZOD85vbiLBKBkjVUKpUunHlFKNskUIeMd+Ooinae2RUO+v4iokvauEcRbV
ziL6RTJ3kSgcRzPH0dxe2NiNGAfxzGEiuxc39iH1oXBtXGD5S7xwhmTPsew1
W3bRxaOUsR5k1gI0dDq3WAIPOcS17YSwl1IPicxm0nDGTUcib40Vhq+57v1I
58bFZ/3jv2sB92v6YmD4n1p6v1486HMzFrQwgeSniaKVKs9RRai30C+APQeR
WxdqK2x5gcjNIWlr0phOpmdSGZjRU/ibOeb9An03FRBer57+dtD67wOTn0w4
XqyfD7jJaSQHtWXAKw26+RGvOOphZiLyMlnYlR/2pIctsFYkDWa1kdJs16nx
vev2+c1XU/aWKVv79GyLZfLl2MB3w23PBr57PtLSMT/SvWjpXbXNX5+d8bTP
zITzd4Hcm1OhshRWplz09BVn84rHbMWTfhsqfu82H064/BGTvhRzbq14o+TO
aXk9mBzbPW6y2r8cGgV9PTrWND01sLK4cHl2lIxdM2TOyILyZq6YKRRyZYAQ
3O8pBGbUJ/BAddPTCgqM2v/ebQb8AC0YuJD0GlsuP90HaZDZMMZ69WD0xj4z
Tchogm9kPBi7Mp/n6bTA5BShJDJFCjU5Mmcq9xxZIBHwxlpa/cGQfyCxSiph
An6JGHVwcLSx6lycn5yfHpoc7LD0dZxtr59trC9YLNPDYxvL6/EEFkE4Wq+g
ahXY89NZaBMnIf4sJCTYCmu8R4RbqBhu1HRjWegUJyH9OJw+ixXOk6X9cHYn
ZO5FMofJHGgrqq2H5M2ICgbo5mqgo6S5HZLAEo8R8yCpr3hpIPAA1a/FypVY
3EeVjRi3nZTX44ozLIP1zUaz40Gz+4xq3vS3LJ9+3j/5h/buP7S0Pxse++e2
/hdrp8MhaYauThKFGbpopYuzZM5O5xf54hJbcODpDa68zJT+G7/6jWBoJXby
3s5+WBa/X6ZvR6/xL2c2ftE19uth29dLR71X2HBEHYxmOm7Ejkt22CvORtS5
iLJGF1ao/AZbOlQezrS3+1wZzMpyFhvYuuxd3m+dW22enGuemHk9OvZ8oO+r
3o5n3a9ejXX1LUxZj7d2EuErWbox0+da+iZT2WVNR4iZdKVmb8j1uHYh3gVz
P1zrD2diaY8wtlH5jM3607fh7J3fLF8LhtMTbJ5zfNo/+MXA4Mup6Tb7fJvD
sRQM72LUjZaOFKvRUg3Aa6iQzjduPUD2g97x45nn/565kpqXYeA+4feT9TW6
BqxAIIAHZQT+qnHr7cdfIoMakuIaBEp8mv3v/w9GMsqA9UHYE9m8xBVYIksi
Rv22hVDlsAydMni8oPJvVO4dg9cIJAf4Bf0p943/4uRwfWV+3WmdGevrb3m1
Zps5XHZahwfnJsamLJO+UDRJS2zmNiGXAkzmGlwuZUKtCJBl0vjAGT+E8IIf
zwfIoo8sXadyR8CbT9/zm3uhzG44sxUyd6PZ/VRhN5FZDSlOL7voYffi2jkE
bDwP7C1eEStueiss7sYUwG87rpzRORdfOoNxgypbCWEjKcGbO+cXJ33KmE8f
9mg9l0z7brh15ezT3onPuvs/6+r5amT8l51DbQfu+sYdV51mS3NixS5W5tjC
PJNb5PMrfGGJzq4xRcDGgWfnkhlrImtDSgvUwxL/fkX6i5N9OxtNd+4G/jC2
+K89U5/ObrQcBnt9fIdfafVqzddyr1uaiRnreGGHLqxS+XWmuCvUjuTbLegv
HqJ/x9O+dPxyeq3Vtt5pW22xWL/uGfi8tfVZV9t3A12g+aPdGxLzSIJHN335
yqlWcCT5CT827kNtYXabzrjUO69+71GrYPv102Vs+kavBfOP0eLbQKZ2TMnL
wcTg1n7X8trLmdlP+/s/7etpnpued12ckPSlkXdla+7ig6f0eFO4LwB7TwYI
AvYgAUINgd7RqBumCQ23qhlPStfMp8HaiHaAWePmGqyghvWBBzb2/Rr4EYSS
itMMqYD7QQeB4AedF5JeLETFQgyWlGkszeAZEFgfTxUFIsdjpoAYIprj0SKD
VkmkjCUzSEILB/GAP5KKRS9OD1bss/bJ8dGuDpDTMjzd3+mYtgwPDWzuHhCi
kRQyYS7rJtMu1LjBC0BamLmljO9Z7YcgVowLd0Gm7MbyV8nsKcDmNzau5WWX
tOkz13zqZtDYiWcBv42ovhaWN6JqfQSnsmB9W0FxyU05rwkAbyPIL/uZYyIL
1nfG5vcxHbSHautx2RHkbSHZ4pV7XXy3S+i/FrsOYk2Lx7/vHIHU96fefnC/
X3WP9F9G7Ex5mq0Afna5tqjdL0jVBa4A+C1z+WU2s0RCWsvYIfjFzZl4zoZU
Fpm36/JfFtkPE6F083boc+v2J6OOz2dWm3euh7x0yxX76lpq9pv9sTJU6UWs
uEvmj/nyMmbWCaRyjpjUexD8enbn2eR6k327fX67zbbWZLF90z/0eXvHF+2t
L/q6W0eH2sbGdtzeqJZ2sfJSEJkLEtYIOxagdtT7Xe3uSL87M2pHnLmTYvYS
+BHGoXc/EO//L+r9/x2rfKgfY8bF1XDKfuN/PTf/9cTkn4aHX1mnLQc7O7Gg
m6Pdmu67/Xh995er27+6avW1YBRyRr4e/7QssAdFWBbqp0Z1LZ9Olwv520Lh
LperK1u4z5ces9n7xn3exqGXxm3fRgtuuGIDv8b936f/o4sEplffY+Gfzhvw
OZi8YIDRIPG0I62DwADT2h1MXpHMS1haIwoqUQb86GSBSOYTEc3voeJRxuuJ
8KwQ9vtsU1NO67RtfKzt26/nhnvtE/3rzjnLxIjVPi+Y+SAhRoW8t45ffdvk
PJF2xbKR/5ert3xuLEvXPefLRNyYc/s0VFdVViWD7XSaWbZYspiZGSzJtpiZ
cYuZJcuQUNCnqw/emYm5X+bvmqX0OR03JuINxZbthMj86XmfZ++13pVdxMqf
XYlRpHzvSPVNwcaywl3QfEVXJbouxb+qcAGH9oY00FNGBorYQJ0cGvKTq9yN
OTUxxofa6NIQCt2QwF0Qeks8d+4iP7TV5rp0WxYuAe+nTdYlAD9nnuapoK4L
25r4hjaxZ8xsyZxvSKI/7528gsHewI5fIZC/P0aibFFG6QaXmeIyPYAfv3nH
rc7ZhREr1+NmerxUlx1fLmmmhpvEQGu51iU+YRYexPVf6bHJvibyPVbyu2Mq
UL9NoRF9HQGJY9ec3rOWkOEhB/osq3yS5CaKdFtf6KuhPi2QP9W7t0Xm90zN
O5JsnazYZ+pE9jRWbFxDEZ/vH709OdrEnGzjjjfQx+diieTarfIlOLYg+Toi
iNd1zQfD4Ccl+BvmuvQIxI4VZKnSBdQIDMe5jz8nb39xdReGXF0WyYmDKY47
iFBoV0n0V7jztwTSNptDNFxo4klXo+Xv9h2dkWXwUd//om59ktfuJOVFrzFq
VHtVqF0rg+Q76LUn/c706xOx5RJ6EEa6nVGvOwavnfaw3Ro9TsPrtKaP++Ma
tWEF6mbT1WK+CV5zmdrjzIR8tp6MlxIxCCTcGjSuFPvA8oH0Af6UXLrsdvjj
kXQuXQJ/br3SXW7HyLVLuU41PwC610jN8qFu1FXPRgbZ+MjvLl9fxsvQpFTo
+n0x8AutpqtzOAp3eoY82GMSUCTUEYOIUcnEFCpdpNTn6kOjO2Hw5kHnVTpL
fFNK5axdxyfWxNwWnwSh20Bp7s2P7MmOOVrXByoyR4FrzvMuy3RjiWosC1x9
feb+uvaLqfygzU4smYUt/3ARn7IseYwqRDSlgPEWhxuyeFNfGJqgkS7dVESK
qnBRG4WWT5eCTZgmsi2PAOnbt5Q2tdFtheNQon2HQq6cHaye7T2HHfz3Axje
nycWFojsnFCYUIojBpC+wpSZHrESA3asD7SLmxiyEiNqZIAPdQjJCbX0QITu
ccnhsTGyytL94Zj2+yPyBltHtibongL2MsGLd+XFuaQwZUUbnFhVXRpqSl1R
LIe3OU8Npi2BYoUq/UBVnYmdvKuiLtgXXWb3SfIft09fHBy+Rx+t47Y2CB/2
GCdEnYZz7ZeFsup0Y7lQuXEjK47osRrKkWQkqqraxNxfOOef/Hdf3LOFtT0w
FRr6JKSKZMTe6LnBss3iv8SdP0Pjf0QT9kUKljusylRUmYYkXhXHapJkS5wZ
iDIjYXooSA34yT6Ipcu2WOqAV8BhuzHstsaP+LWBMLYHII88Vq8z/ErjBOAH
IHxcL9qsjwBvALb/HJmSqgAOoWK7kGt8nZoFoOrVoRkgEAQNgF8xV8skCyF/
LJcpAplt1rrN2nINTCHTXE5oSXTSvmY20A07qkFHJRMbZhKjgK/qduaj4eXO
SqczmkpAIW+ER+edozDH25tne+/xyD06AclhUohkEo3Nt7jC9nDxKgw5k30g
fXIHBIKtITzUBvqGYD9Qvg+VF4HS1JXvXyUa2kBBcJmkaqMcc4lmKJL1EPu6
LY/MDPl7fWGhTY9BR1Z6umJ7g6CNI+UBgjnFC9RE8eV+InWup8v3NJmmLlW7
SDcugABGavSrzJkmuquMrSuja6r4oSWNsyXxBuvrs+M3xx9WYZuvzvb+jMSS
YhUS9AmZv0MmerhUF6QPRm7Kzs742bkgPQNF9LUBe/TEjJZb0KGPFOjhNDHY
deQ2ZdfPsLw/HJFfEcQItZfjg5Tp4UX51ly9vW5+NNUXWmikKfWV+RbTnz4z
XG2IpG9orOd4+iZbSb4IAQHXBjsqd32PoHxzQn2xj1xBItfxsPeEvX32MVbL
4vsCgBZ9aSBJNWne7PL5XRjiJRtXwy/22S/WyWdTZ2FsjPW1vrrUkKWLAm9M
6A5zbT6cxrhOZX1/hlpudqPQT5QGjMlOdS7bN8Gewl+nSI4iE1iaeF+cHMgy
E3XxRl95KAFaQFsstr8SuNRAwAOA8H/Fb9AbP9ZyZVRnAth73BsCXgF+j/u4
H6cMPQ5q+/vUF6jYBaaumBlCuSEIucsby/HlGCLA4eMNmXZ92qxOQPMFJjAR
biSDjZADCtrKbnPBZy0ngv1osO1xlXz+cjBU9foKblcin10+IjTqzUwK42R/
Z3vtORa+w6HiaGQ8hUIiUOgMvjyQqnpTTX9hbEsNL8Ldi9hQE+xJXQ2lp3WZ
6FtTPVd+6IPG3tLIlu0ZQg2Fp6709iSuHtfa5to7QndHHFzeP5EG6/zrkszZ
ENmrVEMSp4lQrVlRpCVL96Sp9te9bF1ttmPK9a+LI0umowNWzZLCXKSPDalN
VRQIICc1Av0LpTK+PTt8e7S+crr1GnH0hkpnpurk0j0iuziLdFGxNsi/tPSU
nV9w87fczA07NTv3tcjRASt7yyl/Ypc/ETKzXSf0Rul9y9b96ZT6LZyJ0vs0
uZGldmfv/By6/Y+L2r2pfgdKB02E8dq5NbynsKxxVE9w7PcsNUrn4fmW60/E
ngxF50bytT/sIZ/swd7C0UcsNkYhIRnVEr/dUoG0lb4o26P4i2hrnODOSvM9
2/jn8MO/+Rd/887+Yu/eAzJliYowXOB6kyxHhGRyoNXmY77yPYX9EkN6Q6Ad
iJWEK5c6W1Xl6vJsS5xqCuMdcWakKd+bWr86J/9uH/3zdf9vls6vF81fQCwF
+AH2lh3w64agSulxLWi/0xwAxQPUjQZTUMP+ZNibNhsD0G2B3IF6nIsFuvBj
/wW8Pe6be1TCdLK8HO8TbUQDtWigmo41M4lGMlrNJJYzqaB8t1oa1UrTcn6S
Tw2S4U7U34r4mj5ryW+DPFcln70a9DTt18Wrq2wg1Ehnh7FkOxqvlsrLAUFe
T0gikp9j0Efb7072Vlg0DJN2TmeQiVQaikCzuKPBfDtQHNkzA3NieJmZaSMD
EYgVvpY22AK8XSU67tI4WF/4Gwtv9c5TfrCkbkzxW214Lg8MJd6WxFeXhiry
UFUfBj16qAt1BfYS7TINrJ0o0gAREoRKRbanyQ2WO4NyI3N+bM4MDem+KNBg
uiog+ZL8HQn06Xr8N1G0/J5EXUPBVk42Vs+2AX5bAhHAj5Cbw5MzbHJynhiD
9kpOz+iZGwAhOT48D3epyTE9PWVk58zcDTU7QwVbGxeJl4Lrb3GCP8JpwMWB
Rha9/ffw3b/b+79etb9oS3N1YSpLD5i+0pHS/ooqfUmVbgouTuRemrWoSgzU
qQ7LFgacvEbhnhye/O7D+x+OD094fKk3cF2smXPLZaUcbxZuTSA8BWqio2p+
dN/+W/TL/x28+xfX4IupPAZOY5mzYhWRL8u+jpD0bpzKdiRQr5K5P8AJz9GU
Xa6MfO1RpCBTrWfrzq+7i8vO/WXvy/XgnwByrul/uGf/wz76V8Ceuf0Xfe2L
pvzxkT3QeYEcgc5YyC43CgEZBH221x49svdfi+GnAL9Gvf+4RKGQr1UrnVZz
OZYN1ONUXvDdUrGRTBRi0WwingfRA1DndxXdtkzEXwEoJsK1ZKQOJDGbeKxe
KtKNBzsRbzvkXpbHWg4460FXI+Bu+Nx1iyV7dV2IJAax9CCS7GQLy11CpXI/
GMkqFAYajYZDHX1494SAPeayiHQakcagInEEClfijJfcmfZlomOIdczpqS45
lQT7inDfEBtoAk1doGZKtK9zvev80F6aeaofgbszJ+5AGeNzQ3x8kepfFfrO
8sSaHlrTo4tYV+aBuI4sx138T/xyA1V+oivMgD8E/7mqWE+fHJlzc11msty8
lpoaW79Yx/9q6X6m2kOv0dj3yON3xx/W4LsAv1ONjp1uAEHDJG9I2Tty5pYI
5C4xwcfHy5EXoS7c32IWb2m5OT0zo2XGpFjv1FZ4L/M+Zej/Dxj5HUtFcaZN
zVv//J8903++qH+SZyf6yj0v0kabE7tSwJ76R4L4g8CENScViTtxcMqwlhEq
1w5L+gqHfwI7+PPh+ioRvs0gIOQSxpVD4Enz3SWWtUy4KqP9bUrhVj3629Xt
/7ic/Kav32oLA222Zcq3L1J1TagodqboRh9aYjlianeoird47ks86x2Zfyg1
sDxxY6XnHNw7Rx9Dd7/5bv7qmf3mnP7NMf6Xq8HfwD+IuvxZWfooy98JUzN2
ZEDzLzvgo/0DHC4nY3xVP9CCQZ8ddCeP7E1G8//Erz9Zqt/XvUi1/5pvANLx
eHQ7mz5MJ/fgbTpVAgEhGEiAC9CgQWONBWt+Vy7ihwB4AD/wFvTZVLQdDzXC
3kbAVQVC57PX/Y5mwNl0XBUBeKC8rprbXbPZIYenlsjMbC7I4SunC6MsNMqU
uqEkJFOZaCwug4rd2XiJgG1xmAQul8ri0LEk0hEKr7x0X0WXK6NUgZoq0lXE
hpLwQB4ZKQNdkQMS2LJyH6QJV9WRKuDzKjs1JWbmxMIUvwEcgmZ9lRm6K+NI
68aZGwAJtcTb6lBN4ock4Zo6OzRUbtTFmTI/U2QmsvhQ4G/xvQ1VdGwp3Osy
M0ViaKx8tA3/Zmg8cMMQWmPZIJHfnOy+2F9bRx+8xcBJVhcv16bkZqT8R1Lq
jpS8PY/N0eHhWaB3Guwgoj1MfEgp3JCzY2p6xMiMyOEWzBR7wzZ9i5N8i+fh
7BFL+/6690lXBk7vRgvdAvzo3uqBwvuCrH5OUn3gX53qAhRXQRjtsRxdxnUH
p0vusPQ/Igh/Ojz47mz3Jf5olYo4EDEwWg1ObyUYwhxn05D+y1Xn/zHf/r+S
wb8woTtKokcNVljB4vJ+craujeQljghT78BLLk6Yym2CaB0nXCeKt1lqtN4t
DJVATrF17pyjz87RT/bhF+f4l6v+T8bmR031XgndS3JzbmLMCPcYwS7V1yK6
apjrItyUeXwaC6QPmMBysfmYf4H3G/Vn48EcgPdYAD/AHhBD8C2QUB5DyuNy
5U5zNB4s5pOHxezTqH8D9DMcSMbCGQBzozqol4cg0maTy877WEAP07F2Jt4F
+PmdFcdlzmbK2c155yXkvC5bL/NuB2S9zF5cJOx2yO2pO71Nb7hj81Sv3KVY
th9INsOZViTXlBvtHImcRMac444O9lbOz8/EEg6DTcGc448x2HOOyOBLWDNt
mQ9i2wtsV5Xt6wiDA66tyjRnOdcZRaAKrJoC4BRuGBPLIcl6AKevI3PWlW7I
GKm6Ct1wYxqpzX3QdGkR403gnZSJlr44tjQf9JVbWWbMD3c43ibL2QD/fcrw
zJL/rE1P5fGeOj83VG5F8QbZGjqTKNfxuOf7GwC/XRJ6g0ISRNOiUp+cnVLy
D4TYLSl2iw3Nzry9fVf90NdAJ0fk0h25eENIDQixNjnWInhKh0rvS5L6GwR3
T2XlJMoX7TtVecyLt7mxFivcJDpLq2zzK6ruNU2/JbJhL1OsQHW5Rzjaw+qy
JEMBq45sMtR/Pkb/4/7+M+zpFo/8FHt8qpBIIwlzeWyr/+xs/Yez8T8tzf8p
KP8FFxsi3OVzfxkkaF4ox7IHaMZrokqP4EkOqNwtAmv9nLVGYG/SZYcCI8OZ
VqTb1607W//TVfvB3Loz1m/V5RkrXKcFahRfleytgSJ66ueuOtZeAa74xJg+
M+eQV0Xw9nEpFGCvmGuAngug6nemg+5X9oY30/Gy/o4fiCHLBc/V3mM8ARbx
sVODpAwKEAgKMJlLg3BRBjCDHwDVBP6w0n/ccVnMtoAelgsDkEeSkabPWbCa
khZ9/NKQuL5IWS2Za1DXOY0mJJG5zZas01u/clSMl/lIeuICapnuWwMlV6wa
hfoaW1hquISdHbHZ52vrL/YO3gP88ET00dnxGR53gMJp3CEPNJD5iwRTFGdJ
ExwVpq/LdbW4trLY2zBkRubCRBVrSQI1Wagl9jQF9grzIsvQpwSXKX0A8pf6
6e5dtv8xXL+xF4eGZEMeKkvCVWW6qy3PQMsTJ4c0Z5VkLdOtdbazrQzfXOQ/
GfK3X8d318XROtAEjityKpR+v7cN8Ht9vHXMohzwuKpcVVQcEhL9ZduNLkiR
BT40O3G1t6zQnruKSY2ZjU/0yu15sosJlLHuAtIS2xVevj6XPkGySc4kLVQA
aZQaKNADFYq3dKwLvqDqvsdKN4W2c2uOE2pywyD2VijOPPEqBWSfZEyukZR/
3Mf/YR/xEkfcEwjgWpUwElamc7pcU58bmqGP9sa/mqF/kSW/YJ0NuKOEtGcw
13GU0QmT6s5ECqxUeUhnbhCI77GEdSL1A427wRYfyAwIo1OVH8hzPWGsyQxA
rGAZfBzYkRbFW6b6a7RAnQk+ntHhckJXbMgID2jBHjXQ/XuRfY+Bt/vYggFU
QMqGvfl0dHczvQc1n94C/AB7QPeWN17ag1q5VcpXK6UGyCYARahQq0JN0KkB
q6CAOQSBZblDs9SoV9ogPterrVaj+/gwBUgr+P27zXmzOq6XJ4VMB3Rk53Xi
2hS1mmMua9rrXJ6LcWXNuL3lSKwTCLWuHcUrJ+QOtsKpsT/W9yV73lQnkO2m
mjfRytjii4k1yqOzAxwBcQTb2dpdB+pHZlBgWAyOwTqjcS3xsjxQEIcbDF+N
4KxTPW2ep8dz1oWehjLe12UHiniL7ysz7QW8NobXJkiaJMOYlthyxlDFlW0F
y8PM8FOy/ynQurssDZbPNcIVeaYLPuBL6Yt2AX7Ea4hhawh8A1VkoU7cGAt3
kliLF4CW8wHSNZEnAuMLXsIOnx1sreMQuwyKtdbQQj12qgNSBi4yJoSm5/4p
3NU7tNUPnHVEpI/PTM+zE1y8TYg18T7o1BTeElpWqIpVgnSFKEFbggRPihYs
4p3JXYXzJV3ziqpd45iPVH6qu8wPt0m2PMIQwl3GOD5IFK7idO41kvCPe5gn
MMKhUMt2RgFy9tbMO/hob99dQFNFosv3N+i2MslSxJsyMHXwQOHaEZg+sBXA
K+5zhFsU+goa9QoJf4NBvcbjXpGIb5isTbn67NpB8MVJngzVV+SE6vxER5Re
Dh6UZCaizFhWWIhBhI8MKN42wOwRPKKnCd7SAz1maMAI9sH1410XQODXRciP
mx9nk+HtbPy1vm6BBK7vcTUCAAmwl89AgDqAVqPaeUQRhJTpaAEKaCZwjIDA
rzf0uuDne53+oNfvdwftJmBvAPgc9W977RkQw3y6mYpVosFS2F8Ar4lIJRlr
xBPtaKIVjbcBfr5ww+2v+0KtcHIUSgwD8UEoOwoXRqHiONW6jdYmllBKfXlN
ZNFP0XA4Dn50dghDnhBpJAQOg6HSsGwBU28DqiUM1iguCHz6BMmFODgW+nri
YAc4NFWqL4422d4ywwlRrooMa5XvbAFzeJEYOHIjLzQIVMe+ysTfvA12Pzmb
t/rCUJZoSdJdRW78dVx8iwoU1dng+7qS4FiXuLOUftIXbsXRtiBYlscrqniB
YbHuUilPD3dfnR6s4ZA4rcbZHRtbc1FpJqh8omYWpNAM7erBHU18aATeUnML
Ynq81L1gBe7MYh0ZnC25KzQ/Q7I/EGXEi6Ak1ST7swda5yuW6glB+oalRxij
QPHEyQEIGgdyJ0LrI1zGcRdBhMaFUFtXyMynSPQf909foChks9/VeghPf7M3
P6nTI1msz/fX6Nbc+UUErfWDbHKmsG/QVW9x/Nco+lss/S2G/PwU+fTk7AUC
8QwBX6NRDuWy0wsDyuEkxeK0XJ6RLQtzHXFm8LVGohSoiSA15icmBNAX3HWS
uwmK6uuwoiNOdAyQe2SPHRmBYoWHyxngX8Pv/w+/RzV77Lyg7QLdAywBKSvn
q1CuUoeaveag2+iDi2alPeyMRyCn/FeBt+C74OvVYq3Tave7vUFvCDgElAKd
BOy16qN8uvG1EXeqpf7fdyF1Wjed3kOjfV+ApgDCYLgeA9E4M0lmp95wyxtt
h3NjwF6gOIrWZ+Hq2BLNXXgjkgvTIQaDpVKQeOz69gcsEYclEWA4PIbJOSCx
QV7j+crLe56RITsykcUWsvBUGhmCyCCKdzjBGt1bAb4dOENBYCiLzPTJ26vc
raN046vMArWZOd21FqfO+v117Ra4PnmmD/ATpfsqaAF6HNUJMV01oa+jikyt
pZ/Dw//Qle7EiS7ovOp0Qx5MYhXqVQz6x4OdNSzqLRYLvJZ7dH/RuRdXbwX1
L7TsLT0xx7paCEeNEh3zSvcskEdiHWKkgXLmji/8h1rnkcq2zlS+wfOR0it1
ooG9DG3JLp9RpS/ociBTZGeeG6qDIjtyGGMIbfATLGGk1r3OUPyIooOs8RyN
+u547zvY6T5PqoiWvf1frbWfJME+2VwkGDMYbRQhdx2LTAcCzR5Xts8WH9KF
a0jyGxj+PZr0Dnn+/cHJk6PTd0TyFk+IslzTw1F6Ms3MF/n1FrvaomTKrHid
HWkwQw16oEbzgWrQfC2at8Pw9zjhEShwwQgsW7AgMQElTs9BiVIz8CrNLh7x
e+y/f2++AL//NXoA/EDnfcSvVe2A6reG494UYNaudQGEADlwAapT74Fvga+D
i0qhlkvma5V6q9FePjfpjLut5S5LwFsp1wa6l0stl10B8AYdQPv9dPQwHX8c
Tb4MJp9rzZtkphNLtnOFSaF0AwgMRrv+eDeSnwD8vLlusDwK1sa2TM0Uzqld
QSB0KArjDHf+YXf7BH4G8DtEIvYx+C0slWsNs74+hwVSjzAXJZE5EEBRaCiM
DIBoUH0ViqdC87eFiYUotpDEbpXxhSE9txZv3NVbX+MOBBNNYnmalSLRB1xJ
Un1pbiTLTwF+ktSQBf7BrUW+q2ZIzgKtv8an/6eh/AAaEPCHhlxT7Amd8vhv
EacvT48/kAhvcQRzrXvdv5dXb1i5CT1/iw0PAHX02IiTmgjzC2F+zox3CR4I
eRWHGfwwnXtXalmjy1ep4gO+Dqm4Amr2ZxQTsAcIxF7F2KGKMNZm+spA7mBK
F9OVFfhLaJ1rlST8AU765gD1u+2Dt3jUH/c3niIRRLNNnahx3EW0JoJUxk7E
AZjIeyy0HfIu9tmyLTrnA5m8QThfR2Be7p482dh7vgd7fYZ9gya9p/J2hRpW
KCuHeqrmhAd1mcUWrz7i1ob0bIOb7HydbDmUZqfLYcKFe2XhEygN9JOu8gu4
EMRn7HCfHx8qsjfqwp229EmVv5dnForsrbrw8HgIAui/QP0et36DEAEIfMTv
73f8/t58B21A12jSn04HM3DRqQP8euCiVW23a51eE6A4Hvcm/dagVqrnUwXQ
poEJBOANujdA3yrFfi7VWu4MCpQT4eVCUyi/3AQHDCH4gWH/tt9fDMb3nd4t
VBkWoWGlOofKN8n0MF2YxjLDRGESKY7dmba/NAjVJ26odxGtqDwpkdlzRmHv
I7GHCNT6ztYJEg7Sx/ohDEbj7lJFRGNIEOnS/F2YLsNxDziuHsfT5fjbdH+d
5CkTPVVgS9jRGTe6EMTuZIl7bebOlFtcFuZXpRnXUeZ5Gzx/k+Wrg24L+oss
N5PkJtxYR5GbyhNDjgsSe2vWwm2o+auz9pOmeC/Nz5S5vjpZYVjsu1TaGzjs
LfJs9fx8jco0NUfq6pSTGZLjQ0J8gvR3KLG+vPJg7PwsLwKn1KK6ixhz7Fju
gCnsJ3LrDk+3QhEBnD7QxW8JnG9OiS/IYpjOy1pO2ygBg4c3R9ne0tK/+UpM
R/pMZnmFY353jH0KdA+O//bw5Nuj/T/sbr3Gn+MMlxRLYJdnXCGpt9nmDZp+
k67bZmi2aZINMnMVh38Nh70+OXy+tflsc/O79a0f9063qQLqZVAYrnKiTXXt
4WL4m2H4m7j2wIcW8tYXVe8nRf1eVpipyzeGxidz+xdr97frzt8uW3+zNH9T
57/ooV/15Z9V+Y+ANPDPYqr+ZGn8pCs+qHO38tRMkZ6Di2yq8vcHH48LAL4O
HxgDk7as/uTxfsvyidvXx76PdAH8HtlrVoAetgGBADxAJvj6fHRzM16AnwHf
Ba15+Zw326qWBiBrlLKDRLgR9pUj/moi3ExFW5k4iMMdoIGAwHZ9unya3Bp1
+rPe8LbdXbRASGncVKB5Lj8uQnOAXyQz8Gd619GKNd3wlHrWfNsQb4pdWV0g
h+cr91DncDxxZWNjfWsbT6YB/BAMwdN9zLHAsjzLLDo5t9XJl3WypUq11hje
Fj3YInlr5946wd89vaxgHV1mYCFKPMiT96A7C71VjqN4fpGh2xugNbMDXX58
LM3fiDJTVqRNcpek6YG+OFen+vrkwFW+9ZQWxgSA80ZSmMnSHa47jpAoQOd9
cXL46uzkJQpzKNMqi11+bgCQI0SH+PgUHxuKyneK2p0g08fZ0idq75nSjVa5
0UonXGp9T5L8eEZ5ckYEUvYEQX5H4R7KjWRHiu4r0tx5rCUK2AP5QpMZmkpT
+nV8n6N7Cif/cIL94QT97f7xN7uHT45h//Bh8xkctUHnbDJFKxTBGyL/DVG4
LDz/LZ67gmcCg/cGjn5+dPTDzuaTjbV3h3vrp7BVOOo9norT2w2lyfXwN03j
L/L6b+rOf6h7/5es/s+i0l+k0K+Kyq8q6JOydKOpLAB+F82fTPWfddBnRfZe
krxRZD4C/ACHV82/XjX/ctX6BbBnrHw0lT8aine6/J02d6Mv3D+y9/fo8SiA
oAUDnwYKWL7Henzyu0SxPRwDpwe+W+81oWYDROBKG1yDAl+c9WfzwRy8Pv5A
pzYA+SKX7IDKJrrRQM1rL3rtUNjbSEcHmVg/Gx/kU32AZaU4rJdHywH7jUG9
1V9Ou+rdtJvzSmkEFUaAwErtLpEdhNNdf6ZjjVWvkjVbZvmUXxmssa+SUkdK
YPJiGMITDGH3CPbu/ToMidk9Re2hya9hxJVzCVIbprhbAL/zizLeUCRaIIAf
K9IlB5s4TwPlam6qM4emKs4xZAbnnMCYYq9i9fFTuX/5k64uLzThRWeS9K2y
9FGYnlB8VWB1BNEW+K+3FKfW4syaG9vTo6v8TJKZSaE7caqFMzo3yPQXsJNn
R/s/HB8+Q2GoziA7WqbH2/hQB7RdXGz5oE1cXRADxTNzCGUOLvOCwn4qsMD5
pkOG5vkJ+XfvT/+0jwa6ty9SE649/Fie6SsA9kjXSYotLYk0DQXgY+tEc+Qd
QfgMQXt2RniNIj4/Q/1pe+cPm1vfH518ewAHIWKVyHmKJH17hn+Oo70mMl+e
01+fU19hiS/gaJAsftw//HF754eNjacbH1aOd9cQJ+v48z2WCG8K8uN9fu6e
Gr/n5v/Gyv0Lr/Bvwvy/C9J/5UY+C8OfFKmPpsYXS+vzZfvny/YvAD/QW5WZ
e2n8VpP7Yij9elH51Vz++bL281X9J3Ploy5/c1n9ZC4/GEEXzs4U8REQva+K
NwKhA9Tyxkhr3O9Mlw/dmoPHnSBA3EAzBbo3BXrYWuI3ARoFTGCxAQjs1roD
EDS+XgDqvoLXb1c6rXK7VfkqevlxNtVLRttBb9VtzQdc1VR4GAu048FOPNwG
X08nOtlUJ5fuZjPNWnNUrnWr4C/Tnlcro0x6OTO8Vr/rDX7NV2/S0DRRmfrz
PU++C8qUbPIcBYIhStL5dcEiTWHehuMRRPLbja13m9sHKNyr7ZMjsvAljP6e
qESqw3BVAmcoo/QlnKUC4hgzPqRFenhPDWMrw/Q5lBki2Zo0V4fibOAuc6e6
8IHCS/W0uZEZP77gxmai9EJZ/iTKzmiBuiw/5oaqonDVXBxfFya6aP061Qv2
f5Hmp8r6vThdR6pM7zB4wN7Tw73v9g+eY4jSdOPcVyRGuwhfGxHooYIjampG
9ELb8kuY1mkoDvz9j2JPZpcufQ2nvjwlPzsmfH+IAxpFMPu0ua40UUNdBE40
ProX+nqYwlgWb7JdWaTy+j1V+BpNXcHT3qAJPxydAqJWsOcrWNxTGOINiv7k
iPSnfex3sPMfEcRnKNJbIn2LxVkn01bwhBdn8B/393/Y3nm6tfNqZ//V/uGb
s7PXaOwGnYfU2WneAjPSp8bm1NgDJfblPPiJGPzMSfwTN/ErO3QviX8xVX7T
Qnfa8uzr85dbTelWmVvIUzeyJHi9lSZm4shAEGzL4gN9YWGq3F2UFheFG2N+
Aby0ONhk2wulYqMBAGuNG9Xlrbkq1ATJAoSI+lLZmgChfmNw05vfDhaL7nzW
mtx0ZgOQUErNDtQa1bvz3hjUDDjDcmNQ6wEmK7kqlK01y91ufQz6aSrZACEi
HKk6nFmXIxuPNPLp5X4iUOl4NxZphoO1ULgeT3TS2WG+NAnHaulc5+uJQguo
OgNfSeWB8Rtny7MMqNpturoI5gbWSO0yWL6MN0W+CtWaZVpT8kBB5Iyghcpd
HHEXjVs9PHm5tXuIpbw/xm6jmDtYwY/bRJI6BlfmERctqm/Gy3xkxKdoB4Sy
pMDvoIn1bYVbZ/FeF+3TbDnUZRzhSGF8EMgF1MiIFh2zE1N2cswId5ZT+HwV
SRZ46YE629fm+oBAV+M2Ov41+fCv5sEXRX0iSRd3ONxnR3tP9zd/v/L2DRqP
NjhpwQo1ARruHB9bIPwjmGs5W+NU4cFr3WJ/7rrUUUfzpyLV0zP0N/sn/211
+xV22f6EAQioHNNVxpmzcH2SExkIk2N5diKKN6j2CEyqe09hvkJjX8IRz05P
Xp7C3qHQ75C4lzD0sxPMSzjpDZL9Fi14i+av4Lj7LAVKaoAJFB+I1GdHZy9P
4D/u7H+/ufNi7+jl3tG7A9gHLOnVORt8HAjODDfRFuUmosItUD92csGML9jJ
O276gZe552fuBNl7ceFBAX0EEUxVHCuyI1l6IEuN5OmxMjsDJYsPVekJkDst
iGmZASh9cWouL3ztXy2ZmchVol1EKPpALgvVQWRoA/Xrg4wAIARJFqRXAB5Q
sH61N26O5u0poG7emkwbo1Ft0C93e+X2sNabtYe3/entcALSAsCvX1v+EgBt
s9wftGbj7l2/fZvOtiOppj8Eebz5cKgMpKwKzUHlM4NErBX0V7w+KBBqxNKD
TGleqC3SucHfKwmqMEwVx6nSJJLpRcF15SZdvw0XRrZo3RKomCINSagliHRE
obrQl+faIgS1+YDEfH0Ie7F7+GwD4EfaQRCOsKxDDPvFOhLDt3GcY4bvgRG+
p0Vuzr1drB0i2wt8d+k6NfTn54HCzVWyLw1UgL/C+XJIb4Gbv+Gk56zkFEgl
NdAkuErA9dH8ZWGsKU21l0OY8wNjcXBdmXq794HZr7rWjbo95gSjayTi97sf
nu9vfb+79RyBRRi9pEDjPDZFhee4+B0uPIdZayf6BEEfICpsWLHxiC15Bcf9
w/vN/7a2/of9gwO+hGhyiELLgVEMR4HuqCgSi+vmvwpjYxDYQf89NweAwB4K
xVt00joJ/RZ19BK2D4B/CTt6BUMA/N4hyO9xnG2KfJ+pO+Eb4cILpEh/ylds
k+hv4egnW7s/7ux+v7H5w9b2u2PYysnp2vHpJp6yJbrY1niPDOFjY+TEGEde
ZXGOMt5ZofhbtGCHHupSw21apEOLdVmpIS8zEqQGwtTg6xK+sTI/05QWy/kJ
0J2hfH9RvjVCi+VBdcXxRXl21bhzdT77mp8u4h22OYKXXmFEhkK2DMADORcQ
+J83VRoApgkAb1gfTFrjaXsy+UrdsNoH1Sm2uqV2v9IZ1fuT9mDaGQLpA9Wu
NkE1oRbAr1MbDdvzYXvRrs+yuX4oWvd4i34QdWOtbLoPejHAr5gbxaNNr7vg
dOX8wWo8089AU9BeC9A0k+8n0t1lZfsAv0R+GMsN3LEmCB1x6CbVeIiWbxzJ
znKzZLjJ8VRlqbE83mM5syxblG8Pnct06wjc0629J2ubIIzso0lwAucYx37x
4ewALxc6B1z3Dd01wVnbGGuN4m1LokNdcnkqrje3COTv3PnlXRdjcSbJD1jJ
Nic+YIX79ECH5muQXBWKC+IGm/LMECiSMtUx5EemwnIZ0kW2d1kaXNZmyspI
2xihTVfPEPBvNt//uLv1BoF8copj+EuC/IKSeTgLjHDRG0JkcmzOfuBf7bNU
+1ThOwTxd+93/rdnr/7byvoKjoiQKbWpoiYFqRLl5cCKQFUc7qhTc2CZBIE6
5Sp2KjVvMoRrBNIKDvUWdfIavvsOsfMatv0atvvu7GQVhXmPJW4RWHt0EVJy
gZaZz9VXRM0VUqzapTBWUai3iNNXxwdvYQevDnbeHO1tIc82EafbyLMjKgNn
dGNtMbIrS/OUAOeS1BAkfWl2zlueJzIWZ2cgWEmLc1n5VlX/qGv/JMxMgRuR
Fhaqykdj6xdz958uu3+1dH41NT6bGx9N9QdL88HaerB3Pjk6H12tO0OiKnXE
SKpLBE92xhE9PrMYD+ad5qBarFcKtU4VeLnhI3vz7mzWmQL2elAHUAdeW/nG
I4FdqAX6LxC9XrU1qHc6NQBeo5qv1fLNBtQDrq+2nGbQzBeG4VjD54fCkXos
0oiEasv+mxkACAF+AEuXt7AczgzkrjRJl8aZEmjBIwBhDpqmiqNorhdMtr2J
tj1ScyY6wcIkVl0uV3amR5Zoxxjvs5w14DHkiRHLmWdZk1Jvmmtxo3nSNwdn
369urB2e7SBwSBIH1Oou4v0JnShPkHUVgrGK0hfwl1VucAxURRmbGSJTW+rW
l/voL30KNH8KDv7JPf7V2v9Jmh4Lwn2Ov80NtoShjjTW1+Wml9U7bWZoLIwt
pQnAT59qa+INXaqhy7WV0FBaaK6zBd8dnXy3u/XN1ibA6RmGTvaV2PkFLjrb
sJT2r8twR3lX6XlDkjw5QL06QT47OP39+60/beyuEyhUw5UiGBe4IgJPXBEp
mgo9Z/PeXlv+iZJABauxw0XaPTrvwzlhDYNcQx2vIfdWETvb5yd7pLNjGg7B
Y2AEQpRQihDIEXzlucqEEKlPuJJTrmiPRgfsvUMClYNvYmFbuNP3iIN3sJ01
2O6bg42NswMEm7XDluwIDQfSS5jSgTNF6M4Cy1db3pYPNjmRzjKJJAe8xPJw
B06iy032gSdhJiagO/DSN+Linbz0ICsspNkpUEJ1YWqo3Fpbn5y9L/b2g6k0
0Sar9As7WWXAShQooRj8PQFyywMvGv3lXeJ4vpgqAfkC2QHgB3QPuL5H/ABv
gDpQrTyoRrPQaORr9VwVpA/g90D0APm3VqhBuUo5V68VO5V8p5BcLi5NZ/rh
aBO4u2isFQnVve5i0AeBrJF7bL6hciReB3JXqALpm6e/HqtRqkzLzUW+PIuk
O+5w1RGuOWONq1ANyJ0t0XXlpo7c1BLvGSJtfWwgDA4k8bk0OuF6ayxblmON
c68CHJN9n0B/vnnw/MPu+yP46TkVTWXvnuFX93EwkhHN858rUwRDieFoC0Iz
jm9EuayrQovL1Cd3/mdP4bOr/NHX+RKa/FPk5p99w9+uKp+16Zk+OzeX7i3Q
nam4uCjOLMX58rzd4tiYGwD8dMmWMds2Fnu68pjmSXwHx393BHt6AvvHD1uv
sOR3TPkHuQvhaRy5m2+1iXVNeEfrW2GpfjwjPAG+6+jg+f7Rd9u7r2EoOF/G
Njn5tqDClzalG97GzNucX+Y7kgDwtxGa2X3I4CK5AoJETFFKaCohXcmlK9kM
FYumYDC0PLZRyjGpORcGhuGCrDGeK/QYiRIoHjCEALw1DOId/OgdfG8dffDu
bGsNvvPmcPXHzRffrjz54+s/r+y/x/LZUl+E44qRzX6MxonReWnWJNdb4fkb
NFeZ4auxAg26v072QDh7Dn2dRlxmcL4O0t2E22sIR205vc1dxdqL6Ms02Zkn
OzIMV5YfKC0FPJhnWCNEvfWUKzxhM2BMOoxJO+PQAG8APKBahWQxG8tBmfJj
3AD4Ade37Lyt8bg+BH7vkUCAXzPXrOcAfvUO1B41BiAOL0YLEHvrxUYl3wDs
1Uv9crZTTDWzySbQPZen6PYUgcfzeUoeV8HvKYYDFcAeUL9YvJHO9Yq1GdRc
FBrzTGWczPdy5XG+Molm2nZ/6cKZvvSXHPH2ha9i8JUNgbop2jFEuupgU+mv
K0Jdvn/E8gzY7g7X0+S5IJ4tLXGldYEsSaJbP8MC+/d293jnDHVGoJziSB8O
UetHjB2MEsayEXUZvncoid2yfTOCpSMLP1ykf7HmfjUnFvrYyJQeOGq3vt6X
0PCv1sqDPjU1F26cjS+u5ufL0o0uOzJDM9B5NemuOtXRZjvA/l1CY0tlosn3
T9W2f9w9A/Hh+SniD8ADIImbootNnR8fGxKzN2e+5ok1taeyvcDT/7S7//rk
8NXR9rPd7RcHh/skOl13KXfGFO6kBxpd5zq6CCRwRCgGO0ZhOBMpTgViolTC
12u0rmtL0G4J2i58FoPXqPcaJVaVxKYVXemYFxqqVkvWGPBKA1qqOeUINvD4
Nyewt6fH65izddTRG9jm84PVH7ZfPtt788PG029Wvv39qz/892e/f7e/Qpbw
1IGIMpyVBdI8V5LtSLNdORaICfbi8gh1f4sX7vFiy+LGe0sNTI0YyTk5NiEE
++RQjxruLu2xs4C9iu0KzRts7SpVurxnThVtUgUfiNxVPA3k8RU0AijwCurs
PRZZy1YBNq1iE+AENO0xa4ACF6BAyB01hsD7AQIHlR4gsFVsN0B7zYPk2x62
RvPBze347m5yP+pOgIS2Kr12dViDBsVsO5daHvMHkHM6iw5bzmnPB73leLgZ
9lc9juXWIdCLAX4gF6eLg+U5uYV2ONsAOSWRW56tFko2AH5mdxbgdx2uG/0V
jaes+TpuRRtuy30Nibsq8jaZji7pukW+qjHsNYGvKQ821KGaLlgUXXphNO7K
IXxlH7aye7hzhkAQSdun6PeH5+8OqB8wYpTEy3KA2DJnh+4Y/gXTtxDHPquS
H+WRmTTQVkc7lsLQUbu5LM00iZ4s0tHnxvbmJ2Ce7c2Hy9rCVJ5psn1JvC5N
NABy+srEWJ7oikNRtLrF0fxhF/4P73efHMKenCC+OcVtSs3YYIVdeeDUf6Jk
xgR/Caa+eo3Bf7ezAWB4c7yxenpwSCbSlHqFI6jzptWeLN8cJsltcLbmjKvE
y3UUg4liMJI1SpFJKzFpZJcaqUUlNsn4RjFXL2TpREvdu1SzzTqyQUPQaAla
I1Z1gZCo4DzREZW2icG+R5xt41H7ROQH1MGL/dWXe29BPdt8+XTjxdP1Z9+8
+u7V1lskk4yTKhlmtyKU1aebQNjBB00OXF+4T/U2af428MDMUI8dGQjSE1nx
Vln7pGr8Kq/+JCt/VED3SmghzgyYvgLhKrRGk7zGM56e4r87gD/ZPfth//Tp
/tmPBzDwkXwOh79Go9cIhC0a7ZG3pcQ1R6DPLvo3oOGCt71Kt1vugFp24eZ4
1posW3C51yn1W4VuMw9C8WDaXbJ3M1xMe7PF5G7cnYPA22vMqqVBJtFYDi5I
95PxTjjc8nnKXjeUjndr0CKXGjziF4k2QOcNJer+WNUdgWyh3HUg4wlDALx4
rhsvDALp5RxISwAy+koXgarWX9UF6oZYxxDrKQMtkacq9DT4XuD6BpTrOvWq
KvR1NLGhwlcBwUrpTuJF2i0U8f0J4tmHrZXd/TMicQ+BOsbT106I707pB6wL
vDFNcbQp3ikleIe2D8m+OTu84IVH4kgPGC1r9QZYZWDwVOmuMtkzlib29kdX
/ydQzuHPF7UbRb4viNf5ybq8OFBVx9IC8EUNpju3SpF/d4D931+t/2l7/yUK
/w0Muy4yYnwlYnKAi/dRvhLGGjmSalcx6NfHW6vwzQ/o3RMahqaUii9tIrOL
rrjG8g0otp4kueboXVyTi6G3kDRqskZB18noCsE5j35KQe/jT3fPT/fJiAMy
ep+Cxsi4ZIOaeWVhWq8ZNgfD7iWZnWj1BV6qxgkkx1TaBhq1i8fCaIRDEkDx
YA0GAu+HV7srb/bX3uysfvPq+z+/frJ2cvj2DLPHEOPVVvp1lOctAq+rWJ4M
e6csfZbmP/ESN7TwgBzo0iI9bnoqLi4UX0/4leWB2ZvIM12eP481OA6FqgOO
ZIfO3TinrKJwq6foFRhi5QT+5gTxAo59Q6DtcSUozQXF4gBoAVkDBQCbt6eP
CRfI3ePXQbcFcWMpgK0xALVZaNUy7RY0HDZvxu2bUWs+ak2n/cVi/HAzup8N
7gfdm2Z1XC70itluKT+slGaZVL9UmBYyo1iokYy0KoUZiL3Lu9DxdjTWDEZq
Ln/J7ss5Q8VAppkoDwGH4UwrXZ4kK5NIfrA8zSrRcqa6GldB44N0gRqgS+ws
CJ1FsbciD3VZjg5wboQLiHpZEXpaiuCSTLm3zLOEVZ4UWaoHLXjl8PTF5tbr
nR04hbJ/TjwgMtbQtG2aAn+R2BL7cc7eB1Vu21BBuAaE0JQU7NODLXGircn2
1Jk2PwSJkw1VfqAtTzTQWAmNVOWxujpVQBNBtstJt0XQQNlcyOtTQXHAz3S4
/vImQ/2PH2C//3Dww/7Jdwcn359hnlP49ESdmRucuXKH5tCWWPMMjlqFH+9g
j14dvdsjHp2L6Qy1lK5UU2QGpsomMPqZKhdX5xFceDgGK02tIyhlJKWQohbi
hewtzNkGCqRUwjYBvYo+3SThDtj0LQYVrlBSr6yUKzvV5pMnS+JoAaW2nEsN
SKbwmMSEMzhoDg8OTBeZdEI638GcPd9+/8OHd6sne+9PDn94v/LdypsXu/tA
pp7DiR9o0lO5DaX1I/TRc3uZE5vxM/eM2IwZn4sKn6XlnzjpOSnYJnggYawN
Pp6G/FCdbvA8MaL+CiFRwPgipEAEZ3OOKORdHG4Hjd5BIvdRqC3M+SFfhdA5
Gc6kMFKRxuqjr/dSOoUmgO0x4bYLzccCEQMUaLigBYMCDbqaqUHpZj3f75Qn
3eoEcNgsLUNut748Qmg2/jgbfe61FlC+n020c1/vsaQSHag4BciBayg3qZXm
hewQeD+vu+APgNzRBPkinOkEMm1fugXKHa/4041ocZCoTFK1ebw2i1bnkcrM
Vxi7CyNbZmBOdrSRhtRb4tuzrOuc2NsTePtCd0/o7oi87a+b1JoyX5V3lWQZ
/Qy1FcmSrJ6gnm3vvjs8XD+FgR63hkDuUVnrBM6h6BIEuiNjbu+idGBrwQMT
bGSK9DZRziIIqix/keHLsYJFTqwiyrWBvumbC337VttcjpsQFgacbI8JCCwO
edCYVRwwcz1uri/PDA94pt9vnP7j2vb3O3tP9g9+gMGfn9P2NNcoZ/zA6NvT
2Da4kpdwxBERRRZSyFIqWUGnKrk0pZimULHUJr7RLbEEZVdR8Co0uQUmG/fC
xNRryCrBuYxzTCOuIc+2SedYmRQjlRzxeIdc7h6Pv0Zl7osUxEsHyxvhB1Py
ZJkXSCMVpgOKEEbhnZC5p1TuuVDKUGmoUimKydjFoN8e7L/Y3lo9Plo9Pn6+
tfV8Y/vVwck7NPENnr5Blx3LrhFa37E6sKeM7GmT8KsyzFI6tVbQ7hbO08C4
KnhPhRGsKxJ1dbSgCGT4jgDFYEZLpMcs+gGFeMaiItl0JIMKIxOOzrEIMpki
ELC0JpY9wQpUxYmuLDOWZSb9QquRqbbS1W6xNaz0eqV2PV2pJEqlWKGaKgP8
AJCgEbdLrXquVklXq9luozBoQ2PAXrXQhbKNcq5ZAXG4Nhn17mejL73ObTE3
SESboIDKAftXhaaN8rxanJTzEyg3TsfaPnfB7cx5fSUQimPZfqIwAkLnS7eX
x/ZFK85Y1ZNshAv9VG2Wbi2SzUW8Ps8Pf0p0HsL1W19l5iqOzKmWwpfnWVNC
R0Xi7cgDfamvK3Q1Qcn8HZAdhPYCUeXhX0aEV8EDEvvtMWIVhvh+48MHLByY
3g+48/VzxjZNpkh00Zd5lKOGCQ1J2Qda8RMhOTkPt6mRBj0AUdwZojdN8mfp
EYif78iqY6BywtKQmW3zSiN2YcQpjrnlKbs4oYPr0lRav5eklvj9cQv+h7Wt
pzvLTPHj4d4zOBKuNxEcwROjHW60YTRGOJ/DVolVlyrBhYSh51NUPJpawjeZ
lQ6f3pu8COQM3qzSHpVceiRXTqnVJrAYKEoRkk/fpRDXsLhDNo9qstBMVyiV
/lAg/0AX7ItUMOUF1R4QhNIAP64vjjc5tumi1VPSAZ59QuIDCElitchkY6r1
JxTaJgqzDoevw5HbGNwujriFxm8jzzfRxKfHyD8fIZ4iKXtCI4iunGgbmL1z
TxvrbJz7OuTQAEQMAB7GniN5IH6kCsBTOPwCs51jNLMNRo5BxzYoWXoZSydl
qcU0uZAsFlBBXNLqdA6nOZI1laZq6EFbelCVPioLnwB+7UwN1LDUmdWG49oA
KGE1CQH8aunKUvoAk1/xA8EENF8AXrcyfxwg3ygNK/lOOdcGBObTjSqwhY1Z
vTLNZ3qAPdBtwWunedtausFRPt1ebjWKt5KReiRYTcXb4UjDH6y6gzVvtOmO
d0C8tUXrtljVkagB/Hy5Tqg0iFbG0eoU1OPBkcn2Lah45zbSnLtL/eVOIldJ
4Wso/U2xq8azQhwrJPY0VeGB1NNgW1IKL6QPlanq6x0ic+UU82Rr+8e99a1z
xI+72yBmHjOl5xqXLNblxgek2IBZeuC3fuXVP4uqH1X1j9rqvSw/ZETLtBjE
TNa42Zag0OXmuoxkgxSr0ZLLScugKIkeKdEnxnvU9EhQmJ9bgfdT/X7j5M/r
2692t17vf3h9tPkOeSKPRsTRBNJ4hbu45jlcfItJbtaK9VKqnE1ScGhqEQBM
6/VdRtNXsaw5lAEQqp1huc0rt7kAflyjHi/mHDNIWyTyGp50zBPRLDbmlZtk
ciBV5m2eHK66xBmddEeQbvUTL+xksx0l169gKGtw4i6GcUzkIRgimlzPNVwS
xfJtHH7tFL4FMCZSYTQWiiPCC+V4oQLNk8I4gjUi5QWauMmW05wpZWEkzU6B
G5EV79XVL9r6F0Xphhmq4a6jaHOAaHKjhUosW4Cks+AMBobHosiFvAul+Eqj
dJpFl1qOUSO0mHQ+vz2V8+QrzmLnsnpnqHzWgN+t8KAqfh4VO6DGpS5g7649
u+/Mp40R0MBGtgbYA4EX+EDQeUEGARAOakOAX7sy61TnrfK4VuiXl3NKG7lU
PRYqLk8vitXSiUY60UrGWrFIMxauT8dfus15pdgvZFr5RD0bqy/3mye79coi
nRn4g/VrF4i3RYu3YvZXTYHydbTmTDX9+Z6/0PcVuv5iL1wZxRszUMnWLN25
yfZuc/27r7XI9h88xbEtM7qItOXuitBWBgTy7BWggaALq6MDVaipDFRknixC
qHsFO39zhvph9/1b2M7K0f4xgYxjyw7O+bpww9b8svTP9S+i5hdO+U4I3Wtb
P1s6v5qbX6SFoQxalqi0nHvGSraXlerxcmNGok8Jd5fn9CXGlNiQGpuw4pND
degFTvy79aNv1t6/2Xn/4fj9Ie4AycJqQk550I/WaDEqLdNkpqtVHLmYzGOQ
ZFyaVsq/NCjdDkMwdBGO6fwRtSeocYdAqV0BmdXJMRjPxaITGmX7HLeKxq/h
KHCxkmPzib1xkS/JtodwWtuJSItRXxJ01yd86S6djZOpiEo1+Ii9PztfO8Vv
Y6horgQka5JcdcZkbeIwK6ewDSx695ywTyKfsbgUpYZ7ccW1XDEMhlMe9y0a
9w5PRmsuJdHlyQt0LySItYWJFpA7mjOBNjgPxJpNlmCDTD8i0U5JVBiRdHiO
3ydgT6jnWCGDqhJyzRrelVHisuvC8atcxVMbBpozf/vuunZrrt6byg+m8seL
yhcA3rw6XNTHt40JYO9jbwEgnNSHg3IXsAfCyDKPNIaP92F6tWGtMKzlx9X8
oJztLe/sxaqJSCkWKkQC+ZAv6/dkg75iNFRLRFrxaCceaUwGH9uN8XI1V3n4
/9H0Fk6S5feV7//wILy71rNgoLG6u5iTmZmZmZmZmTkri7ugmYZZQ5JG0khj
Cy2TZMlrhjWs3e9XM+9FnLhxOysrI6vzc7/nnJuZ99coDUppgGsb5MBG5SCf
n0Vifae/aXCVVY6SwlaQ2YDp5EzhshOEwHTbkWoAAQIjtVGkMozVh4nmONO6
ULY9yXUn2d5uvDnzl8aWZE8bbqlCPUWwLwsMgRfzvB1d9lDob7NsObG/gpbZ
X4JSriCwl7aW/6+Xfn8Lh1rehqJw9C0kkyK2+ZrHqZN3/LffUg8f0nJTYqTP
Tu1IsgeSzI4gOxAWBqDVslMdSqRBDF5cqJaRAP+cUCMDQrBPjkwo0SkhOML6
+nhvD2bKXyKr/s+bG//3lcuXFi+tw24QmRCuisZUc0UeM1GnQssVGIkEwWJR
+TxAIFUhYejUPItR4nLIvW6F16f0+VX+kNThkTm9YpuLodYjOFxQXW8iEXMI
5AKRts4S0k1ueSQjjxak4RzbEUPKTUs00RZXBuVJb2AIL66tL2OxSCZjHY9/
cXnr6wvrlzZg64BJrgDUgVsY1HUE9Cps+wp069L25gtb61cRiE0mk6zWcq1W
vIS/xSRehkO+sbW9zOIzXBF+tETzZtYllhWR/iZTeoXAvIwlXcPirmPQAONN
AhlKpsGpNJAn10m4TRoeJWQS1SKqQQ0ON2OhZK60NbmWItnSgOjeOLS3jpyd
2+7emad/1929Nyl0Durjw9bObm20UxnM6iMg0EdADpz8//iNmyMw+hrFZjXb
APhVs6Mv2WtnY7VE8OK69D5XIhmvRsPFgDfndWW97kLQXwX4gSnXa+3WCq1K
rtGuDtvVcSXbLWZ7tfJurbRXLO6lcrNgYmQPdrTumspRVjiKcmdW4y8YI2VL
vGaNV22JmitV92Savkzdl6kG8rVoqZWqd9ONXrzSChcagWIbDElXtmfPDK3Z
mTmzr0/uq+J7osBIEdsVBroMW4FuSxN1gVWW6iqScAMJ+YNr31qHbm5sbkMh
GAScuoVk8w2h3NFrkaPXTKMH3OKMmZgIM4eKzLE0NVOUdkHVFRfGgENOsseK
/3/nXbHOGs7ZJPsGjPAOENk7JnlG1MBYkD7YVgZeRpCvbG1s44CVQS7mkIZC
l5Dkbj3boqPpNRSFEs/n8xRykUbN1Groej3LZOLazCK3Q+b3qIN+bSgstNm5
JjNVpUZweasEyiKGALZbdA5BrqUa7NJAEuDHdUaZ1iBJ59pkK27hGCBgrJMY
INddWV29snRrDbEBJWBuwuHzGPwygbhBo2wz6Rs08i088jJ8E2znMLArCMhl
JOQKEnaLgN3isAkyMVMrYmkEKC59Hou6RSBenDkUqW/ShS8gKS+iKS/AMF/f
hLy4vXETtb2Mh61gLyrtPBSxjEStYjHrFDyMS8fJhWSDmu/3SJNJdaEmyzVY
kQrZUyJ7a4xgXZlqGnJNa2lgqYyNhVE339lpTHdbM8BbJ9fufvl+7lfnWy7O
wLTGO50p2ALzLaXLmUi+XZlcXLEqPwQU5ROteLgSBMg5U6BuZFNdMPT87pLT
Cm6pxEODfHrUbs5y2WoqXrr4GvvFxf2aoBe3G0e1yn6lcpgt7kfSU2e4Y/Y3
jf6WKdQ2BKuGcMUUrVkTdWcGcNVxpFtg3xAu6oNZYzjryVaT9UG6NQyXms5E
3puu+S4u5zLwF6eO3I4hMZGHBkLfQBHb5/qGovCE7WmjVTGyOYPTRF6CU69s
Q1YQkK996xsQKHxjFbK+BtuGEm9t4ZT+ixOtysJQXrpYd8A1fOYfve7qPvbt
vuqYPrIN7ll6d6zde6bWubZ0KAdTMdxXpGe2xh3/8Kmv/8zdeRzoP4vO3nD0
7tLdaTCgtulUlowl13FEKipLTGDKGTK7lqaVk5VyhkZNk8m4SiVNIgXeyjPb
uCYrmDxCl13scYqdNoHNzDHpSWoFjMdbJJJvoQkrBDqSKyHKTVS9h2kNC71J
li2EVZhxSgtRaYbzJC+sbf/+jYU5KBTBoC8itl+cv7oIWcNxWWixnKyz0vQW
pEgG5fPgQt4GkwqoW6Hil8jYFTphg01boZNu4NBAyxQCTsRka0QUBR+wdAMF
v4XDXUOiv7ay+j8WV7+1tX0JCn15a/3y9soNxPoiamMesQU6yzUI+joMu4Cn
brH5GIWabLLS7B5+KEFxhTHmEMocxdrzGEcRVLwNRRCpchMMbqY9xHBcLHBZ
q/Q7rWnt4pvm9UZ10Kz1L9b+Bs7bnTVKnVq+XslWc/FcOVNuV9rgR8Vsp5Dt
FdJ9EPCigZrfVfDYc25rPhboJEK9eGAYcLYcxrLLXI35xsXMYa9/msq1vP5M
OFTIgdGX62eSnUS0EY+2srlxqbKXq+wnCtNgbuhK9syRhiVatyaajnTHnulf
rEma7OuSPSBFuAGkDNW0kYv11By5jq/YD5b7+e5+rrUbr+/4CyNrqq8NdUXu
JsteZzvbAD+SpYlQ5bH6ClZf2pamtgSea9vEG+vQq4trcwsra9swBJYARWHn
N7e2iJREe2hKlzyNSevRe/HZk/TB68mjdzw7r3h2X3NNnprbdy3Nc2//QWTy
MDp5EBveye89ap+8Nrn/9v7TD/afvNu//SQ3ONTGsny3n6TSoAQ8NI9FlvBY
ailXqxLbLAKLmWs2MvVamkZFUymZajVLo2PrLHyTE1it3OOVup18q4mqUxCU
YiiPscak3CLgr6PxiyQmjKfAyi14lZtqzYBDCa8LgzgBFai3WQIYiw18dg2H
/tbi3NfmLt2Ab25QCWsUIozPpllsyxw1yZqQxupfLsVrWeeIFij0m3gCmHVI
sQAQDoSWCLdYrGUqZZFMWiTh8VIRz2RgqOVIFmUdB19Cbi3CVm9sr1zbWHxx
+aJMvbA2fwmy9uLm8u8vLl/FMFaYapTSTbbELxb1cOc4gZow3uGEmhRPleSq
0HwNqqeJs5awpjzenKW6sjhzGKZybUitQMlkOZ9vptPVRKJUKXVbjfFXFzro
N8cAwkqmXkyVypkK4LBVaNbzF1/NAFMuFb/IdWF/ze+ueO1Ft7XoNBUDzkbU
14/6BmFnJ+zp5aP71cJJs3M7lmm5fVlfsJBItjNp8LutWLSeiLXTmUG+uJOt
zLLV3WRtFsz1bbEaSH3uTMeTH7jyI0t2bEgNtcm+OjmURXqKWE+T6GkT3a+u
DuSt7MSau5nWLN/ey7b2443daP3IXz3SJydcV4Npb9IdbYSqsCaMw1UllLa6
LctBRJE1smIdy7q1jZlbgyxsw7cw2G0sZhUOm1tfDxaLqe44Ozmsn78SHp85
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
MP2k/pE0NJLHLoLfxWI9tiTTkRKFiobsRePwt09wSt/LMPplKHkZz0KwhcBn
cTweSSTC8Hg4gYQk04KBhlNaMAobXukAjnPhpKoL36EpLAKTj2fy0lRWktRM
lJgIYiNeZAA7F6BqnCytmyjU4ThyGJhdRNomkbhNJkBpBBgdv4qDbZIwazjs
AgKxgibAqTwUQ7xN5GC4cqpMJza6dJ6oK1byp+veeNHiSwiUJjxDSOfJaFzx
OgwDweDpHD6GysIK5FC2bI3EnkcRb8KwSxjw+Fxwo9ybUkWq+uxUWziR5+7r
Wu9ln/zu5CfPZ5/+R+nJr+y9dzSl+/LUvqF0lD16s3T6FtMWM+X7xcOnycnd
zsMPGnff+fDP/vX809+IwodYU59oAwQ+MFRf11VeU+QfceOn8uJDaf6uIH3M
is7Ivh7B06QEupxIT50eKOLgSK8wPSVhbGBu3/UfvBs++dQ+fccyets8fs+x
+4n74Lveo89CZz9KPvzDxL0fRM4/9R9/23v4PtC0/XTUeNSr3umUz4aNuzud
+6PGSbMwrWb6CW8OKGiLqXl6JUerFxulTOnmrRXk2hZyfWPtxtzNF781//K3
NucvI9fnyKhFCQdu1pDsBopDT7JpcQY5TMaDs8hY+sXiQ0wmg8cTKsQaq8Lq
U7nizlTLBEJgFKgr9zd5thLHXBI66iJ3UxUdGNM7gEBTfGRNTV25PXfuUO3r
8C1lqbOjCc34tj5FW2Na+iLXjj56LHMORdauwjOUe0dCZ5dvb4q8bY69wrGX
BJ6SKt60FUfO6tia7+iTjS2uYZ4khQmMAnsURGKGxso12KU2L09vY6iNoKDB
WGLIxekCLUKkBx0NLzXR1TYgkswIIATTT2ILcHQOwCQYjESxFstXYngKrFAF
hiFFZsCAeEblbuGpaxjsGgazSUBvkdHbFMwt+PoSGjqPQswj0aADcrUupTMh
s8clzpQhWnPn+p4vWz+QJ9PxplqWQE6gcciNbvA/Bvx3A4nD0ZgbaPwihgzn
yYgKHYIjvoHAA+FEWoUvrU+2RL6aJDwyVh7pG2/Kq+84Zj+pvfWPD3/5vPfu
78SpU3Zwqi+dhSavdp9+P3v4qixWpRj9haPH2f1Hdz79Re/px4373z779Ddn
3/0XTfEZVFUn2Sf86Jkwfkeae6Spv66uvaqqv6qoPuFkToj+Mdzexnh79MiY
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
+47rxxD1MHqpQmxFwJ6Vaxbx1QOwz3mCwcKakWLJeLlimqKeAwEvEg9iq1pD
CJKwArFjUE50iSSd1Si1rbTOI02TiHb4oH5gt75/HwjUDaOLVHW2Y6X5QNa1
J+nek3UeVDdvVtbNEWtHoB0Xy8cLa8dKFdN54hG8cLBEOQ2kkesX0tkWiN4F
svHcmlGQcT+8OobUwus+qB1EBDakUD0dQTaVYirLsDRyBouaU12BF5FyBMXp
vPw0VmpUSUJ4YXhgVpAfJiwoPSoiKzAgydk1+Nmbb49fO995+v7CjWe/nbsF
4vbfv13924lrZ/56ePL8nX+dsvv7iYv/PHHht5MXTp2/fPrC9Qs3n5y7/uTP
m8/sfn4p08NXX288fXfh7tNTdvfO3bS/+NDh2rPXd159/Pl/in2+++bD7aeO
F27dO3nJ7vdLV09ctjtx5cbpW/cu2Dtce/HhsbNfVG5FuaQ5gsCiqMz60UPt
0E6DbdnQv2Ya3OiaOur7gXRMIo19Oyh700j3IoqfzLzLNS0LWtfBran6UVpU
Qwj0X1A/ed8x0Ajej1QHbXcPSti1B9TR9T9AA3OF/QRRH+geEAiyqew75jVv
lEjHCMIhonSC2rhQ3bFTazmSDyCaMQTwYDQt0kzz0HOxfEs2BJm6Kap+Afov
4EfRzlWZloAKifUAzCcEDShQQnCkgF8avQvNlT1bgF+tbV07Cbu3Dd0qrKi+
SDbBbtmAbaF5A/StumuxQNyTQtW5p1QBfhnMVpDBkHxFJrcbOh27dY3btkVp
WGS1bgm6j/mdhxBUxT3Hkp5DcdehoG2X27TJNq5DcUxrCttxsXQoiqiKK1c9
9sYE5fJiyyV0/TA03+YplEDdyKGmbw8IBPbgMJrGkYZ+RNGDEohC2L7HM61X
NSwCyWTNLLtpk9+2SwZJlIwVK6aAQAzTUiCZKJJP43j9aUwLpB4MyxZR3hxM
1GXWDFa1bVVbj6GYeAEdX12axkjyz3F/Hf7O3vvjY3+XV+GRftnhflnBvunf
PRNdnEJfO3raP/xw887LP+0eQJ04f/0//3H+P/5+7u9/2P3z5LX/+ufF307f
+M+//fkf/3P29zN25y/ePn3e7vSfV85fuQ2PPH/N3u7+y6v3Xpy9Zn/i0q2T
V+6cvf7g9LX7f//z6v+cuwx2Dv0vdy/ZnbxxB9Lu+Zv3z1y9dfrKzTPX7py7
ce/i/af2n745BUXns6X5HGVQFskvg1zZ0KefRNemwCGruhYN/eudk4c9syh7
zSNH+sF97eB+Y/9B8yRS13vI1M1xjD9AuwA/Re8RNF/ATzFwBBr4Cz8IkhCK
qzu2pGBvLEcQe8H1QeyNJ5sAP3SRcBJRDyBy22HdAMI2ruaJhotlk4XS8YrG
BU7rJnRGkL6GKURg3ilUjTLbN3GC/lROdyKjvUK3yO3Yru09Avx4HZt1o5Ar
keqOTSBQ1nsEI7d13S9LGVGkBwEB+6cYOGicQKUPRrCd3zNrMVXdYvMhCCZV
O9m2iDCNEyBWHik0QnVXhWYsvrwhtlQD7OUKe3Ecc754CHAF/cngWDN5vbAB
lc4058N8qR0D9SOKJ6iahV/4sQw/2KYfKVSDeyrtZWB2VHEtqF9OtUk9sA1+
T2XbNIwdN00gsu51lXVXO4SutP8iEGRQbT1Smg+lnbvCts3K+nl4NrAi0Diq
9KtlyplC6SSAl8HtL1bO/apC5WwCzRxe2pIpHMYJBmOprTEVLTniYapx1e9N
mMdzf2d7H9fnAUFOifF++NTQ4rSIUo9PMU7vQt44eD+1/3r39tsrV5+e+/PO
H2fsfjtzBVrqf/3r3D9PXv7zysOrt56fu/Twb79fAfxA/f66an/9rsP1e88v
Xn944cqdv+zun7ty75zdw79uPL546+mle89uPHn98LXTs4+uwNXVRy9ghCR7
6ubdi/ZP/3rwGNU6u9v/ffqv3y/eePT+q0tghGdkYmg6AUviQLbVj6zQ6i0l
sk710FbTAiLrQy/i11nXDANbrWNH7RNIy+ixcRhtu8YxpHHw2DCBSh9DPwe2
DfX2PftwTgEAwA8KmhRsgxxBGAH8oPOKzftwrqH5/sIvgdIEpxUsN+AH/RfU
D6JudetWuWqW2rCE4qf7wWnfEZoPIF8oRhG+ebescUZgPSxSTScxO/wLVHmS
Ybpppbp7D717s3EWvX46ir4iFJAPY63lwDdT4Z+tyqsZBCzB16mHDyERy/oO
hF07USXa2DJTqWy8axkRda2kVGowjHrfDGZapVbQtiyzbOdWgxKaCkT9eIEt
i2cF/EB8flFHlE9StT+qjGtM4zqtYalCvVjVuCpsO5B0gxk+YBnWQMYhzqfR
TK5JtOd+OC8sLaZUmkqrV/RtQV6rG9htBAMziijMm5q+A/RgjiJwVE1jiGEE
aRxAVJZDWddubfs2x7gsaNsWd+2LOnbhtcCWQC4ur1vIFgyXqheAvTzZVKFi
HssdjKF0prLRlcw0jiWF1RNPawcIo74mB32I8X8bHfY1JckvL8E/L9A59evL
UC+nuC/vQ/8Xv8tXnpw5d+tff1z61x9//fc/TkOdPGt34cr9vy49OHnm1j9+
uwLN98bdt49eOEPdefzuxoNXN+69sLv7/NLNp1duP7/+8NV9h09P3zo/f//t
8TtnIPDR2y/2b5yuPUEXUk5du33x/uM/7z/67eoN+PHOy/euQdFxOUXZFHZp
tYKn7dRYpzvn9zsXEFXvisT8owmywDQi6FoRdf1oHNgFs2cC5IYPQfd0QwfG
EfR6hPanYQOzV2VYZDev8lDN2VUPoVe1IHcAe2CTNCOo9wP8qI2zgB+ccVA/
YA+0CDYAv0xuD9e01PhTAOug9dgQOMgMA3pO4QiTGxeBQFrzqqj3WDGOiPqP
KluWwVrTmtZBAL2yZelca4FstNLwAyAkiPvBwjWMoTsA7MFEgBH2J6LY4IGR
ZHDMnLY19TDk8W1e+zLYQhDqTFYXjtmN55oN4whTP/U1rgRD15BV/VlsUy6/
HXI9TC7/rJpgvAyyMzQ+mnaZrlsBAKD3lapmytTTZerZMuUcSb1A161zmncp
mh8ZrN6Y0uboElMGywLZKoPd6ZJc9SIoF9JHAIEXVSatsay2LiC6CaR+5KB+
6FBh29YMHsCosAGQSOv0/5VBINC6r+hBfbW4cwciWHXrRpVhGUwLvGh53Rxe
NAKdN1cykSUawYsn07gDUZSuKEoHTjBUolkob/zxUwbbvR2C/V6FB32IC/2S
HOGCDXJO/f4x3u1t1JXTz6/86XD9iuN1uxfA3vkL906evfbbyUunzl45efKv
U6cunTx99Z+/Xfiv/zn32x/XLl19du3268cOrs9ee9559Pna3Td3nnx++MLl
3rPPtx6+AxqBvSdvXJ69c3n0yunm0zeX7z+/fP/ZmWv3Tl+/d/nhc7vHDlcf
Pb/96t0LF6/bjh9jsopotRqquI4u1zXYJnvm91qmtmQ9s3X9K8q+ddXAdsPE
sax/i9+1rOzfhR5hgoKeO3zYOLDXMHCAuuUxdMEEJI7bukY3LnLa1jntG3D2
68eRX833F36wDRIEyZdp+gHNF/CT9SLgZIiyMZDBOJIxld5aIhkAnQH8GoYQ
qfkApjm3ZRtVleZtUv0SQTpWoJpiduzIRxHZCMK3HJC0S8y27eK62fAyA+CX
SGsn1A4JevZzhDaYAqC38j4UvF8FO4Dj9LulilOrupjNy7BLEtsWJGJ0FXoA
yeGaK1QzJMV4NrsjpUITW1oLyl/bA7q3ni/sYupnKjWT37ECb4zQI4WfQG4B
olBT2rBEN6zSwL42zAMJCZSOmLKW1EoLXjCCYw1EFpsiCk3Jld1YhgV6dBbP
7JrG+RBd5hCc65vDCS+R0I0T0FmMc2BoUSlWD+7XjxyJu1bFXevK3j3dKOoD
wdWgiRhMb9+RwnoIBbm4pnOH27QKiQwOILwuUTGTL5kA/AoUM3jJVCLDCvjB
mMy04GvHChTT2TUjGG4vxpcQ55ru+yr63W3Px399vPfnuydXv7y44+7yNtzV
KcrNOcrpU+Cz58637jpevfH4ynX78+eunDl54fTJS2dP253648rJP67bXXvh
8NLjwROXZ45ejxw87e5+vHbvk/0rz2fvfR86ugGE959+BgJv2b+5+ejNrcdv
7z57d+/5eyDw4t2n1x69vO/48R5ED8cPji5eHhHxCYQyhtKg7OgXGs2KzmHL
4gHkWaV5XmVd0o/tNs2gV95Vw3si8wqcKdMMapLRGkfTWeMg2LNDdf+Bqv8A
DLxi8JjVskI1zAN73O5tSAHaGaRxEl14AQLR5ZcBBAwY4Af1M3fsgBxB7gD8
RN37seWG2HJdFqudY5oH/YECuy41Hwk69qnaFU7bXpVps7R+MU8xQdTM0gBv
kLVRBL0M2rYL+MVVtuH4vSFFDYm0VkbzWrFigte+Dd0WWjwQCC8t6z2GsaB2
0iVJmELvhKhrnAVHsSfqXKNrZ6DpFwj78BwrgW/1T+dG5ovICkulxibtXu75
gVQ3zfNNC2WyIY9kjlsS1yWe45lSE5ilSiC3QTICewAMlCpRg5ovngjM0zrF
Cb1wyujS9hhSewKlB8vuxzJtSbSuFHr7tzTu53jqsyCCJ44VTKzJErSqRvZ1
M5Dl0ct/4EIhidea12u6V2GUWXc0g+jsNvzsL/VDxyiEA9AajsGcyKyoZ+C0
bFQZVxjNG8XK2dL6paoWsMQLcbSeBJatSL0I6odhWSGMZFUPgkJ6O4Q6P/j+
9prra7tvn+5/93CM8HdKCnLFRPnnQO7wdI196ehx7brDyTM3/vHHpd//uPTX
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
ORQRU94iNfXXdY1rexcaBpe5piGSooOh7VX1/miePgD29BP7mqHt6rYZlnFM
Zl0xTKKXJtFr4hPH0IvBCioG0MtbcNLlQ8eiXvRyP6RRCKFk/SK+ZoDbsQ3m
H6VuFJ3Imgn0kXA8a217/M71Xze98FvWpT37cvMxVLVxHYqjXY0q0CVTu2LJ
HXASq7uOm+YRdsuWagRhtW4QlRNFinFSwwKYQLEVEfYgrJbdSv0aq3mT374N
EQaqTDUVWqjxTq8NydMEE+ryRKM5giGIzNTGVcCP13ZQB35gBCkUDgZnyzGV
LTLzQfM0wjYsJZfpPgSXFfBtSvOhbgip70NI0pGEEk0aRc8zztM142XygVLp
YLl8lKwcJ6smYXZQNXOJJJMHRuCdUeObJQH83oRToD4nsD2z5HGUdrxovET5
o0S5kl87n1MNnnAmp3o4m9cXTzYE5IodQ/LueyYHEPjhRWq6fhH1GJYDsAey
fkTSe6QZQzfkoPxDiNC2z+7cYLStwijs2QL2WiaRjlnUAsHUkHatyXu2lLaD
2p5dufVI2LUHMSST1wtvHKgDxwKZt7R+vkg1W6icggDy9WXoW3vvB1feXD1r
f/Pio3s3Hl+7dOOP30+eOnXmtxO//+1fv/3ttz/+OPvXn1dvXbv1CALI/buf
Htz9cv/O10cPXF6/DvzqHPvZOebluyBP//SAqDwXP6zjl0in72m+sYXfgjMd
v0VhClkSg7Vvbrd3dsc6tTOyggwvIx2jGzA2DSwr2ybUHVONkCy6phUdk8qu
2cbhDYllXgQ/9v0A6pp+stc4ulM/vFPbsyTuXmwYQQMIsFc/vAcFBAJ+8kEU
v7px9PiA0Al7j3nmfUbrFuh/gWxU1HNQazuEmAnyheI3iT5SMXwE+FV3bUD/
BfXjN6/Vdu3Kuw7rrIikbRdKaNyKKzYRRFNRpO5Euq2sfgWC86/PPHLat8o1
U0WysSLZRKVuWdB5LDYjgk6UKMgmEJCVvWhOgRiYQmvzz1Z4YcXo4p5otFgO
iWA+VzgOPbe6A5HZEEbjknYQiSc2eCdz1dZjjm4JwPsaSc2q6uAZluFXKsuR
rGsPCIRfxRPrybLRMslAUU1vgdCaV41Wvqi3qHaAWDuUUtEUnKcKzFUAgYCf
Z7oovKTRPV3ojqv9nq0MLtBGl7el0HuzuOO5wskM5iCO3YdjmsPylN5Y9ofI
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
jTX0r2pmqW6SPMc11+TeQ0O4qw0egwCaIsDG+tkcujPXdYBYRRrm9IEpc6RL
7OmTh+bTPWm5rsqmtUxBrkRQZ5+uxgSHCQD6sV1VoB+4UDB7YEchgwMJkW0r
gvvCyCHEYWTPmfgxEE8UBIfQkkVa0mAVWQ/p2ZJ4tmX+HXmgrPAX5a6ENhBX
+wN4PvvOYM+HNz86f/2DD6689fm9d7/z0//wh/PfuHr/h798+39968L/8njw
a7d7//K9a//j+dv/+uKjv/z84X/66ObX/vMb//Mv3v7qN77/b77/5ld/98E/
X3/0wa/f/c67n/740p3f3n3x/rUn7zyfuHun79bbn3/w+wsXbj8fGp4nzeNF
ZKENS9OIzWG9P+dI7IS3OqZIgav38g0hpjqo9O4ovWWGJorjOxZp+kW6iSD2
iR1bmmDDnDjQx/e00T1lsMm3b9HUMbrUz1MEleaMLVD1xjtjBIQ8r9cdfeu2
V3hr7zrA/nwduRhED9Z2hhdY+0uc6xXeDQzsJ9iBgUMkRy8WcYP3psX9WNM8
J7LMT80ywlNk3zTFP0UOjBE8Exu+eUZilhqdpkWnKeERomcIY3+5auxbMb5C
G5a5sWVBHArfqii+wo8s8AKLHD8AxXQtsjyrvABGGAWsCsIr3OACGx4NLvKi
8BJoUezQLDs4xwkt8MNLwuj/L9akyWVR7KxD0BQ2dCW8Kgd9EHkAXlUgaEok
7TZFX6YaK3RzjWtridyIt4cOVbNDUUHErks8+1JnS+Xb04WOdOF9daCt9NVB
97TRtjba1J1u5AsMBOtoypxoY4fyEBJn2J42w1kDnC3lgnzNcddA9E4Xyh6c
pt19CBoiLyTuGtASwvjZijhxqH261LYh8Gyr4811hVcTrSpCW0JHQh0qUDWu
FbqYJVVvslhSrUiiZaEpw5fu/PLx4Hu9E+euPvrJq8n3f/YWRIz/7XcX/u3V
nm+98e7/8Om9//DpvX93pecrN3u/ce7L/3j18T+/+c6//9Gv//2PfvVXv/zT
Nz7+8hcExujL0UvnLn13FnMTTX3QN33hws2fvXfljdu9V754cOWLe3doYmVy
5yCxc5Svd03+PFftkFpD3mwzsnVsCVdExgRb5RfoQzx9GKDxFu2JhsyRw3JM
axwjgKYKKTzbhkjTkTt2FcDJtJzhhiOwa/Vum90li2drdN0JGMLbB/A2hIHr
tpcEB4gesO4JxvoYbUH2RUcj9Bsg+l6T/FB/+wnWkU33JDMwQfUOEWyDeMvI
hgPFDo+RXSBuy5zEIisGTHuG0r9YMN6fUt4eE98Zl71YNs7QI2hxDrDES86x
QkBa4BKo0AIX+kFoT/vgx2JoYRIjzYAyoyWZNUESxHlVlII+VlrASLOr4uyK
KLUmyWFkuSVh/P/NukVB5AzzvBDgjJ+rkgQQDwAdtAxSfBaAVeT+zENVEbwH
ANgI2NBswT3IXKpmi6orC+0tSJ3GaNeURPau1McPDIlDU+oQiKeHMBjrwNEN
6qdLHKjCe0A/rhu5CgakDADQj+mqgyGkWbepphJUXlP+9CzRGDLgDAAZVMQP
RcEWUoh9NVmwIQ/XZYFdib/EtsYE9jhOqB9Y2bhwp+fp1ML3/vDe17//o5cD
/f39Tz779Lf3H78nVUxrrTNK09A648uJpXf7p37/uw//r2//7L//3YW/fOeL
v33z3L9958pXXs38qmf0x1fuf/NX7//Fu5/83buf/eN7H3/n1+988zd/+ub5
Sz+5dOPNx/3vz65en1+//mTgVz/+3f/+rZ/9q/cuf//x0KXL9y9c+PLCw76X
RBYvWW4ldprlg262eqQFW2gM2aK1YL7rgi/Bkzf6cmpHkq/3gzxaItuB/H6w
dGiNVeSutNSWkjkycmfeFG9AjgsUjwLpdjDe9EfrgECsMYp3jOAdQL/BdTvQ
r49g7yM4+zZcfUTPK4L75boLAMQboYQmGfFpVmKen55ihScYwVlubI4XHaf7
+vGm56uaORbwJzKx6Xm6qHowIbk/Lr7axz53F3dzRPgIpRwiuGaY4UV+EpiD
kRVwisIMMzjLCqG44X/BAh/IA+k1vixMr4myaGkeI8kDx1aFGbhnRZQ55VsJ
Xg4t8qishFOUliUpwJI4CVgUJQALwjhgmg2fMDwviAFQ/Ci08LQ1eXZRlPwX
LInhhSlgMgArh/eCN4JPmIb+n28K4iRlnmUqyzxQQU4QBqb/vMedc6t7tne0
MX1sSJ7oE8e6OLJYSxTYB7MnOd1lC+KtMNCGHAGgmuBjR2YZttEN3ThZP0O3
zLMdCxznNNM6STejWFaM1EvWhDe1QarGR9O6740sPJlYeD69eO7GnX/zN3/7
8S0oiJ//4Jc/v3v36gZ26uJHP75w/pvjY3+anf/jwtrbWPKHMu0zmXGAI++7
dO8HP3v7r/6Pv/nvfvLOV2+/evvKgx/+8cJfvfXBV249/uXHl7//s9/89d98
/X/66t//qx/+7CtL2BfP+j660/P754PvXnvwo8ev3vzg8/90o+fnk6u3ZtBP
ngxdfTJw7/ObFz+78cWmgJer1cqHR9Xjbrq6bwtvqe1Zs68WyByndrrRrY4v
XTcHCip7XG6JaJwpQ6AgtUZZajdL6aErXESBiSgyUyQ2AteAJUsxG2I0UQQt
liSZAMNGcJ2V4OEN1xDJ9ZqE7Pw2vBl8vRkcoYbG6BEg3gw7tcDNLvFz8/zs
JCMyTgvN8eLw281yIyNkxyusDmw8uHpw8l8O0q8NMG6PcIGB9yYlQwTHNDsE
vyYyI6ksLkuQRbnwQqDZgjCxfMYWfnSOF4EW7kGUTVJAS5Edg4FgqzKgQWFF
mlsSZP4rAwtYefFfsCbPAakgNAFWpOkzNgKAb2c8BAAn4R60IodVFeADLEnT
K9LMCvKq7L+0eN32mjIPDyGPyrPLpykM/jvQZ5w0RdNtc+01sbsJRVMRbKsi
bVA8bXwfoIsfAf2AlgBDCjldRZNFNjtCBhV9TZ63gQykeBpETQotDa8K/ThZ
ZFOfoRqyeHlkkeuYIGsnKZpxonwIKxha4wyu0V+h1h+NoS49fP5wePRWb+/f
/+Cf//FH3/vF27/9xx9/55dvvfH0yVUSbvijc//58sVvP3n8wxs3/+7a9a8+
ePytnt4fXrnxT32j56eXbol1eBxjapU68XLi1u3Hb5379DvnPvnuJOru5Wu/
fu/8j978zbcufPrmk+efD43e+v3b/3jj3u8fPv/Td3/yr89f/ObA+Pkvbv/0
5pPfX7zx63Of//Lesy8u3fjoN+/9smeox58Oyi1qplTIUWn5ajtL7uKroxpH
icTTr21KFkiCFapkeVM8hWUOLWz0z61PoBmjq7T5DcHSpmQazxk/vflqBj+1
wpxZZqLWOEs43hpRBGkURQtALJ2l+adpwWlGCMQNMEYNjoOXY0Zn2PFZTmqe
k55np1BAQkFuhpua5iRnuIlxeuAFRn9vRnB9lH53mnt5gHRrnDm0bhrEG+9O
Ch6j5DMMP7BiihMc2XRNc0N4TWnThuzluCLPYFVFjLoILfzoQIl5hIeJeWEK
WbAhyyMtQoz/1i5LssAZtCIPLzk7SRlanLqEURYAcD/glIoIgFHQAslR/BhC
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
Et2d496aZFwdIX3+CvvJ81XAZ73oz/swgPcezLz3cPb9R3MfPJk91zP3YQ8K
cOHpHODt28Mf9cx+Obj6+Yv5L/tX7k0Qb4/hXizTX63SB7HssQ3hNFWGoilQ
NNkcRTKG44xj2UPLlN5Z/MD8xgJZRJPZRMaIwb9tDu3aY3Wwyo54zR6rAqDj
y7W82eZZa4vt6HxZAFhuR7ZlzbS0kbLAniQr3RiBCc0zYwXWTZV/giCep6kn
iZJllpGs8GtCVZomCPQjyx1EiVXuSlLl5nsDk+ev3nn744uL+HUqj7tBI3/4
6fm//fpfffHlR7j1xbGx/ngsko6liul82BmMuyK78VLBl9oKZmuxUjVarCW3
oAR3tisH1Vq31ewedFr1cr22U6vuHB/tHR8dJGLxSCjaPe5CcW03O4f7B0C2
VrPebFSgCu916u1WrVbdbdWqCPf2Djq1BqDb2ese7Hf3Gt29SinmomGnem58
eO3jX178+E+f3Xn8xy+f/uz8je+/fRnoN0mWcaxpugkMxo7QvS307Iq8FYY5
h5UGVoU+nCzIcxSVwaoxuWdOH1gyh+fu4j59Qr45xH+xoB8neueYsXl2AsVJ
UE0tum2fZt0j6Gtriq0lSR4lSE9zohhlaV1bJpvqNFuTYq6tSNOvKbYnK7IF
UXhZGsFqEgRDGrAGGshzDlMNIGs4VRLF9T9fVVwfZX/5mvHlEPNyP+3aCOvK
EPWzl8TzPcvvPph95/70+49nzj9FXXy1+nnf2qV+9JevsbfHifemyABEqabJ
j2c3XywwBzH8CZJ8hqqepWmmaWqQmjOA2hAUfrI6SNVFaPoofAlMfUTiyutj
FbDBxljVld+35zrADWdh37dzEqx0A7vdwE43tNuNVrqxajff6ZYOurl2N17u
hoqHnkwDmKbxFg2BXVu87ky1APZEwxavAsyRsiNZ9xc63lzLECxKrFGJLaL2
pgl8PUlk2pRaARSJBYBYO7Vb7kit0pVophrL1uI4OmhF5qjAFJM5MiCeL6aJ
C5tSlTttj5cNviSFKx+dW5laWJtZWF5aQ5NpVL6Qp1Qr7HZrMpl02l2paDoV
TiV88VapUc/Wcr50I1Vu5aqdQq1Z2G0Ud+qlrfpWsbpd7NR36+XSXqPaPTio
7+xG/cFcIgP0A5zsHR22OsedzlG7vd+sHe81QSe7J4fd7uHJ8eHR4f7x/sEx
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
       "], {{0, 160.}, {213., 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{213., 160.},
     PlotRange->{{0, 213.}, {0, 160.}}], "\[Rule]", "\<\"n03888257\"\>"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJyUvAdYW2e673uee+5z79nPOfuevc/sPXtmT8kkM5lMintc4po4zY7txL1Q
jem99w6iClQQ6giBEKIIBEIIBEKAhAQC0buxsXG3k9jJJJn0DPe/9OEVBTtz
7p3nN+v51qcFY8RP//f9vrWYZy9Fngz4P/7Lf/kvsf8Nh5M+iW/ExPgkn/oX
nJyJiA0OjPD3OxwR5x/oH7Pr0n/FZBX+a8d/qfFzL72/bY/3eycTPfyKfMO5
/pE8v/ByiihBYKzYM5h76HTagWNxR92y3YM5PpEC7/DyS1FCHI975e05HPXK
bp+Xdnlv3OuL41PZsNcXbNznBzbt9998IGDL64EAY8yQVwF5aesbQU9eiQEg
80+yGVc+jS348qexca/Ppn2Xthzw2/q6/7Y3AnDEmJzSY7B5vy9h0/7Ap7Jx
H/5JARv2+hMwJvPbDgSDrfuDwJZ9gZv3Bmza4//z+L66F/hs23Nx627vLa95
bd7lCTbt9MApPYPTjTvcwSs73Da95rFhN8Urr7lv3OW+YacbYdNOd5otO903
48rtFzZtP7dp29nN289s2XF2685zm7ef2rjtxMub339x49FXtrz/0qajf9l4
CGza/sHegx5HT4ad9Uw+45F8yiP1tGcaAeOT7ikn3JIvXMo+dzHzrHcGjm6+
Oe5+uRic9kw56512zofi/KV0d/8sn9D8kDh2VAp/x/5Lbx+LPufN8A3lQCoQ
GCUMiZVAqpCECp9w/gnPvCMXss75l0CngDhpYHxFcGIlgGNn/ZgnvPNP+RSe
DyiFdR4hXM/QMq8w3sUIPl7F9b7RIp8oIbgULQK+MWK/WAnwx/dJkIGA+AqA
QVBiZUhyVWhKdXRWXUx2fWxOQ1xuI82605+Al55GLL7J04hMV0Rl1MRk1cZm
qwgY06dkDKIzlYSozPqnEp5WG5aqBKEpNQRyGplaCyJSlOHJNWFJChCaWA0C
Y2VPQ4q3OiRGCIKjBUFR/MDI8oAIHiCn9Ix/eJlfGBcffO8wFs3FkFLgHVwC
3H0LPPwKCV5+hZ44vZTv7pPrcTHX81KOl28u8LyU5eadft4z9ax78nko4Z50
8nzM+6cjjp0KP3Eu+oJ3spd/NvHKFSKYZ0AeXDrvkwXgGME5zrzgmwGpAAZe
QbkBUczQeM7x8+lulwrwL8ePFhQjCIgqh1GhibJLEVRkwZPTl4pO+zC9Qvl+
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
W28raxq4FJx64ODhxJyMsz6e7x0+UVQiVfdP8Q3jxboppna+ov2mrOW6ovW6
vG1ZYrgmNl0XmK4JDMsi7ZJUc7lKt1zdflXRNl/TOt2kn+40zRl7Jrs7rHJ+
ZZCH1/H9e72PvMVOiGwXlfISg93e3eXheSwhISQ9KDD2/bOMUwEVQRktmfwR
sUbkGck5cFz84mudL++a37z7/pYdn+/c8f3rB35499TNQyfnI6OseVm1udmF
8YkhXiGXvGMq1BaZfkLSNS81LCoNy3UdFA3G6/XGq/XGK6Cue6nWcFmhn6/S
zVZqp2v0l4GifVGunavQzIrVU8KGifL6MW7dJKt2HGW0UI5uf6hAbkN7xqy2
QyqWYkiimQGsqkGYUyofgEIorEy5BaC8MmVmyAbwUrGkt1RmhldYd4iUI/zq
Ia5sgCXt5VVbuVVmKERiiqcYENQOiuuHYRfmiVcAOQYox4Q9+eVdRCeaJ42i
84ru/8lu//92ayI2h1IrJutxQcyoic6oBlHpUEsakSyGVwnZMniVXVyXW9JA
bguSjMJKkKQWxlW1E5wKS7HCylWPCusc0rqJ6oYFQcNslsrBt9zKaxquMIxH
pBR6+YcaRwYaOpqOHjl8+syF0up6uXmM2T7C77osbL0sb71W3YJ0ul7Zs0J5
1X1N2Lksb79Ro79V1/9A2X9P0XOjon2xsm1GqZ9p6JzSdIx1902XllSE+EW9
tfvgga2vnX770Pv7Dxx9Y88FjyPH39t9btc2xrGT2sC4Vs/wNvew2aQC5Z73
lC/s1P9+08xfdn24afenG7Z/vnXbV/v2f/3OyS98Qv9eIb5dI+vIzZKER2We
8Qk67pXBKKswDKqGr0q6Z5Tt881d1xu7VlSGa01915v6lp3H642mZQgGu2o6
FqSaiYqWyQrNtKxlBkcgbZ4RN0/z1bNlDdPsurES5UiJYphQWmMvrR7kKIdl
LXPVugVe7TDMQedG7aop4JuN2sqrtrKqKKiODsgHuNW2cqVdoBoRqRywC8FV
rrAJa+1Y3hJgFIBRAANEVmmFCTrhCOUQZTANxbRYZCoUGBFcAI7R8UUHF+0Y
oNek9M6q642kJzft4xlq8v+uCbXI/x9mTKYiNqsmNksRlS6LSpWiv4rPqoBX
Ocz6PJYaDRXpqcgOA+1VTeNsWbW9RDXEaR5D4aion1Y0Lgob58q7b8RVW1gd
k3ztYGxmaaWqwWDv9Y30cTvzwc4dr54NClFaRmvsV2rtt8Xahfqu23UdN+q6
b1aZrouMV4TdS1W9NzXmj1oHHpa3LYqNK7WDD9TDD9X2DxvMt2p7rqi6FjQ9
C+29C0bzQilL4ecT8/YbHzz7mxdf3bRt46ZnT72zPf3kEcnJMy3Hz3cdPmM+
fGb6A8+Fw2cmthwY/92Gq7975aMXtn2yYfujHTs+OnDgwaHj3yWkrlpNqwNd
U6XF+qhY2RmflHdO+Xr4SjT6lqkrsp5JlW5G23UNUikMy3AJXjX3r7RYbgKN
+UZzPwXUQnZBEuQV1EJNRF7xG8YFTTP85hmeeorbMMGtG+eoHIBdO4Lyx1EO
QT98iaB+FK0aV2lDt4ZJelEAnTiKQcCtGcJnVlQ/Km4YkzSOS9UTFU2TMjWF
tGG0Qj1a2TwOMJA0jMCo8horjsguuASjoBOZgYRlVTau3MqWWQCrwoy2jSQY
cYwA0whUrJUZiVp0apEtMnqHf118YQkJteKdapH/z9W4bKWTmphMeUy6LCZd
Cq9S8qqRV/AKvTrpqVAEs4oayV1CRqmmrvUy2omShmFOy7igfhxe1agvowPP
b5oSmG9I+5f4GkuFsiUjM3v7gVd/8ev/XpyZzMzJPXLBg9XQVqa3i43zMv1C
c98djem2uu+mov+qrG9JYb3eNHJXN3Cn0XStfeqvzZOP6kY+VNruKgZuq6x3
m0c+1k98Wu9MDOPIPaNtZXrxs9a24ddfP//CH7dse+XPFw/tZZ0+LnvrUPuB
QytnfT/xCFh58+i3x92/eP3IRy/vuvvcxtt/3nxr244bBw9cee/dK2fPfZKb
vbo0tnp96lNF5UJqVv85//KDxz3ffEdQVd06OqnsdWgNczo0e+1Lyp6Vup4r
DT1L6t6rzf3XIBUBmkGtpr4V/IOx1kA1hFrotQSNE4KmKWHzNAHj8kaqOPLq
Rvh1DggjahyXt82IGxxoIQQqO9Ti1tpptWipypR2XA/90Lzh2xJgFxyTNI5K
1WMVTeOyZsyM4Vvh++C78WuHyhRWttwMuNUDvBobZgASj1czRChTDLKdFTYf
q06hEWAA8vhdNDCK3kOj92PpO+BPPiSG9SO1R7GmVh2Iz6l1ArWq4zLlsRkV
cZnSZEZVZmEto7SR9OpELeIYZvJYLfXaxXLVCLPR6VXjmEw9Xdu6LGtdQi0r
0c+UNNnabPM5WcxdmzZ7eXyQlRIW4XZhot/mHxYn0hhlvVPKwRvNtnu1XVdb
+283mVdqrZdRerTTdzqn7zSb5sUNloaBq7W2a3VDK+qx+y1TDzUTj5rHP9GM
PtKNfdox9onB8XGDYcE+9Wl988ju/Re2b33z+MGD57dvytm7v2rPGzW/+4vm
3/4w/cqOj/a8/c3rh1bfOrp64PBnW/dd37hj7rW9U8cOjXmcHvHzvs5mrN6f
XX0w90mF4Gp47OL5wL4zvj7bdpSzSzS9vY09dkPXXEvbnEQzpei7ruicV3bO
1RrmkZmqrsu16L46F2o6MLmIggjglcpwFdR2XlEaroicXolbZoFIMyNohmxj
5fUOGIJ04tcPy1qnRPUjfIRJnR3HslrUxyGiFpGKeEWyCxWTCIYjxs4cG8aX
00AqpzyDkIpTZWFV9gOiFsAMXAKQiggGr7DYZJQbaJEwBrm8TgKRit6bpbde
Xe8xuaqVVOBUK6/JqVY9SMhVAeJVfFZVXKYMXiXlytG0oxSSjEIpJFJhQN3E
YbeqdYvUzTiNg6efErVMVLXO1umW5W1LbO1sedd8lWGyUTsQ7x/JS0397s7i
dE+L37tHeOlFzS09reYZ9dB1le0mSlvb4IPOofsttuWBW581T1zWTl8prtVc
jEi+4B+bUCTqXbxnmLqjHbuptCx1zP21c/5vDfZ7nVOfKXuumaY+Mwzddcx+
zi7X/o9/eXnTS/uP7tz7xr//Muy3zyf8t18of/mntn95pvOffmH9H7/8bv/b
q++8//mrex++dnDVP/izmMjhIO++aL+2SO/kd7YJ07wn1dybpfnLAWFLh92W
3MNEZ93wbzZ0GXXGwR7DjMGwVNtzTdQ5jypcZ5xXdc8pDTOPBYNLaODnQHX7
HNp4AjVun6uEkFo051OiJsoogIzCohL+VLRM8Gqsqo4FSqr6Qb7KKm4YKcdS
TmmnkwqQXbIy1TAgaUasI50YLsCVpAcjBpIZLAHQ9qNtIx0aBjjF6uDHhq3a
hjEmserEOhTkCY0MQXcuv4sGp/n8Xmqr1rn573oziB6T7KJJKWqlKGxx0pxc
0JRS0AjSitQpBXXJDGViThWkQh2EV1lFKrRSqIAktUgPD9PglbbzcmXzaHnb
qLhrukI3jRa30bCs7LhaY72FmfrOcXP3iLqYNyKRrF4Zv6Fv9N39Oiee0aLu
aTfPto7c0Tge6IYf9Yx/Zpv/QmO90j57XT0+nV2liCkujkzJCIlOjExjKPUm
nW3Ksnh34OqnmpEV05Wv8FWtjgedk58MzH/Z0nvFOv5gcv7T4pKaixdC3928
+71fPRv/xy3p//y7pmc2TW7av7Rp1/TvX7jy3F++2f/21wfeXdm53753X/kL
z7n/6//5wX/8X+/8x3/9YMO/7X3lv1984/mOAPeV4PAPzwUvnw9WnfMcqqld
nl3Qdw40N1jaO+dVfdeaHPdVvUv1PQtELUhFe0VSC10WAb0WQaadhVfSlmlx
8yTUElLbFNROBUHRNlPftQCpJOphUcOQVD1KbVw0oFN1kFwCKJrQaZ1Xpco1
r+AGFozQg1gEcAp/XL0CtFdkdek6+Y+9glS0V643ldY18y5qaeFVqhN4BVIL
1U5gV11qviqZoUARTM1XpOfXoBSSu4FwCXWQFESMUQe7TEt1urEKw1hl70x1
10xD92JL7/WGnuX6wZuq3vkB25K9tV8dk1rv5d0WcEF46r2kN4/U5PD6O0f6
Hde7ph7qJx/pHZ+aJj43jn5oXvjYePmGwNC16f3DR3y8sooKo2PiLvr557M4
Y/NXekfnuhyXNbYF09xD08Jn5itf6sceDC58PnX9G8vIDcfYzXt3v/74xl9j
3YOO/+EVr399Nur//pXsP1+ybtw9s22P47kXb2zdeXvLzrvb991/99jgGwez
fver2G0vNKaHtOTH+L798rlDLxzf+su8PZvnAoPmjrlPHPdRu/kOy2vsPf11
dboB84LJulKuGZb1LDaYl9V9Sw2mRdouFMS6bhTBRdhV173khFokojJCsCpn
asl1s3LndoSsdVKqGZc0j1W1TvGUFv3gbXglabDLNQ5Z07BMM4qyiGYebT8N
CTpO3TBgq+yAVTtUohwsqaGeL0KUEZGcu7KUXTCqQGwip8QiV9noeQK5nqj1
j70iatFtvGszT99zdDrWRt0tonbstWnFLalFmrSiJgCvUgvr0wvr0wpqsRik
96/IM1d0apH9K6jV37+EVb+iZ6xmYLq2d1rTv9g+sNJqXq7tm2/pn3VY5vTF
0qr33VQHDsq3vSh8bUvh4RPaUum4eXpk6nbv7Med0592Oh51jz3qtN913Phy
8PbHkh7T828deGbblvDY2OTEpMzUpPCwkOGRUcvwhH125erDHzocK73zj5pt
17VD18dXvp678VWvbUHTauKyJf7ufjFewWc377n4+1cif/Fc/v96punPm+w7
9w+9vGlx647ZFzZceXn7g7ePzhw51vjG/p6EsNWp/htamb4kgRlzujT0ZNb+
zeI9e1bC4qcDYnUhse1MLjMr/8gHbo0tA122ZWXPvBrdoGVZY1luNl+FXY29
lyEY2vh6I2VUvfEKVovq3mvo3uuNV8n+gxJNV9cSRTfVjCHTqnQz8rbJmvZp
TnXfwOxnqs4ZaeOQQjsOteQa+Eb2KKhdVhyBM+XGufUjAGqx4JXKXkrUUlLN
GClzJIVIBJGwove+iD/EPbLXSktIJjFDvHJVy3kjac2rpwLT1rX0TsfaQSaO
azeGWjOYGoA6mFbUkFncmMXEUZVRVAupEFnQCas/BBTUgk6kICZlKwbNCzqD
o840Uj84VW+Z0gzMdwxe1w1c7Z643Tu0aNP0SzzDavcdmj1xdvbwwanzx/N2
729ilDp67UNjV3pn7hvnPkWPZJ7929i173tnP+q9em/g5r1sWeVvN25+463D
STEJcSFB0YH+em3rteu3HTPXRi8/aB9cGr/93cerq4NLn8lbrd5haYfedzt0
6PiGlzfv2LJ98wuvvLVhm9vL2/x+93zQP/0r63fPtm/b2fXSK73P/PHunje+
fuuDu7sOzu15c/z4ib6Lbm3+7iuCotu15Xc6FMWeh7yf/3XY88/4/8u/S947
VXjqQlFYdHhI9K//uKGiqafDfq1/9mGH467WtqK1XWu1LoOWgWuUY/3XmvqW
G01XsEjEEhVrQ7K15dw4XcT60bmEvAqcm13ztR2zSv0MvBLWW4fmP69pm6hQ
25Xt45Uae1XLaKVmUtY8RVZ8axv46nF+wyivcbSswcFtcHDqR9iwq364tI4S
jOzYs2vsgKMcZjt3xkqqbOtgyq3FlQNFMgvZzC+S9ROKK81k4Hr/KFfYTd2j
JDeS+L0E561wikJhP3DeE+91rY+P23vnnW42dWec7K9mlbaC9OKmDKaaej6h
VJ1T2pDFrEMRhFcIK3RTBRwtHVnJOTXRKVIkUmeXXd1nbxyaaLBOtNhmDMPL
+sGlzpEr45PXF/S2Bs8Q7fbXr79z5Nb+3UvH3uHs3a1jlswMDI5OXjbP3uld
/MSy8KVt8ZvR5e+6Ju4Z5+85Hnw+fu+RX2zKgQNHjr15NMjtQpNc3KysnZ9b
6hucHJhYvvpwdWDxYZG8wy+Z9ebpgGc37d2x7+2jx06cPnmqQiqOiIo8efi9
V3/5q7PPPOf/69+E//P/w/i3/1X/p+esL2+4s/v1L1576/Zfdiy9suPywcOm
Nw+Wv/xC4r/+c/Wh1/vTIq/UlA+wc0rdT8bv23vq2T+Fv/f+0X0Hz3n5vX7a
c3D5I93wNYP9Zrv1mn5wRTe00m6/4eSWbuhmm+2W1nqzxbICWgdugRbLTdiF
4KJ06l0G0Mzp1WWqaKIl65xT6CYajQuWqUfwqqp1pLF7Vt4yjLG8ZUrmDCsa
eIU6yG8aBzz1WFnjKKfRAdgNI3CMWzdapnLAKMB1botBLZZiiBwBrRl1W1xu
pY0iUtHQN4+IXYCYRiyiKRKZaXDq2tU/LpEG6oEKLvWsBdlizWG3gazSlqzS
5lyWJpfVlMtqzC7BSlAFteASpCrktpH9dhyxJIxKlkxYZ43GIY3Z3jQ8ph4c
0w5Nd40sdQ4tqAyDjuH5G5224dissTePP9j/zhd7Xrv11v7ao28NSvkrU+Mz
i1esi7f6Fh+Z5z8fmP+qd/yTgcXP+6982jV/d/rBV12D84F+yZv+uCU7Ikpf
I68RS8x91pt3/7ry8be2+Q+j8iT7ToXsORGw5a1T5/yjOnutX3//w+rqd39f
/faT7/+mVCv3b3rpg5f+FLzxLyH/+YuY//lP1S881//Si0O/+t3CL565++uX
bv1h89WXdkzs2jewb7/j0LHS3/ym9dyJ7sQIWeQleXpsSWRwRnBApI/P4UPH
AlOyEnhSy81PGqwLHdZrQ5MPO4du6IdvdozcMozeMYze63TcBR0jd/T2u6B9
6I5u8Hab7Q6xy2Xv9BrSDJlG7X31LIKa9smB2U+7R26rOiYbOqd15qvKtrHG
rnksfBRt85Wts0CunaPuCrVSy0mhZhLwmyfKYVfzeFnTGLtplIt1JbUbRkUW
7MKg/PGpc991mNgFtWjITSJyn4iGnLremnQ+/E+Ni8UWGlepyKmrWo97sC7A
cLJ2F5LbnsvR5bC1OewWBgXsakRkZRfXAdQ+4hWphkVlOtgVnyEfs090m6yt
ZrvWPq61TncMLRhHr3YNL1omFscHHDPC6tFLEVcPvv/J3oOP9uwcfW2L/Phh
i1y8Mj0xs7BonVu2LNy3zX+K9nto8YvBpc/7Fj82zt22X/nwxsPv8hiCAzvf
OrR7t+f7h7V1qoXp+Q8fflGhbNl/xP2Vfcd2HnJ7cfd7B465mR2z362ufvG3
r7795qsfVr/92+p39z5/EBl0ce+z//n2L/8l5IVnE5/5DfM3v67/7e+szzx/
/6UdX23Y8/mLOz/ZsOvahm2Df/jTjdff/tjNc97DXbp3V8L2TTHvvh556ni0
j8++XXvjUnN755Y7Zq+1Tl/rnL5lnrzTaV7qGrphGL7V7bjTM3aP0D1+zzB+
t2v8Qcf4/fbRu+3Dd3V22HVXb3Nif9A+dA+mIc005uvoPLWWq22WK6qOibk7
33fYrjYZxrWmmZ6h5Ua9o613Xt01X4+1p35WpZ9GrAEUzSrdlKRlHAg1FI/t
mixrmuCpp8oaxym7GkfL1Yg1HB0YU32+ysFSOkprRkoUQ0ynVOQOkestSNqr
x6ekViK+oBlafQtTMkBYpxaZwYAURNemi8HrpgWjNsEou9opOG25nFbYlc2m
qmF2CVILy0BVPlsDr/JYzdQfzgg7cExl1AyM2zss/XqLvcc+32O5arStdDmu
64dmbGMT8z3G+azcxRPnPzxw6MO9+6++vd9w9HW2x/khve7G4uXxiZmx+euO
y3fNUzeGFj+0X/nYunDXvHB79v5fzdOXx5ZWFlbuREXHHti9Iz7Mf8Zhv3/7
VlER8+13jux94909B997YeMuv9B4x8TStz+sfv/96urfV1d/WP0G/1n99sPP
7tUrpXv+8twbv/mV5/N/jv3TC3l/+LP0939ue+bFqZde/XL/odVjZ1YPHftm
6/bbv3/m9h+e/f6tgx8dfvf6mTPyrdv9f/mbjMOnkt0DPU9eTMniGIYvG6Zv
aOwLptmbXaNXjCPL/aO3+0fv9jnuAJPjjtFx2zB6Wz9+WzdxRzt5p3Xitnbs
TtsIlV2dg/c6bfd7xj/T2u43m2/CLuRb++C1VvNcm3nWYJu7/dlqc5dN0WRo
6bR09TnqNd2Nrb2VdYZG/VBD+6BC06vUWmr1trqOYU3fjKzFVt89Xa2fFDeN
VrbNKTquSFoXBM3zvJb54vrR/JqB6t6rzIaBsla7qH2U3+oobxnjqsdZtRTs
ujFO/ShZSFJbFko7vc3l3MhC5z/EqhoE7OphwKqyl8qHSioHqYe0JQMlUiv1
lwJOMCY60Zqti6w8YR9D0Mvg9+fyTdk8Y1aZgTxhCNmcN4b0IHctwVAftWjj
81jqojJtqUBXJu0ukxowRt9lnhnSD/YbbA6zfanfeqNv8JZx7FbXyOzIqGO2
uX46JHT+wFsPXzv48YE3h9/ZW3lknzghZqDbOD81N+KYnJ6/PnXljn3+1ui1
D+1X74GBuevTdz4anFscW15euns3n13iduG0Y7D/1rUlHrtk/95927Ztf+fd
I9tefW3/gbcslpFvv1n97tvVv3+3+sVfv/7ha8quT//26O+rXy7MjLy9Y9Ox
ja8cf+a5C//2a/aOvaW/f0H2n8+1/+5P0y9u/GTX7tX9B1b37F7dvu37l1/4
+86ttzduePjB8fFjJwVb90rO+/Ei0wPdQou51SNXPhpe+bR78trA/B3L9I2R
hfuW8buW8fuW0XsAjplGqZ+3Y+JW29Qd7fSd1knKLt3Y3Y7he132e4ah+23W
+7qRjw2jDzGjs17TWubbB+YhVWOH5dHXq/apRY5Qlp5TaDANLC3fRs+5fOuT
6/c+m1u+PzSx1GufbuqyyNWdVRpjU89onWGkqnW4um1c1bGIKilWz1S0Xa7t
vSvUL/Bax3naYX67vVxnk3WN81pswrYJUduMWLcobr0s0Mzym6eQcsg6rC6x
FhA1jpNdsnLVCK/WAcpV44BXO1amHOUqxthVjtLK4RKZnSO3syuHWLJBGEUD
wegQI2qttfFOo3L4fY8xUZT35JR3O0Ose20n//E9bsquUnU+u6morAVelcu6
RdW9vIquYl6rdXbEMGQxDI32Oq6Yhm6a7LdNE7d6HbNzExOjFZKRC54Lu9/8
ZP+hW/veaNu1oXj/lgGlYnp0cm5mcXR0dnr+xvjiTev09aHL9+xXHoyufASv
xm/cdyxdh1dX7t1Tt2uTEmPv37qu06jfPLAfXh08+NaOnXte+MuG8IjY6yt3
Pvrw078++tsqVf++W/1+9avPv/jbl48+/ezOh7cuB5w7fmTTK2c3vOz9x+f9
/v1X7Fe2KF7eZNiwdXzr9hvbt3/86tbPt2z6ctNLf3vl+W93bru56eVHxz+4
5uGlPXrSUcj+bGJeJpDV6019cyvtE0vtI4u2uTuDYyvWkRXr5H3z1IfmiQf9
4/f7xu71jt7tGb9rGL/TOX2vY/qefuqufuJu5xjVenUP3+0evt86gEB72DPx
EG0Ywko/uNgxON9pmzaNzPTap3qHxu98/Nmjz7/5dhX/fArU9G9WVz//dvWj
L354+OXqrYdfzl1/MHXtXotppK5zqLFrHDW0te9qtXZa1jyh7FyshFRNI2Kt
g1VnrDGNshsM/FazRG8va7IJWyekugWpdlGkmRM0T4haJip005VtM/K2GedO
2hT9zBg0kzbPSJqm4aqwYQqCcWscCC6kFvWHJ1XD8IpYRMcXEczVLqomis25
xCUnlGaC3jyhiXoIltdN3xuiU4vBpbxCXhVwmuESwkqqNFfUWmCXbXKkw2Zp
t412juAdWzbYbxjHr/fhc2i3G7Oz+t89urL/8Fdvn7i8a1/V5uc57x9cHrBc
Xrg6P3dlfGppauGWfXalf5LyyrZ4d2zlkXX+5uj1u2PXbzmWludu3baNj01O
jmelJR87fGjjKxu2b9+5d8/rkOullzfLq2o79MYhq+OLT/62it/KNz/Ars8/
/Ojh7eXP7l9b/e6LisLsPb/99Xu//53Hs3/0/dVvk377DOsPz9Y9/4LxhRds
zz4z9pv/mP3VLy//6hePXvzj6t5dH27d/NHbb988e67vxMlFFnv1xs2hPtPw
woJ15ZZ+9nLX7HXH1Y/HZx7YR+8MTD/om/mof/rD/skHfRP3e8fvmcYotYxT
97sn74GuibtdY3e6R2+jRKItN45/3DlyH1LhGtP4za7hyx3WqY6B0cHJy7cf
fvHpVz/87YfVr75f/fqH1Q8ffja7cHVu8cbnX63ZBZDBX62uPvxqFWqZJ662
m6ebjONNxmlt3+WWvsu17VN1hln90HXDyDVhY5dM28NRafOk9YXyFkHTgLBp
GOlE3aBUT8IrceuErG0KRhHIBizZKwOyFuqxMWnzHK0WgoujoKQikUW7REcW
PabtKpRYIFLuY5xe9RBoqYhXpOOCV2ixcksaAKO0sYTfBqMq66wy1YDFYdf1
9TVaBpvtM43WuZbBxc7hBbN5eM7Q3eBzybB938rudz49eNS+aatk14b2jJh5
q3VsbG5s8vL49PLY3M3B6RXr7K3R5Yfm2VtDyx/aLt8euXp37Nod+8JVx+Wr
wzOzn37214te3jte3Y4KePLE2a3bdj33x794X/SvUzU1NrRMT85988XX33/5
9Q9foGH/niqKn3+y+tVfv7t6WRgXdfyF5z1eevnwP//PqOdfTPnDc6w//bnu
xVd6N26c3LLx9s5tX7++f/Xdt77atOnvO3bceOYP117a8OiDU3NnznZ6uTUm
RdcKWZZpu+PjO733bnUv3+qevWGbuueYe9Q/+3HP3EfUVtv0h31TRK07oG/i
LsDANHHHNHa7B/VxdMXouGmZedg1chuaWaYf9Ixdb+kbb+t39I/NjS4sP/r6
20+++uajTz9HTK3cvhMdk/Cn51/84INzGq3hy2+o7MKR+sSguH9FFfnPvl+d
WX6gNTlUbZbuocX+sZV6vV3dMaLpGC6v0kSl53uFx/jGJL5+4sIht4DGnsma
dmpjX9w0VtEyiZiCVNJWnI46oR52XcO5Aft4WwORNSVqnBTUoyyOoj5Sfxan
GC6vGeErHTjilF2JRmuAJbMCDECJFDmGTt5cJDUXSqi/CC4Q9+WLqKSintgv
N9K3s0lS0WHF4GqxPERewascZn0hV4NSiLyCWpbBoVajSdVnVdrGFZYJtWXS
YJ20GQfm1M3qM+f7tu65uvXA1c17dX/6C/+NHeMqycSAzWafso8u2CevWMeu
9o8to2+3zt3pm77RP38bqTV0+f/l4izA2lrXfH+fmXvPnJljW06N4hACRHB3
l6DFrbh7oXgIxHB3d3e3ADFICMHd67oru97SNvcL2WfPnunze9bzsUgqyY//
+75rfelD5sFdxu4JfWOPvLS6yFrx9va1srwhDZNRUtYQE5fS0TUqLasuKa6k
khfuHJ09PLvL+Qp69/MPz55xPn/ivHr1cm6uNyk53sjYUVQ8EI50vcrn8eOl
6CvXiPzCLVCpWTn5bWWVxxoa73W0OTq672Vk30khDn+8snf5+hs9k9eu7vNW
5nmGGr0F6azV+fnTteHjzbGTk5Htk/nth4u7L+Z3ns3uPgPHue2n89tPKVtP
QYKB4riw9mRh/RF97SFt/T557d786t3Z1dPZ1Ttc01YekNcekZZP+6ZZzYMz
Y1TW1um9x7++ffL6zfvzcxBNH76cxycnXbp8VUoa/n/+z/9Lx2b8+voDGEQ+
fvr66etvxfH1p3OeXaA4UpZ3RueYc8ztGdr6AnMvKSXLyd0nMjbeOzjU/qan
Lso6o7RuanGvj7TVNLhS17cKimbjyFbtwEpZN6Oim1nRzbq4O8m7U8l1jLd9
GgCM4lHRtQbUKutYATpVtK9Ud63X9mwCqjrXytvYwLSLz2YyixoZQDOeYMAu
MD/m1nMvwIIFz7GMqtnMShJvE05GxVRG2SSA++GO0jFC8SiheBh06aACgjoI
8gp4xSuFIK/oC0vAq+Z5WuPCSiOV3U1dnaMur07MLuUXj1nd2NIwPZbVXpdW
HUIqVNmZ7ZOGNpbXaEs7dPYBkGp++Yiyega8mmGfkrdAyTih7z6g7dwlbxwx
dk6pa3vj84sNzR3AKFU1bRl5lR9+5lNW0+0dGC8oLCsrrd5Y2z7aPbx7dAKk
4nz9wvn15fd7Z+tlVf2B4W1e/qU3HKOQ8qg//SVCQjroikA6RLpECtEnq8xQ
1z3VMQRzxCtVzddyyk/FYU+EoI+vij66IvJZToNj43jX1mYYpf+ov+HXe2vM
g8WRvaW5x3dJDx7R7r+k33k5f/CEsg94BqDtP1/Ye87Yfc7aec7efMbeeMze
eMjaeMDcuEffuEvdPKNs3QWCUdbvTy7sNw/MV7UNdY/O0td29u7ef/jq9aNX
v5xze6pvQKHB4QF7RwctHe3Q0HAymcodb8GAC/rG82+Az9++l1ZW4bOzSRQ6
eMrLD5/nF9lT5EXmylZddRPK2MLEyNjby93L293HzxONSz99+Hx0jtU7xW4d
ZjcPrbaObTWPbdUNsSt7GcAuQE0/m7dFH2QXz7GK7gvTuld5AMd4d72BWkAw
EGIgyng9GC/NeNZxA62VVdjMBLMk7wMjvDvavDtKBQ20/HrqBeT8Wu5O6dwa
Enc7dMVUVvl4ZtlYRulodslwTukQ6NtB9w68KqqeqGqeB2oxFtnDM+RmCr2R
wW6msQcoywwy82hkZsgvZFjH+I6+zV0lg01FfYqpZWdkwOnKAnt5a25hZ565
B6Qir5yyD56tnrymbD6gbj2cYO6DmkjZOCWx9pZ27i6sHQxOke2dbpqYWkpI
ydrYuU5MUzp7hmfmFtJwmX29wztbu/dOzzig533/7tOLp5zzD48Y9EZP335P
/6GA8F7fkGVizs1rgkEi0FBB8TghCJpPKOvy9UY+ERIUsSWv8kBF45mK1rGU
zL4Q5BlE5oOkIkdOm6OPuqeqMSANeVKI5WxT7+7SGTuL9NOdsY3N2d0T6v5D
kKiLB48BC0dPF4+fLR2/WDl8sb7/YmPryebWk+3NxxubD1a27rK27yzsntJ3
zpg7D+lrdztGaJnF9YXVLTP05a2Ts/X9w4cvnz949ghI9cuvL75+P//O+fbu
w9u7d8++fPoMpPp2/vX923cXxnF/nX/76uzq8m9/+n/yigpLK2xe3aQxmAwG
IzwwODowqCwv297GxBKlU1BA2NnbBO71DJO6R+jd46s9U9s903td07ttU5st
E+vN4xvNFxfE6ofWagfWgFrAK5Bg3NTi8a9pkbfLC1RDAM8uEGK/BxqvYnL3
xHas/K4WcIm3w4fHxe7Bhd8+Xd5MK26iFjaQ8+tIedXTuVVT2RUTOeWjvI79
d68Kq8YrGmeBWosLK71jpGbKYsPicvXE/Ojs4so4mZ5T2m3pQDeyeIFyfqZv
TYGp1MspsxuqVhmUmXnWOHVzkr4NgnqGeTDLOgEFYpZ9Bhra+bWzMeomaJcZ
W3dpKwcg7SfmmCgrJwgEER2LPjh+CF7Pj184Q6MzqenE3JyiyvIqMmn23S/P
QFh9e/Py87OHnJfPRhOSSlDWvYFhdxpaOHce1vkEGP7HX2MVVHyvC4Vc5Y/9
8Z+Jf/5ryU+XKUqqBwZGbAXljkuX6TDkjiTyvYoeR8OEo6D9SUNvHQ4bV5dn
3Qr6ZbLnw9Hmu+ePTk7OlpY27j58vbJ9yt69s3UXNFdHi4cP1++9nGcfH9x5
s73zdH/nyeHu47OT52d3X+yecafa5cO7d198buyaRGeUEPOrSutaB8ZJq7v7
R3fvPnn57M3HXz9///T1++ev3z5953ZS3PsF37+dc75/e/f6FYirr+efP7x/
++Uz6Ny/HR7u346PhUDECBn4t+/fAPVe/foLhUyKDQqK8PLIxydrK8PwqVHH
hyvPnt+///jRPI09TdkYmdseJO32kna7Z3bap7eAWm1T262TWy0T3EthPLvq
BldBgv3rE0Z/6LsuKOti/5HSzmUexe1LJR0sAFjzFtydPK1M7s7Di42pPMrb
GZUdTN7nOMpaaeUtFzRRSupJRbXTBdWTQKS88hFgFAD07aAO8ryam2O1D07V
TM9Xz9LqhqZJ4+SNjhF6Anbc1JapY3KmZXpPCzWvoN1tZkNrrpuYGBufWxqZ
Wx8hb4DRZoy6M07bBUzQd/qnlknMfery8Rxjd5S0RFnanl/YwBKLBISloqIS
6PTVvcP7YFaiM9ar61oJxJyU5PSOts519srZ4d6zO6dfXj3nfH7LeffqtL93
OCH+E5X6YHiE8/DB03myqaCQKxzuKyvjcp3f8+efQ3/+6fbf/0G8fKlWVKQB
KoG99EOhAF/9P/+5Apc7N0BxDCy+aRhsCAi/cnDYsLUiuTr1+nhPpuGWGzt2
BqafrR+dbhyusEAFPmTtnSzunTIO79I3T0A67R8+3d16sMECdfnp21+/nt5/
ytrZO3j8bGnjuKymKzk9L7OgqrKhY2h8emVzZ//46NHzx2/evfry9SPw6tv3
zxc91Pn3b9zFt88fON/P750eTU6MAa+Aaa9e/gLUevXqBZk8d3i0++X8w/lX
INuXu6cH5ZmEIiza38mqJDt5gzV9/ukp6NdoC1Qac3WWvj1J3hmZ3xucO+ib
2+8mbbdPb3aSdn7bPDa1zbVrFLReGw3D63WDXECC1fSv1vSv8aTibgbrWf0d
3r7EPwJOci+I9a3/Tnk7819wpaq4kKq6i1nbwwLU9yzX9TDruxi1HQvVbbSq
Vipo1IFLwC4AKIJgDY4FlWMjY9T6ntHSoQlAU9corW96q6x13jOUpGu+rmdy
qK5/rIuaUjGY9A2ZbWnuGxkZmmH0z6z+xtTyb0yzpqhbA5OMkWnWxDx7aGKB
tX48McMws3BAoewmxkmkGRoWmx0fjwHExCTHJ6BvRceDvOrt7KqvrGyoKKPP
jL96cMr5+Irz6OSMMrEy3LU40HH++M6dFUZaeCDi6s/WCjJmYsI2wvxuwvwu
//yH+9/+HPrPv4Xz/eR25a/ul/8r+C//XiHMv6Km9lTX4LWa9p6g+HN13SdG
5o8c3CfV9AuEYI3aqM34zC8jlM8bB/fWtrZX1/eOjtmHR4v7h2t3Hy5uHW3u
3t3fvb/O3DnYOH77+uPzV292zk6PHj1p75sgZFYkpWbnFFTWNXcOjU0y2Ss7
e7sPHt1//esvwBCuVN+5YQWO375++vTxzds3L5aYNCaDFhsTXZCfy+21vnO+
c2+Afvv29cvnTx8+fXz78cMb4NWLJw8muzvyMQljHbXP721xzp+/fnE6MdFX
XVu1uLxBZu5M0ffHqYcjlONBylE/eb97breXfNAzDxZ7XbO7HTPbPMFAgoHi
+EfHeJvEuGNj/waA58zFVYs13r6d342qGdisHQTN2zaPqq7lys4lHjyjarqX
AHXdLGBUY89SYw+joXsRUN+1UNdJr24hA0BDBQAxBTTjxVf34Fxt52hB90hp
51BP2wi7ZWQ7vWQO5T6vondianWmb7ZjiOpR1pmNSiB1do3OkXsmFronWL8x
xugdWwT0jdJHZ5bBbzUwTJmnrc3MsqZmGBVVbRoaRj7ewS2NHURcblhoTCqa
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
/u7i2HATOimaiCFmYHJzcIUlOeWNVU2DXYPzk/OLlIXR/sHB3p6ejvb+7g46
efb+2fHHd6++f37P+fIF8OLJw9X1ZRqLxthYOnlw8vn8EzegPn49f/n+66+f
uTekLy54fQG+ff0CnpiaHEfAY5bZi9855/cfP2KsrCysrLO2DhfXD2eX9sgr
J4tb96lrZ5PMvWnW4RTreBLYxTweZxyNLR6Ochv7o0Hy3gUHQ5TDYerRCO14
hHYCun1QKHuph53kw/a5/WbSXuP0Tv0El7pxLrWju7Wj+7XDe4D6oYPq4e3K
8fXy8eWK8eXKUXbVCLtmZK1+aK1peL15YK1tcL25h93QttDSyezqZ7d1M6qb
Zhq6qI29dJBdzb0LDV30qpa5strJospR8gClvXMU29NRMj7cWliVY+leo245
7HTzwVQn59PZfkvReKAP2dJ9wsozz9V7j0blfHjJefOcs7FxUl7LDIqh3vCa
MbGfsHAk+4flGZvf0tdPcndNCgrSUVCSFpGACELUVbSVFDVVVXRUlLUR0gpw
KXlZhCLQDA5FQIQloKKSsjA5UCVlpZE6alrhgcEvHzwkJKcE3vS8HRYeHuTv
4exgb40K9/WO9L6ZEOAXamfnqq5hB5cz4RMy/pnPRVzahl/Q7jpfsJgYEY5s
k5IblVHsQEiX8P1Y8Nd/29dR53n1UVblXBF4ZcDR1P1ia7FtpPIo3JnTX/h1
onCzIXax9ha7A81uSl2qTz3oKTkarHtEHd6fG6jJScHEhRdn5ReAxErLSYvD
RPiFO1rYayqrwyWk4RKS4oKCl3/6x49/+y/B65dVFGXMjHXszExCnFya8gvn
xkfpC/OHdw8+cT6ec/UBMfaKWy65MnF3OXz88PXdOXe3w8WFr09lpQV6uho6
OloBQf519Y1HZ3coi6zdk/vsnWPy0iZr+w6ZvT9KZtPWTuaWj0js45nlI65g
zCPAJOMQZNoY/YDH+MLxf7N4Mrhw2E8/6KMddlH32+d2W0m7LTN7zdO7ILsu
iuNhw/h+w8h+3dBu7cBe1eBm2chy6egSoHyUXT26Vju63jS63Tq609S/3tq/
0TG40dm/3tbNau5YaO6gt3TTG7rJjb2gKVpoG+DGV1MPvaGdWtsyv0HebGsb
Sm1sIDY21GaWFDj6N1l6nBaUcp7scl5sLTXm5loaLkcnjflHrXT3cz6+53x8
/eH+yWpr20Rcyrhn0IJ3+IrfrbmbwfGSCKyxqbeaGkpBLtDFBYgR4R9iZmgO
GipVVV0jI0tjYytZGSUxUUkkQkFdTUdbU09dVcvS1EpHXVcBKS8Lk/F0vXnv
+PT14yeFmcT4yHBM/O3o4MDIQP8wHy8vBzt/B4eAG3bepigfQ2MvDX1LcWnD
a8IOEnBrAWF3EbHbCNl8eaVepBpZRWdYSaGK/3Llj3851NG4Ky59Lq/5VV0f
9FccA9QnbYNHmlrbmir7jmYvsBGvG7CndeiVittL5fGs4viRRN97rWXPBltf
zAw/pUy0Z6YWoxOC3HzsUI6aijowcThEUAIqDIVBpIBXUmIQpKSkPEJaWQ6p
qiCjIo9ESIpC+a8qCAnLCwqJXb0sJnxNR18tJMqvua12G0y1oES+fPnh8TPO
xa3oTx+/vn7/+fN3zoePb758fD061KuqIi8pKSEkIgiDI+2dXRaX12is9fWD
OxuH98msXfrqIXv/AXX1GKQWZfUUAEJsns1lbvl4bvl0lnXCvfexdExingJm
GCeAKebJGONomHE4tHg0AOyiHHST97rm9zrndjtBe086aJ85bJ3ifkyyaZS7
Fb9heAsEVM3ICqBueA0AJsqWoe3Woe3uiUPgVVP3cvvAes/QRucAG5RCEFb1
XfONPfPNfRSgFqCln97cRWvsoEx0TRfm16ArKonVNU0FNTluoUEiMngDk3d7
DM7XB5x3Z5xHR5ztHc69x5x3775yb8h/oY8N4r288hzdSkxsexy8hlx9C3SN
Mdr64To6VrLI3urKz69eLpKpWdisxNhkD3c/d3e/wMBIH58QPV1jMA/q65m4
u3l7eviEBkeEhUQ62Dhqq2khJOGBPgFvX73mfP38y4O7jHkSAZ3samMd5uMd
Fxp808oq0MEh0M4hxNYh/IZTCMrWRVXHQkrWWgLpIC7pL4mIl1HIkpZtg8jP
yWuNKChWXP2p8dqlQx2tI2HoRwWtc2MU54b9F5TNEw29F+bW961s2CjjcXPt
XieDgVD7pbzbzwarn3ZXbhTj3g52fJwcejM5+nh8uCY20tNAXx4ChwhDBa8I
ifCJIKFIdUVVPQ0dfU1teThcAYEAUmkoyGkrK+ipKeupKxooyetJSWmKi6tK
iGsrITVUZURFLwvw/aggIxET5JeVnDTe3vH8+Ixzse+at0cL5NXnD69WlxcN
dDWsLFGKivI///PypWt8GrqGXYPjuycPqcvbi+vHC2tHM4yt5b379M0zHrSN
U9r6HaDZhWln5BVg2umFaWc8zYBj00vHE8zD8aXDMebByOLeMH1/gL43QNnj
Cjaz00na6Z7h3nnsmt7vnNrrnDwA8D5txL3TPbLRNLjROLDe1L/R2LfeNrDV
NrDZOrDW1Mtt1FsHWaBpB+nU1Etu7pvnXiXgQgOCNXWRGzvnG0pbifiitIJy
XH5pTU5lUWiSJ0zFVQo+WJ337vE2580p5+0jzuP7nOfPwPjzkXN+5+5xdUFe
qrdvXxphPDH9bn3HXmlNtYePr5KK+vVrjoa6X968+vrpY0Nd4003n6jwuFu3
ksKj4mPjU0LCbxkZoxBIBQ1NXdsbjoEBoThsRlhYhK+3n7OjCxIuo6WhGXcr
OjzEv7woB4+OtzE21FaQM1ZVcTQ28b9hH+7iFul8M8LJI8DSzk3P3EHD0FxW
TUdY0h6C8IEiYuDyeKhcq7jCvILuiLxy+eWfq376x5Ge3h2Y4gdt41fmVs9t
bR9ZWu8bGK1qGNA0DchmqFlXh0pz7WDolVtqkl3RPovZGDoh5V5THWeJeQ5G
uIqyFDtbxI8/AK+koUgZaTk1RXVDHSNTAxMDLT3QChpraRtqaOqrq+oqK2nK
y6oi4QAtJEwHIm4jL2siA1OTFNGUlzLUlDNQlzNQk1WSEFISE1IUFbbU0a7M
L3jy4CFouF6/+fXr+YevH3+9e3qgrIDU19NRUJBDIGXVtXWuC4tDkYq3U/DM
jcPdO78sbZ0tbJyAari4eQoA6wvAyTP6+ikdCLZ6CqCsnJCXT+ZZx3NLR7PM
Q9LS4SRzf4K5P87YG1vcHV3YG17YHaHvD9H2BuZ3+8m7A/P7/XN7/XP7fbN7
faQDQO/UQe/4QffoXufwDoiplsGt1v5NQEkjtWN0t3/mqLF/ubqN0jSw1D2+
2jnKahukdgxSfmOA2tbH1aypd66qpCk7uxyfV56KzctOyalKzSsMi0v39tOT
gXg5GbPm+jlfX3LO331+9QL8cD3/+P7dh7cPDg/eHJ9y3n3knD3gvP6w29aF
dnB00dJ0Nzcd7+959+4NOjUtJDQSm56VnpYZFhYbEBwVFhnrFxgGvIIj5CWl
ENIwGUsLW3RKenh4ZHBwqKeHl6K8EhKOQMClZeCQ0CBPdydbPVUFEzVVDRhM
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
ozGXwAS6zGBtTExTpmfpmVn4dCwa1MHEpNsJCXGJifEgtQgEHOi10tPTgV3A
q4yMLABXMEIGN75AR5bOrV+8WgZCLCkRAwwB8QWyC9iFTgGqgIDKBFLxfMOm
AzOzQXbxwg0AVOTxPx6Dy0lOzUhEExNSCOCYkgYKQg46PRsseIA1OJOGBz/Q
+VhiAQCXUQhOosFQS8xNSc8AXR8xPTMXk5l1O9VSWVuFH2IIk9OWQsqLiyvA
pBQQCBlpJFJKBg5FXABDSHI1AydlQM8lDoGICAOvDHS01ZWVwFEeDkdCJJCi
ovKiotpSEih5hKumYqiZbpI9KspIM8ZEG2tnme/tnuHqFKar4yYj6ymDCJYR
zzLXICUGv+yq4rCmKLf9c3UQj6uJlDjvFnfTsRiPXwaqKTkx0XrS7Qle8Td0
bt90Huxss7BDqeipmRrqqcKRZsqaBWmE0pLKgtKKoqKqsuKauuLG2vLWoprW
7LrWzKqW3MrWwsqW0sqWsqrmotrmzMbW9JY2Qv8gtqm1e2Bstq5zJjqNbO93
xy2sVUI+4MfLVj/9aHP1iq2QoCn/dSMBAZSYmJmQiNl1QYtrXKkA5levA68M
r3MxuHzNWEAEdKeq14XkBITkIFDwykjBpKEImLi0pIQ0eLGQ8nIyqgqyBmqq
KH0DMFtRFlnjM/MzZPrw9OzAxHTP6NQcg50GoiU5Lj4BTPWxSUkJoMXCYtOy
sjLQaDRQC4vFApeAVKAm8gD1EXzJE4xXIkGCpSSnJSagLy5tcRsqYAs4Aq9S
kkHVA7lE4GnG25H1W8VMxvHO874EgG+BgRSdlpV0oVYidzTM/KNUPK94amFw
uQAgGDgJHpYEnojnVkYMNisNjccn4UqwuTfNbmiII7UkZTRhcgpQKTkYQlFe
AVj0v7wCUsnCZBT+P1vvAeRIml/5RcgcQ+SSuzs7M10G3vuCL++96WrfXe19
l0MVvE8AiYRLeFeF8l3Vbrp7vOsxOzvruLfL5ZHUMfbEuKBEUnEhnkiFpDsF
jxenkELUS+Rs3ShCiP988SGRhcYUfnjv/b9MZHXoIVlSocjUoevv7urttIIr
nULRpdMilSGbjXSoT5o7zph1F83qKxaNe2Zssc/qHBt0T47dMpuu6Q3XjObT
EvGSVb1998zPM96/OSr90x+9+j/f3ysMqN6+PPZ3W9RvMo7DS8N/c5D6VdG7
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
WvR2RosK4Uqp16mZrzECNqAFrqBaWrWuqVdgS6tFUpUr5FIZc/IVs4IlVKok
VqtuoNc82KUf7THNDneNd+nn+q3z/dZxs3ZALe9TSvuVij6leFArnjJKV0+N
3urR2gcNj5avhXo16+r2f0EH/p+ffPjvXj3/q3cffr2Zjd08e3eqf6Lb4PA6
i/s7N9dXEV3rBFVedG0tuvec4Z10rl4s16sb9WqDJmiaLNa3Hhdy5YbbmRob
Ohoa/uOTZ/7+1KX/Zf7sn89M/vHCfLlD7P/ef7P3Wuu/HT//j9OXf93RSbX8
3o03/tn5tjfRBiKQj3Bah3icQQEX4xCHM9bOH28TTnElkzxZ3wm+8Qft1nbJ
kNI0oDSaBWoNRy5tl/FbpQZDv8NHffrjP95/8enOs48OXr568fGP3v7oqxfv
fv7eB199+eU//9lP/uTnP/7Tn/74T378oz/+6stfff7ZLz765Kfvf/w1ACAY
I2R88JugBSGKE98AQ1N0NsFWNge0EqVyFmM6E0+mIqk0iUmzKJa9bC6Vz2dR
SP4graldzI3RrijDGG7NjEYDMOgbs/SaSjXjGaIdc+5EnEqmM/l8oVIoVrO5
EtqNGJlk1ktDUUwSSTpOgb0UlcjgIebQQKaASqZyZDITzxboSi1XruXy5VKh
WqbLxUR+s7Tpc/o1WoNMrVNAlCBQGrNOi3huRmGigV7BHFUdMqlKKpUrFCql
Uo2JSCQSi4VihUgoE0hVEqNF19ll7LZ2DPaYZ0Z7+4GTRQdz7OlQ9nUoB42a
Qb16QCub69GPqoVnTIrr3drtletfpvybV0/eVbRER01/1sj8X3/8o7/88OlO
cH313PT54Z7BLmOqlI+V8uuhAEXGax6icsv28J7roc1f8YYahXwhnd4o1Q6K
25vZzVJpO7juemA1evhtn/T2/e3cmX8YmviPg6N/Pzbyt2dnHnNfb3z39/5I
of+H2YV/P3fpfbHM3fa7F1t/5yy3dbqdO9LWNtDeOsBp7wdUPO4QhzfcwgNR
Y22Sntf5/Rz5hMraLzcpT4jF3+cq2xVj3ZPLd53pZK1ce1TZflY9eGfn2Sfl
g7dL+y9B15P3vnzyzmdPXr56+c4Xn3/6z1999PMP3/363Zc/fO/trz784Cev
Pv3F51/+Em890pXP52GTFSNWsRCEKE5FyDjcMNzUpSgoSiQJKhHO0GApxt5t
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
L0WtH7/2X/3rPv1fm81/2zP6b8fO/cXUwpbSbG8TXnuj9WIr7zxHfrJdPtUm
HW0VD3MkQ1wJoOpvE/a1iEZ4miG+flLTv3Zl/bD+/J0XXx/sfQi0Hu69e/jw
/a3ddypbL6v7728/+2L/nZ/uv/ez7Zdfbzz7chNQvfjq4O2vdp99vnn08eHb
Pz14+ZPdt368/fSHW0++bDz5bPvJ5yi/z+V2rfu8zlg0lEozfsQcKIwGmzKS
wBuNdxxoQamgV4lUCDIFokqVVLFMYQ43xEYUdgM52BN0lSs5FH4cSoUtbLHI
QdYq1WytnmeJPc5p+FmIHh4qVelyLVup4xnopoh90zKwz4ZXhY2Als4nUeVS
tpROIoQkY0ScJFKZJF2E0SbCkVClXARXlVyhVipvbTaK5ZIS8mTtBFcdTbFS
q00sVAq5ViHXQKya396QIrHLZIpjrhRCBbPQzJOoRXKTSttrtACqAbNpyGIa
0Gv7dcphvXLSpFkY7vbdurAbWP9JNvK/f3D0T7/45D9+/uyvHxX+w4+e/Nke
+Wna9jB4Y8N3Y/ncgEn0mrT196eHup3LD5A9lt0uH0XaPQ7CZttfc3+y6nt1
ez3XM+ofGi2urtguX6gnEusLV8fUhr1kYXvdldDqvh4e/uvRyb+xdP3PA71/
qhK+fO13fm3V/anB/GfG/h9r+z40jbreENxtE19pEV0Vas9wNHMczWS7aqxd
CYEa4Cl722VdbZIBgUb1B5wBmZVYDBxWnmwUD7PpnXLl6cbm882ttwDV1gFj
gvWHH9agUYcflw4+rD9+Bagw1g4/rB99BDeEZNUeQsSQuD6rP/688Rgx7DOo
Gcaw3xYLO6iYL0UFEwkmTTEKk45BJaAVEA06T32ToHIkCtqFilMhRsFi/hgZ
wJwN8GxhZ2hXkwrAEMddPIp9ji0VROEhTLAztofCbiLixZ71jUJjq1woJQAt
xmw2lsuQhSxVpKlcKlbKJjCmE1HEq1zTN6FyeKmpJJmmYgkqysosPJSm0+ga
0JGS0Vi1XAFUjcZ2Llc4d/6iQqkGV0ZLD7pChVpvMndLZaq2dr5K3SESy8US
mUQqR2EikoiZ0M7ny0RiCU8g5XDlQqFaJtYpZRa9ZrDT3AmirPpxawe4mjCq
z/WZrw333OwxlK/MfB548Cva9/dvb//lXva/f1T8lwe5Q8/to5ht5dzwqEli
VvHOzo56HTbn6uri4vIDj3cxGFz1u4mgp+ZxfULEXq04nRJdZGiytrzmu3fP
61hbvnX71ODIs2SeGpuuSES/6u/5tcX0BY/zC5Xi3RM/+IXF8Ifd3V8YOnc4
EuI7LY7v8e63yhba5Gc5qnNi0zRHP9aq7X1dbn1danlTZmlTmnlqo0A3YR19
cGWpEKvsVY52Ko82q0eb1ccb9SeV+tPS5rPK1nNUaeut8vbLyv67tYfv1w8/
QG0cfXhcmw+ZLZCsjUefNh69Yoh63DTHx7j7SSJiT8WcacqXTvqT8UCTlmCE
DMaSUSoTT9FxMEbGg6hkMpTJRNiIDlpAwrd7Q1Z2cBcPQZRQgAdz7MPGM1ay
MGILHgVRuIs52xRgTyaklRL5IlWtpzc2csViIpsiUGWaquaSB43KTq1QL+XQ
5qEK+TSgikQDiIIopgVgvJvpDlIpMJlBn5vL5YBUPp+vVGq12sb16zc7Ogzo
By1d/Vq9hSuQcoUSkUwpkTIFlo4LUCFbgSt0hAqJWCYQiHntQk4rr/1NIa9V
p5b0dxl7TOoBk3ass2O6yzBt0c0YNKctuutdHd4RQ+50X+lU/weOmz9NOP90
I/GrRuYwsBi/d/HimLXPKLMYZBfPzREBb9gf8HiDtmDMRsbve12MrdtXKw8W
v/BHds5cIwam60vOq7Nz92/funnlUuDe/aehaMzU+USp+ENjx1tvvPaVRvG5
XP6+SPxSKP7IZN1X6ojX22/9s+8tfKflQqt0rk023KLoO4FSjgrM500TizPX
gnc8GW+qGCuVkzWaqlQKuxu1o1JhN0c3MG7WHzW2n5U2nhYbz0AUip1Udl7U
9t5mq77/znF9s+WQ0bSNQ0a+vl1kyEYR6/GIk4w6Y4Q7HHERET+4IqJBJjln
SCoVhS6hUqkwojGECHIEBjCp1hi3anaCsTDhwT7HzeOx96FY6oAQUGRZAnLg
igUMxYLKxK1ksKlXiWIxns1GCnSsUkhsFFP1QrJRzm4UM7VitlbO1RHgizT0
Cs6I7gD23Ww0mme9RoPsYc1AwAfhqlQqqVQKYyaTmZ8/bTCYzJYeyBRKqerg
cIU8vhiSJZYo4H1wQIlEIhYjrn9zEwtFCpFIJRSppMhefAG3BWgpJTyrQQ2u
evWqyS7D5Ymh69Mj10YHHsyOhRbmd1YWXrpuvFi7+jlh+5Nq/Mdp/1PPg+jl
6cv9hn6twKjid2jEM9Nja7aVtdX1VZvzjt1L1hpLAb874CnGiG2f/31frLFw
PzJ5/tBPLkzN3r965dbp03uRyOaNuyGxEgj9WV//51LZT42Gd4WSF0LpU5ny
g75B5+/+wdrrbStC1V254bRQPcyVT6q7Lw7MRe64k8uhoje1jUav9PCw/miv
frRZO9jffb63B8t7Wq4+LFUOKrVDTAqV/UL9CYsTxsLm0/zGk2PMytvPwdhx
4S6zce+dY0H7RscefYQxm/DSlCcVc8fC9nDAHgo5wFWMCsNQEujOMiT0qmmO
BE1HwRWrMKydAQkwBiqAELiCJ7KqxYKEjawPYsJuP05T2MguhTVjfJKFil3H
KJaTaRptqTse91aLyf3t8v5mEVwV02QhFcul4rkMVcgms8wRJRJcNRdvmaNL
kCxmQQNoNbvab9ZMSGaJDGplt9tNJuZv1Y2OTWl1ps6u/tGxaY3WcKKFA7Tk
Cg2yOrj6BiqBEDdAJRGJxVyuWiQ2alVdJr25Q62Ri8FVh0LUqZN3aeVjFt3C
+OCDs7OOy+eIu9dK63e/KEb+/GH+Xx2W/3wn96/2y2/7loj54Rs9uiEFp0P4
plbGkUq51k7j6bNnTs2fO3n6wsmFGxMXroTobGN/17u2mnW436PysVNXPVMX
9kKp5YtX1m/cXD41f+Rxp4ZHaIXqE73154aur3Xmxh+8dsgRHoikLzp7a1oD
IVNef7Nt4vd/MM2T3hya8t5aTnnJEll8VH14VDnYL+3tlna3yvu18m4x38jk
6nRhK1/eLdQeVhqP6zvPattPc5X9RHYTXAEnlitAla09ytUfY4KNx4Adq1lz
zxfFnZel3bdBV/XgPQDG1l49vVmOFzNhSBa4CgbtMBe8X2jq0Y6hj0NUTgIS
eFwiRFEBwAOE/AEHchFjjqkICMFGNnsfc4LCBGr22/WHEBPJyAA0jXXAb+d2
9lHM0QgwySofTadDyWSgnCd3NnMPt8p7G4Xtan6zRJdzyWyaSVlkLBQmfIGg
+7fLtsAyyi5rQLvQfSQQ8ymyeSwJnwh6ZWXFarX29w+enD/b2dU3MDg6MTmr
0xrbWnkgCFApZEqZRM6ABJwEQqCFEC8TCcGVUiA0a1TD3Z3j/T39FqNJI9PJ
hRaNtEcr79fJR/Wq80PdK+dOeq9dCFw5vWG/+R7l/Czjf5X0fp4OHDnuOcb7
rvUZeqVtOkkbxEok5an1mpGJyaHRqcGxGXCl6x0eP3f+1tIKXvJeoRp/YI9c
Xb47do5actsu33RfuR6/emXr+tWMyfDE2v3zgel3eaq9H3CT/8V3nqjNL/pH
d3qGllraL77+5slW7nmtce3spWwovlvf2997srf7uFZoVLMbJbpWzNXL5Z1K
fb+6+bCydVhsHBY2H+Y2HuY3Dwsbh/n6QxQzqT0ubjARC4V5tnKEylUfYePx
drZwtylooAuMPWeS2M7bx1VKB/MJXzLqIgK2oG8tHHayneDWzka5inAcZ9Y5
EYqAARWMxbzpZtiORH0ocHUsUKw0Hacvds6mLDafY2dAhYjOyhqbuzBnnwoP
gTQkdjoXqW1ktrbysMJU3Ecng1sV+sn+xsOt6v5muVHNV4ppSBaz6B4F4b5g
yAOBJePhJl0ke0SJWfnP0dVqGend4XD40ccHg+fOnRsbG5uemUeNjE5qdUYu
RygSylQqjUQklUsVimZklwsRqETNEqAAlYIv0ErFPUb9SE/ncLe1z9LRY9B0
6xSDRg246lWIpszaW9Ojq2dnl06OkDfObjpuHXoX3yXd7xCu96mgY2b4jElp
FrVoxG06nUwoE6gNhuHp2YHx2b7R2St3V85cu9M/NSftMNy9t7TX2I84Qo4b
K/fP3fbdWbdduhG4fKN++05xYqzUoX6/r++XU+f2WhTJ33ljR26oqE0bvcMr
fMlVnniGw1+dmqtHyGc7BwfbDwuFjXSunittlUqNUnGzWNwslBvF6m6+tput
MOdFgKvcxgGgKm49KjSOsvUDcFXeepyrHUKyWHIwAVEsWoyOwSJ/ixYDVXNL
rv4UxdJ1XLgb9S2jIv7VsH+VCDpADj77uTwMLpfNpZoiEAFL2Wy8kCXRo9HN
rM7GJDYysRSx+nMc4I+P+7BQsXKELWwLwHKFR9mOkh3xDOVqOpMlKrVkfQPt
XigaspOEs0xH9zZySFmNcgZcbVQR3TN4PWyb+f/lCkqFl/HN8cp8IQO6XC4H
KhwOLiwsdHV1jQxPzJ88O9A/wueJOW1cRfNCRFKBBEQpREwhTbEsyXl8GZfH
TrRiUadWM2A2DlnNw12msW7LiKVj3GqYsOjGjRpwdabfen1i4N7cCHHrfNV5
b9e38k4iWLh95UUs+GC0f1wl1nHfVAhbVWopXypUGc0jc/O9Y7PW/vHJ+Yuo
FXfg5tLamzzh9Ny5/d1nt64vXb9wz33ftXTuWmThJj03H1bJa2rZR4MDL6xD
xO9zg9/jFfW9LqHKqbPcUna4Z+aPEpmtZLqUorOZAp2vZYuNdJH50noqV0ln
KxlmhbieL2/nqjvgKl1upMvbyWKDRju4/aS2+wxKlS3vZav7WaSsjUelxpPy
1tPi5uN8/QiksYU5Hjou9iEYJeuVbGFOV48ylcN01JmJuWjSm4l7EzEfFfPF
0ZgkIv6Au3kSqTsU9saY0B4p5al6JRNpCg7b+rFcoViNOkaIRYv1RxYbzI/X
HNi01lwUDR+vP7CWinDFmCANcXMHQ7ZIcB2SVUC/kAqXMrFaPrFZyTXqhVoZ
zkayjozulbVCFCYxMsSmd3iiz+9ijw35/d71ddv4+Dhi+cDA0PjYtNnUJREr
VAq1QiwXcgRqqRwypRJKEKU0IrFaKFLzhUouX8bhStraQZdBLus16ActpkGz
caTTNN3bNdVtBldoBme7jCMdih4Zf0QnvThkuTra6b40F7g0T12/MCvhpm5d
udHfda7TZOC3q8RcjUYllEvVFuvIyTNdwzNa66BCY5k7fbnD2nf9wertFbvG
0nfp1vKDNX9379T96ys3J8+Hzly2qTsefO+7dZXk85nJ/d6xxe9yg3LTusxA
DE1lFm7sB2PPS7W9QnmrWq/XtvKlOsNSrp4tbjMglTeBWTJTSqSLSbqayW9A
xFDb+88L9QO6gH32yvXDYvUAE4zZMoTriOUKI8sPCrwd03UMG7Ox+ohF6z8T
VX6YKh1sFeMVOpyOuiFZkSCzkBWLBoMBd5jwM2e8+10oIuiKhj0k4WYaxrAb
toVw5fWt+/x2lhngwa55okOs4WNRoVnM8BB8kJUy1hkBD34EPLD29+3lLwa5
ZJCkvCTliVMeoEVFXah0zEvH/blEsJojsykiHvWiCAJ9q7e5hk8BS7ZjPT5Q
js8FoGLPE8P/hc/nAVo6nYbH40GdZqfnJsYmoVRinghKJeULNWIZCjipBEIQ
pRUKO4RCnUCAH8AW0CVvb9eJRL163URX51RP51S3dbLLNN1pOtljPt3fOd9r
noJwmZQTRuWITnx7dih+71riztWLBvVVi/GCyXBnYlTHaVPwOGq1Wmc267p6
esanR+Yu9E+c4giUPf0T5xZuCBW6i7fvrwair0s1V5acnYMzp+Yuua4srgxO
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
LtpS3KRDoombJqrbu/9kyOWgMuRqdnAispYr2dmuqnb2sBQZc1eLicVFJtZ8
ti7u5qx5cjl7fDahKoSxr57iAigKEiGVKE/r/U5nGa6MEvJyDVfioTerVbne
1tNFhtSAFtUEOPGu89Pm+nIulo21AyZ8xaL2s0ARJUkdnC1z4R7XDYlyWomy
cb+uUTb64CQdPrvwZrysc4+XyyklcH62rXjjLHdiras/+uTg1z//7Y+//953
3/7wne8RVI4//U9/9ZP/5T/96vU3P/27n/7j/be7v/ltoai7NL1omk2ezdOY
K2CSRt2Hn6mDjshxi5ePlSjKmL+nXNcKOWDDy0W77LYUDt10XdX3dTpgBmxP
n14sZxl/yX27cnK7EU9YnUxm1I0oVhBgquMgCgl8flxEiAfZUM4VImJ1PZnN
xEMngbCuZmGQ2pYPWr6XvIwgJS2G3+ZH0cdZBSlEjRVTJEHdRabGI2M40EZD
HbpsOzbNkBacgArAfD+nw0XKBQs8EEUfhOCKDlwBm++M2dWUItnRZpnDRVRw
7VSRvL1ULjOeznIhU+0uiZMM+qgc75UziWsxMYSXTuBKrCsm8e3KxxdTiAKt
Z5fzL59sVvOwyo1Z485KW6S5GSclvt1Nnp7NLzdC6HivqB2oIJYpbV6IKpWK
9fJ8SukKXZSxj6+WG964SPkKwdJKhFzTtV+Uszoi72BpUGYQItgiQZLjqGxn
L7YHWZN+QNwNtJv84Wrzx/PVVZ1OTWWmq+7nnz36bz/7zTvf++33f/DRD3/0
y/v3f/i//tVPXnlV+eyzfZZdTianZcnJq3x3kaerunCU4eDkIHANctz5GTZn
geyQCqfUOHVWV6nMekXrIqLQcWwtDGy5l5fsvbraUoBTLm0389VyAlQEtACV
ZTkibNfD8iRi2D7KqdtC6bVoy/YHusRQQxhnaeW5kWV6f8kV0iSNN6pF9We3
OQ6u8FFwpaiWTH9wBVQv0VKcoWIrumc6MclUjkUEcYU0SZkigOoueIlYiaTP
n7eO0CsOAzaUOUldyQx03aF1p1EAFicOwRYOgEbeyyeIh9XM4uU8gatVu3aC
s3yxLZCsu6HRS8rPZXSxzf7wbLNfhFSI//P//NOfv7p6dr7gtJINqTI20wQN
2e+b8/PZxcWcWpUMKLmipW4FA/RqWjh5qMLVf/zL0//45snpIpPTVbwdjYKi
2Nfy2AIq+RLSpF7J4Xq4Ym+ZWlVmTXII909n6e26frJprqf5aRY8mdbXVV6p
o8Nf/eIf3nzjx9/5L//13mv/8Pb93//iF26/N/G9xnMXWbKty2WRzbNkmsVI
lmsovqWdbRZPby/kPXTgAUvCPtXZpMlTTq9ruI5umQqBs4I9tge+5XtmnoW3
VzvSNxtbVw+NJKAM8+443h1XSZaSBBErYajzl0Om8oc+x8MVR0EUekUnjooQ
x97qFSB5ce6iUU6IV5dcUfqRBwn0SqKFUhHYrd7Q6PS1/sjUzAC0JF2Cq9zh
r5eGWuwrSaBmkU7wErvFdqyI0IcmpM/2PDXj2IwSM+YtuZMVblH5ZR1UTUjQ
Zwu75AH0xa7Wt0AvgMlCkuSynqdkKPTkao+XnqJU8nFJgqtFeLYKv3w8v1zH
//x89//9P//9z1+cUScSm9pHwcRyvl0tF6/SPn+6mzbCZdFSuq6XQMJvbgJD
6o/5lhe3m6cXC/Jp5o0xbCje2aqknWTONHfpQBr9KjbnpU8fC0enSW22lJEx
K10+ZN2Eq9Kfx9Y00FeRvc+Df398dZpFvY8++G9vvf797/z1T99641c//uG7
f/+TZZ5erRb7aTOJQ9Lf7W5zsV5spyIP3p5uz5YzhOvJ+f7J1Rl03V7st8sZ
FV+aBJOmmE5KSj/b0gjH1j3XJFzHCHw7S8Mij+EKJ0YeXMxrYJs0FYH+oFee
h/32TIuGU5AUVY59JqIowH/JqZ9WrHKSJmhxHDQiWbgstIuc6IqhA0qYyA6w
8Qkdp7VbiBhcYbF04yVUOCsZiFinrxz1Rp2hOtJtzfZ1PsGPMf8wg9oXiRl5
Y9BC9kGoFX8X5GZ10JZXMQfAFe49SSyY4RIhQEvSRcBVXnoSKnbRF1BVASqH
4r00xoXTiKGACK6mrYNCrJ5ezb+4Wf3hyZaKTwxV7dJ5rm0a+/E2+9fn23//
8vRyES8zY5Wby8xa8q5ZRPa8PJ2IKeZlut9y1Zq+O0hjDZclxm9Ts0gMxGo9
FS6OVq7ZIKpIp+bdL3LcO5YerkCIqBMLkFZNxC7Q4phZ4bGX7XwObycXny/y
M1x9FV5O8+e7+SrxxV2i88rsHf70nbfuv/JXH7/3iyp2weZ6tz5fzSdFsiiz
dVMS+zmeJvni5vLLW1LZigN2swYRO11M1/OJHK2CK9oQH+0YvmfBErARYpAh
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
KiQ3Qo4cYJd+noM5DKKSJAnDEMC67c//Dywesrc=
       "], {{0, 160.}, {200., 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{200., 160.},
     PlotRange->{{0, 200.}, {0, 160.}}], "\[Rule]", "\<\"n03888257\"\>"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.887136598988111*^9, 3.887136678629026*^9}, 
   3.887303464826202*^9, 3.88730468704342*^9},
 CellLabel->
  "Out[579]=",ExpressionUUID->"dda40f3b-5251-462e-ab61-d4dbf3fe2fac"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["VGGNet", "Section",
 CellChangeTimes->{{3.887299895035571*^9, 
  3.887299896855184*^9}},ExpressionUUID->"b43674e8-f6c7-4b51-ac9b-\
9b8e70613707"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["uniform architecture",
 FontWeight->"Bold"]], "Item",
 CellChangeTimes->{{3.8873004279194603`*^9, 3.8873004358568287`*^9}, {
  3.88730055521607*^9, 
  3.8873005577757397`*^9}},ExpressionUUID->"fd62b67e-c670-431c-a103-\
7d8f29c8ff77"],

Cell["Grouping multiple convolutions into blocks", "Subitem",
 CellChangeTimes->{{3.8873004279194603`*^9, 3.8873004358568287`*^9}, {
   3.8873006014612494`*^9, 3.8873006534158373`*^9}, 3.887300714076496*^9, {
   3.887300813151066*^9, 3.887300814084837*^9}, {3.8873021224229517`*^9, 
   3.88730212242596*^9}},ExpressionUUID->"73027853-5dbc-4955-929b-\
be842ed13f2d"],

Cell[TextData[{
 StyleBox["Progressively double ",
  FontWeight->"Bold"],
 "the number of filters across blocks"
}], "Subitem",
 CellChangeTimes->{{3.8873004279194603`*^9, 3.8873004358568287`*^9}, {
   3.8873006014612494`*^9, 3.8873006534158373`*^9}, 3.887300714076496*^9, {
   3.887300813151066*^9, 3.887300814084837*^9}, {3.887302123211216*^9, 
   3.8873021272459373`*^9}},ExpressionUUID->"a9e011e0-b375-449b-9c7b-\
d57b5af0964b"],

Cell[TextData[{
 StyleBox["Progressively half  ",
  FontWeight->"Bold"],
 "the input dimension(width and height) across blocks through pooling layers \
at the end of each block"
}], "Subitem",
 CellChangeTimes->{{3.8873004279194603`*^9, 3.8873004358568287`*^9}, {
   3.8873006014612494`*^9, 3.8873006534158373`*^9}, 3.887300714076496*^9, {
   3.887300813151066*^9, 3.887300814084837*^9}, {3.887302123211216*^9, 
   3.887302162260516*^9}, {3.887302286963911*^9, 
   3.887302299453562*^9}},ExpressionUUID->"910a7ab7-3c31-48e8-aa18-\
88741bb84e08"],

Cell[CellGroupData[{

Cell["\<\
All convolutional layers in a block  have the same kernel size, stride = 1, \
number of filter, padding = \[OpenCurlyDoubleQuote]same\
\[CloseCurlyDoubleQuote]\
\>", "Subitem",
 CellChangeTimes->{{3.8873004279194603`*^9, 3.8873004358568287`*^9}, {
  3.8873006014612494`*^9, 3.887300729281775*^9}, {3.88730218894701*^9, 
  3.8873022372440357`*^9}},ExpressionUUID->"920e83e4-97e9-40d2-b727-\
4499a444af8b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"activation", " ", "=", " ", "Ramp"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"kfilter", " ", "=", " ", "3"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"kpooling", " ", "=", " ", "2"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nfilters", " ", "=", " ", "64"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"imageEnc", "  ", "=", " ", 
    RowBox[{"NetEncoder", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<Image\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"224", ",", "224"}], "}"}], ",", 
       RowBox[{"ColorSpace", "->", "\"\<RGB\>\""}]}], "}"}], 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.887301451050159*^9, 3.887301483815386*^9}, {
  3.887301601806212*^9, 3.887301616845024*^9}, {3.8873017190793324`*^9, 
  3.887301810326558*^9}, {3.887301859902269*^9, 3.8873018606936607`*^9}, {
  3.887302642203636*^9, 3.887302646431075*^9}, {3.887303006457629*^9, 
  3.887303007545466*^9}, {3.8873031556074038`*^9, 3.887303156369149*^9}, {
  3.887303353586857*^9, 3.8873033560117273`*^9}, {3.887303520573337*^9, 
  3.887303521076418*^9}, {3.88730355479046*^9, 3.887303555868741*^9}, {
  3.88730358733679*^9, 3.8873036208447247`*^9}, {3.887303763539888*^9, 
  3.887303796949976*^9}},
 CellLabel->
  "In[393]:=",ExpressionUUID->"02e2f6d3-ad9f-4e05-9d65-6316824507d7"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Image Size\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   PaneBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"224", ",", "224"}], "}"}], Short[#, 3]& ], 
                    BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> False}, 
                    ContentPadding -> False, ImageSize -> {250}], Short], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Color Space\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"RGB\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Color Channels\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Interleaving\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Mean Image\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["None", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Variance Image\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["None", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Data Transposed\"", "\":\""}, "RowDefault"],
                   "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Method\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Stretch\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Resampling\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Automatic\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Padding\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  
                  TemplateBox[<|"color" -> GrayLevel[0]|>, 
                   "GrayLevelColorSwatchTemplate"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Alignment\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["Center", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8873014987531767`*^9, 3.887301617649111*^9, 3.8873017312159567`*^9, 
   3.887301762344853*^9, {3.887301848969912*^9, 3.887301861342041*^9}, 
   3.887302646718402*^9, 3.88730300822812*^9, 3.887303157159404*^9, 
   3.887303470502427*^9, 3.8873035217011337`*^9, {3.887303556369411*^9, 
   3.8873035884574833`*^9}, {3.887303621565789*^9, 3.887303640006014*^9}, 
   3.887303764767449*^9, 3.8873037973054647`*^9},
 CellLabel->
  "Out[397]=",ExpressionUUID->"955da09f-7261-4dbb-98a1-4e504e13fbcc"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"block1", " ", "=", " ", 
    RowBox[{"NetChain", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"nfilters", ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"nfilters", ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{"kpooling", ",", 
         RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"block2", " ", "=", " ", 
    RowBox[{"NetChain", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"2", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"2", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{"kpooling", ",", 
         RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"block3", " ", "=", " ", 
    RowBox[{"NetChain", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"4", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"4", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"4", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{"kpooling", ",", 
         RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"block4", " ", "=", " ", 
    RowBox[{"NetChain", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"8", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"8", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"8", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{"kpooling", ",", 
         RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"block5", " ", "=", " ", 
    RowBox[{"NetChain", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"8", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"8", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"8", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{"kpooling", ",", 
         RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"classifier", " ", "=", " ", 
    RowBox[{"NetChain", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"LinearLayer", "[", "4096", "]"}], ",", "activation", ",", 
       RowBox[{"LinearLayer", "[", "4096", "]"}], ",", "activation", ",", 
       RowBox[{"LinearLayer", "[", "1000", "]"}], ",", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classDec", " ", "=", " ", 
   RowBox[{"NetDecoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Class\>\"", ",", 
      RowBox[{"Range", "[", 
       RowBox[{"1", ",", "1000"}], "]"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.887301314569405*^9, 3.887301402238488*^9}, {
   3.887301583388988*^9, 3.887301586554356*^9}, {3.8873016202533073`*^9, 
   3.8873016933177834`*^9}, {3.887301733800295*^9, 3.887301820035823*^9}, {
   3.887301889027027*^9, 3.887301911038733*^9}, {3.887301979259851*^9, 
   3.8873020042849607`*^9}, {3.887302376561911*^9, 3.8873023913954573`*^9}, {
   3.887302447147357*^9, 3.887302453924601*^9}, {3.887302553726844*^9, 
   3.88730260770229*^9}, {3.887302653098165*^9, 3.8873026724232683`*^9}, {
   3.887302795563652*^9, 3.887302797429501*^9}, {3.887303390900701*^9, 
   3.8873034291060266`*^9}, {3.8873034848086767`*^9, 3.8873034850415907`*^9}, 
   3.88730370437796*^9, {3.887303890562216*^9, 3.887303907564084*^9}, {
   3.887303975486524*^9, 3.887303978990644*^9}},
 CellLabel->
  "In[451]:=",ExpressionUUID->"d203e121-864a-4db3-bd09-a0aea8524f2f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"VGGNet", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<block1\>\"", "->", " ", "block1"}], ",", 
      RowBox[{"\"\<block2\>\"", "->", "block2"}], ",", 
      RowBox[{"\"\<block3\>\"", "->", "block3"}], ",", 
      RowBox[{"\"\<block4\>\"", "->", "block4"}], ",", 
      RowBox[{"\"\<block5\>\"", "->", "block5"}], ",", 
      RowBox[{"\"\<flatten\>\"", "->", 
       RowBox[{"FlattenLayer", "[", "]"}]}], ",", 
      RowBox[{"\"\<classifier\>\"", "->", "classifier"}]}], "|>"}], ",", 
    RowBox[{"\"\<Input\>\"", "->", "imageEnc"}], ",", 
    RowBox[{"\"\<Output\>\"", "->", "classDec"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.887301498571474*^9, 3.887301558287977*^9}, {
  3.8873019337824297`*^9, 3.8873019416560383`*^9}, {3.887302017787312*^9, 
  3.8873020238937263`*^9}, {3.8873023999120617`*^9, 3.8873024064091263`*^9}, {
  3.88730247185703*^9, 3.88730247792997*^9}, {3.887302616693943*^9, 
  3.887302626723106*^9}, {3.887302804924234*^9, 3.887302819311186*^9}, {
  3.887303270577837*^9, 3.887303273267174*^9}, {3.887303410869122*^9, 
  3.887303424982863*^9}, {3.88730402280072*^9, 3.887304025020031*^9}},
 CellLabel->
  "In[459]:=",ExpressionUUID->"32aa27a7-c42e-48f6-9513-eab5e56420e5"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "block1" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{64, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {224, 224}, 
                    "$OutputSize" -> {224, 224}, "$WeightsInputChannels" -> 
                    3|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {224, 224}, 
                    "$OutputSize" -> {224, 224}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 224, 224}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {224, 224}, 
                    "$OutputSize" -> {112, 112}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {112, 112}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 112, 112}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {112, 112}, 
                    "$OutputSize" -> {56, 56}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 112, 112}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block3" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{256, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    256|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{256, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{256}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 256, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {56, 56}, "$WeightsInputChannels" -> 
                    256|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {256, 56, 56}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 256, "$InputSize" -> {56, 56}, 
                    "$OutputSize" -> {28, 28}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 56, 56}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block4" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{512, 256, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 256, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    256|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    512|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 
                    512|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {14, 14}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{256, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block5" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    512|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    512|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{512, 512, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{512}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 512, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 512, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {14, 14}, "$WeightsInputChannels" -> 
                    512|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {512, 14, 14}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 512, "$InputSize" -> {14, 14}, 
                    "$OutputSize" -> {7, 7}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 14, 14}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "flatten" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{512, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]|>|>,
                     "classifier" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{4096, 25088}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 25088, "$InputDimensions" -> {25088}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{25088}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{4096, 4096}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{1000, 4096}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1000}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {1000}, "$OutputSize" -> 1000, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1000}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1000}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{1000}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{25088}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1000}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "block1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classifier", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classifier", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 224, 224}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{224, 224}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, "MeanImage" -> None, 
                    "VarianceImage" -> None, "DataTransposed" -> False, 
                    "Method" -> "Stretch", "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "13.1.4"|>|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{1000}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {1, 2, 
                    Skeleton[997], 1000}, "InputDepth" -> 1, "Multilabel" -> 
                    False, "Dimensions" -> 1000, "$Rank" -> 0, "$Version" -> 
                    "13.1.4"|>|>|>, NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]224\[Times]224\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "5", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]112\[Times]112\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "5", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]56\[Times]56\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 256\[Times]28\[Times]28\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]14\[Times]14\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 512\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"flatten\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 25088\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"classifier\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "6", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1000\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.887301539896695*^9, 3.887301559326446*^9}, 
   3.887301705471488*^9, 3.887301942431905*^9, 3.887302024636427*^9, 
   3.887302407196023*^9, 3.887302478681964*^9, 3.8873026272780943`*^9, 
   3.887302677606264*^9, {3.887302816899226*^9, 3.887302820277566*^9}, 
   3.887303015377967*^9, 3.887303163978881*^9, 3.887303426332614*^9, {
   3.887303477579854*^9, 3.8873034879212646`*^9}, {3.887303528875944*^9, 
   3.887303563973078*^9}, 3.8873035945727882`*^9, {3.887303628409609*^9, 
   3.88730364612856*^9}, {3.88730377465047*^9, 3.887303804321776*^9}, {
   3.887303897618167*^9, 3.887303909935001*^9}, 3.887303981572742*^9, 
   3.887304037591687*^9},
 CellLabel->
  "Out[459]=",ExpressionUUID->"35de65af-181a-4b7f-93df-ae89fd2d45e2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "VGGNet", "]"}]], "Input",
 CellChangeTimes->{{3.8873024820578136`*^9, 3.8873024866556263`*^9}, {
  3.887303600074854*^9, 3.887303601173345*^9}, {3.887304043133906*^9, 
  3.88730404360326*^9}},
 CellLabel->
  "In[460]:=",ExpressionUUID->"13ddb35c-6ee4-42ab-89f8-b70629198602"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    TagBox[GridBox[{
       {
        ItemBox[
         PaneBox[
          StyleBox["\<\" Net Information\"\>", "InformationTitleText",
           StripOnInput->False],
          FrameMargins->{{4, 0}, {-1, 1}}],
         BaseStyle->"InformationTitleBackground",
         StripOnInput->False]},
       {
        PaneBox[GridBox[{
           {
            
            DynamicModuleBox[{System`InformationDump`open$$ = {
             False, False, False, False, False, False, False, False}}, 
             StyleBox[GridBox[{
                {
                 TagBox[
                  TooltipBox[
                   StyleBox["\<\" Layers Count\"\>", "InformationRowLabel",
                    StripOnInput->False],
                   "\"LayersCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "LayersCount", "Tooltip"]& ], "38"},
                {
                 TagBox[
                  TooltipBox[
                   StyleBox["\<\" Arrays Count\"\>", "InformationRowLabel",
                    StripOnInput->False],
                   "\"ArraysCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "ArraysCount", "Tooltip"]& ], "32"},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Shared Arrays Count\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"SharedArraysCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "SharedArraysCount", "Tooltip"]& ], "0"},
                {
                 TagBox[
                  TooltipBox[
                   StyleBox["\<\" Input Port Names\"\>", "InformationRowLabel",
                    StripOnInput->False],
                   "\"InputPortNames\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "InputPortNames", "Tooltip"]& ], 
                 RowBox[{"{", "\<\"Input\"\>", "}"}]},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Output Port Names\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"OutputPortNames\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "OutputPortNames", "Tooltip"]& ], 
                 RowBox[{"{", "\<\"Output\"\>", "}"}]},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Arrays Total Element Count\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"ArraysTotalElementCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "ArraysTotalElementCount", "Tooltip"]& ], 
                 "138357544"},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Arrays Total Size\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"ArraysTotalSize\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "ArraysTotalSize", "Tooltip"]& ], 
                 
                 TemplateBox[{
                  "553.430176`", "\"MB\"", "megabytes", "\"Megabytes\""},
                  "Quantity"]}
               },
               AutoDelete->False,
               GridBoxAlignment->{"Columns" -> {Right, Left}},
               GridBoxDividers->None,
               GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}], "DialogStyle",
              StripOnInput->False],
             DynamicModuleValues:>{}]}
          },
          DefaultBaseStyle->"Column",
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[3.6]}, 
              Offset[0.2]}}],
         FrameMargins->6]}
      },
      DefaultBaseStyle->"Column",
      FrameStyle->Directive[
        GrayLevel[0.8], 
        Thickness[Tiny]],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "LayersCount" -> 38, "ArraysCount" -> 32, "SharedArraysCount" -> 0, 
    "InputPortNames" -> {"Input"}, "OutputPortNames" -> {"Output"}, 
    "ArraysTotalElementCount" -> 138357544, "ArraysTotalSize" -> 
    Quantity[553.430176, "Megabytes"], "ObjectType" -> "NetInformation"|>, 
   True]]], "Output",
 CellChangeTimes->{
  3.88730248970287*^9, 3.887302684000573*^9, 3.887303017170854*^9, 
   3.8873031653766403`*^9, {3.887303506059278*^9, 3.887303565769998*^9}, {
   3.8873035957724447`*^9, 3.88730364723493*^9}, 3.887303807129323*^9, 
   3.887304044055645*^9},
 CellLabel->
  "Out[460]=",ExpressionUUID->"d21c60fd-938b-4f4f-96be-d057890ff612"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["miniVGGNet", "Section",
 CellChangeTimes->{{3.887299895035571*^9, 3.887299896855184*^9}, {
  3.887304060901951*^9, 
  3.88730406160203*^9}},ExpressionUUID->"95c60f04-b615-48c7-9f69-\
62973c8dc314"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"activation", " ", "=", " ", "Ramp"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"kfilter", " ", "=", " ", "3"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"kpooling", " ", "=", " ", "2"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nfilters", " ", "=", " ", "16"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"imageEnc", "  ", "=", " ", 
    RowBox[{"NetEncoder", "[", 
     RowBox[{"{", 
      RowBox[{"\"\<Image\>\"", ",", 
       RowBox[{"{", 
        RowBox[{"120", ",", "120"}], "}"}], ",", 
       RowBox[{"ColorSpace", "->", "\"\<RGB\>\""}]}], "}"}], 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.887301451050159*^9, 3.887301483815386*^9}, {
   3.887301601806212*^9, 3.887301616845024*^9}, {3.8873017190793324`*^9, 
   3.887301810326558*^9}, {3.887301859902269*^9, 3.8873018606936607`*^9}, {
   3.887302642203636*^9, 3.887302646431075*^9}, {3.887303006457629*^9, 
   3.887303007545466*^9}, {3.8873031556074038`*^9, 3.887303156369149*^9}, {
   3.887303353586857*^9, 3.8873033560117273`*^9}, {3.887303520573337*^9, 
   3.887303521076418*^9}, {3.88730355479046*^9, 3.887303555868741*^9}, {
   3.88730358733679*^9, 3.8873036208447247`*^9}, {3.887303763539888*^9, 
   3.887303796949976*^9}, 3.8873040737692842`*^9, {3.8873042226134663`*^9, 
   3.88730422312738*^9}, {3.8873042693034983`*^9, 3.8873042701296387`*^9}, {
   3.8873043942474937`*^9, 3.887304403962097*^9}},
 CellLabel->
  "In[580]:=",ExpressionUUID->"5c8ff4d2-ba22-4ab1-9520-778a6c5ee955"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]120\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Image Size\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   PaneBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"120", ",", "120"}], "}"}], Short[#, 3]& ], 
                    BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> False}, 
                    ContentPadding -> False, ImageSize -> {250}], Short], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Color Space\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"RGB\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Color Channels\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Interleaving\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Mean Image\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["None", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Variance Image\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["None", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Data Transposed\"", "\":\""}, "RowDefault"],
                   "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Method\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Stretch\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Resampling\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Automatic\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Padding\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  
                  TemplateBox[<|"color" -> GrayLevel[0]|>, 
                   "GrayLevelColorSwatchTemplate"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Alignment\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["Center", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]120\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8873014987531767`*^9, 3.887301617649111*^9, 3.8873017312159567`*^9, 
   3.887301762344853*^9, {3.887301848969912*^9, 3.887301861342041*^9}, 
   3.887302646718402*^9, 3.88730300822812*^9, 3.887303157159404*^9, 
   3.887303470502427*^9, 3.8873035217011337`*^9, {3.887303556369411*^9, 
   3.8873035884574833`*^9}, {3.887303621565789*^9, 3.887303640006014*^9}, 
   3.887303764767449*^9, 3.8873037973054647`*^9, 3.887304132592506*^9, 
   3.8873042237704906`*^9, 3.8873042706544847`*^9, 3.887304404481398*^9, 
   3.887304702605513*^9},
 CellLabel->
  "Out[584]=",ExpressionUUID->"366f0dad-6a32-4695-9532-ddd0a5dcf80f"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"block1", " ", "=", " ", 
    RowBox[{"NetChain", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"nfilters", ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{"nfilters", ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{"kpooling", ",", 
         RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"block2", " ", "=", " ", 
    RowBox[{"NetChain", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"2", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"2", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{"kpooling", ",", 
         RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"block3", " ", "=", " ", 
    RowBox[{"NetChain", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"4", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"4", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"4", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{"kpooling", ",", 
         RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"block4", " ", "=", " ", 
    RowBox[{"NetChain", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"8", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"8", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"8", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{"kpooling", ",", 
         RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"block5", " ", "=", " ", 
    RowBox[{"NetChain", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"8", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"8", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ConvolutionLayer", "[", 
        RowBox[{
         RowBox[{"8", "*", "nfilters"}], ",", "kfilter", ",", 
         RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
       "activation", ",", 
       RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"PoolingLayer", "[", 
        RowBox[{"kpooling", ",", 
         RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}]}], 
      "\[IndentingNewLine]", "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"classifier", " ", "=", " ", 
    RowBox[{"NetChain", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"LinearLayer", "[", "200", "]"}], ",", "activation", ",", 
       RowBox[{"LinearLayer", "[", "200", "]"}], ",", "activation", ",", 
       RowBox[{"LinearLayer", "[", "10", "]"}], ",", 
       RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classDec", " ", "=", " ", 
   RowBox[{"NetDecoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Class\>\"", ",", "labels"}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.887301314569405*^9, 3.887301402238488*^9}, {
   3.887301583388988*^9, 3.887301586554356*^9}, {3.8873016202533073`*^9, 
   3.8873016933177834`*^9}, {3.887301733800295*^9, 3.887301820035823*^9}, {
   3.887301889027027*^9, 3.887301911038733*^9}, {3.887301979259851*^9, 
   3.8873020042849607`*^9}, {3.887302376561911*^9, 3.8873023913954573`*^9}, {
   3.887302447147357*^9, 3.887302453924601*^9}, {3.887302553726844*^9, 
   3.88730260770229*^9}, {3.887302653098165*^9, 3.8873026724232683`*^9}, {
   3.887302795563652*^9, 3.887302797429501*^9}, {3.887303390900701*^9, 
   3.8873034291060266`*^9}, {3.8873034848086767`*^9, 3.8873034850415907`*^9}, 
   3.88730370437796*^9, {3.887303890562216*^9, 3.887303907564084*^9}, {
   3.887303975486524*^9, 3.887303978990644*^9}, {3.887304098049605*^9, 
   3.8873041097254877`*^9}, {3.887304170197136*^9, 3.8873041962878513`*^9}, {
   3.887304526570148*^9, 3.887304530271702*^9}, {3.887304855301935*^9, 
   3.887304918081306*^9}},
 CellLabel->
  "In[595]:=",ExpressionUUID->"1ccbbd24-5723-4a5b-ac84-28739e8e9eab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"miniVGGNet", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<block1\>\"", "->", " ", "block1"}], ",", 
      RowBox[{"\"\<block2\>\"", "->", "block2"}], ",", 
      RowBox[{"\"\<block3\>\"", "->", "block3"}], ",", 
      RowBox[{"\"\<block4\>\"", "->", "block4"}], ",", 
      RowBox[{"\"\<block5\>\"", "->", "block5"}], ",", 
      RowBox[{"\"\<flatten\>\"", "->", 
       RowBox[{"FlattenLayer", "[", "]"}]}], ",", 
      RowBox[{"\"\<classifier\>\"", "->", "classifier"}]}], "|>"}], ",", 
    RowBox[{"\"\<Input\>\"", "->", "imageEnc"}], ",", 
    RowBox[{"\"\<Output\>\"", "->", "classDec"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.887301498571474*^9, 3.887301558287977*^9}, {
  3.8873019337824297`*^9, 3.8873019416560383`*^9}, {3.887302017787312*^9, 
  3.8873020238937263`*^9}, {3.8873023999120617`*^9, 3.8873024064091263`*^9}, {
  3.88730247185703*^9, 3.88730247792997*^9}, {3.887302616693943*^9, 
  3.887302626723106*^9}, {3.887302804924234*^9, 3.887302819311186*^9}, {
  3.887303270577837*^9, 3.887303273267174*^9}, {3.887303410869122*^9, 
  3.887303424982863*^9}, {3.88730402280072*^9, 3.887304025020031*^9}, {
  3.887304102572586*^9, 3.8873041032924833`*^9}},
 CellLabel->
  "In[602]:=",ExpressionUUID->"b6da290d-56d9-4453-8d5f-8d5a4c1e00f5"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "block1" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{16, 3, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {120, 120}, 
                    "$OutputSize" -> {120, 120}, "$WeightsInputChannels" -> 
                    3|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 120, 120}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 16, 
                    "$SpatialDimensions" -> {120, 120}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{16, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {120, 120}, 
                    "$OutputSize" -> {120, 120}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 120, 120}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 16, 
                    "$SpatialDimensions" -> {120, 120}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 16, "$InputSize" -> {120, 120}, 
                    "$OutputSize" -> {60, 60}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 60, 60}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 60, 60}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{32, 16, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {60, 60}, 
                    "$OutputSize" -> {60, 60}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 60, 60}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {60, 60}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{32, 32, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {60, 60}, 
                    "$OutputSize" -> {60, 60}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 60, 60}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{32}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{32}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {60, 60}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 32, "$InputSize" -> {60, 60}, 
                    "$OutputSize" -> {30, 30}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 30, 30}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block3" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{64, 32, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {30, 30}, 
                    "$OutputSize" -> {30, 30}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 30, 30}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {30, 30}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {30, 30}, 
                    "$OutputSize" -> {30, 30}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 30, 30}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {30, 30}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{64, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {30, 30}, 
                    "$OutputSize" -> {30, 30}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 30, 30}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {30, 30}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {30, 30}, 
                    "$OutputSize" -> {15, 15}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 15, 15}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block4" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{128, 64, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {15, 15}, 
                    "$OutputSize" -> {15, 15}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {15, 15}, 
                    "$OutputSize" -> {15, 15}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {15, 15}, 
                    "$OutputSize" -> {15, 15}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {15, 15}, 
                    "$OutputSize" -> {7, 7}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block5" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 128|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 128|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{128, 128, 3, 3}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 128|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {3, 3}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>, 
                    "flatten" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "classifier" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{200, 1152}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {200}, "$OutputSize" -> 200, 
                    "$InputSize" -> 1152, "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {200}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{200, 200}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{200}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {200}, "$OutputSize" -> 200, 
                    "$InputSize" -> 200, "$InputDimensions" -> {200}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {200}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`TensorT[{10, 200}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 200, "$InputDimensions" -> {200}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "block1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classifier", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classifier", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 120, 120}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{120, 120}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, "MeanImage" -> None, 
                    "VarianceImage" -> None, "DataTransposed" -> False, 
                    "Method" -> "Stretch", "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "13.1.4"|>|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{"\"n01440764\"", "\"n02102040\"", 
                    Skeleton[7], "\"n03888257\""}, {
                    "n01440764", "n02102040", "n02979186", "n03000684", 
                    "n03028079", "n03394916", "n03417042", "n03425413", 
                    "n03445777", "n03888257"}], "InputDepth" -> 1, 
                    "Multilabel" -> False, "Dimensions" -> 10, "$Rank" -> 0, 
                    "$Version" -> "13.1.4"|>|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]120\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 16\[Times]60\[Times]60\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 32\[Times]30\[Times]30\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]3\[Times]3\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"flatten\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1152\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"classifier\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "6", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.887301539896695*^9, 3.887301559326446*^9}, 
   3.887301705471488*^9, 3.887301942431905*^9, 3.887302024636427*^9, 
   3.887302407196023*^9, 3.887302478681964*^9, 3.8873026272780943`*^9, 
   3.887302677606264*^9, {3.887302816899226*^9, 3.887302820277566*^9}, 
   3.887303015377967*^9, 3.887303163978881*^9, 3.887303426332614*^9, {
   3.887303477579854*^9, 3.8873034879212646`*^9}, {3.887303528875944*^9, 
   3.887303563973078*^9}, 3.8873035945727882`*^9, {3.887303628409609*^9, 
   3.88730364612856*^9}, {3.88730377465047*^9, 3.887303804321776*^9}, {
   3.887303897618167*^9, 3.887303909935001*^9}, 3.887303981572742*^9, 
   3.887304037591687*^9, {3.887304104269668*^9, 3.887304112036727*^9}, {
   3.887304147270813*^9, 3.8873041501661053`*^9}, 3.8873042000909367`*^9, 
   3.8873042310800133`*^9, 3.887304278301203*^9, 3.887304411824245*^9, 
   3.887304569748563*^9, 3.88730474186388*^9, 3.8873049284076777`*^9},
 CellLabel->
  "Out[602]=",ExpressionUUID->"bc863296-78fc-4d2b-ad2e-b6f9541e8841"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "miniVGGNet", "]"}]], "Input",
 CellChangeTimes->{{3.8873024820578136`*^9, 3.8873024866556263`*^9}, {
  3.887303600074854*^9, 3.887303601173345*^9}, {3.887304043133906*^9, 
  3.88730404360326*^9}, {3.887304140339263*^9, 3.887304143108466*^9}},
 CellLabel->
  "In[603]:=",ExpressionUUID->"418969ea-c418-4539-afa0-e541a38f3c8c"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    TagBox[GridBox[{
       {
        ItemBox[
         PaneBox[
          StyleBox["\<\" Net Information\"\>", "InformationTitleText",
           StripOnInput->False],
          FrameMargins->{{4, 0}, {-1, 1}}],
         BaseStyle->"InformationTitleBackground",
         StripOnInput->False]},
       {
        PaneBox[GridBox[{
           {
            
            DynamicModuleBox[{System`InformationDump`open$$ = {
             False, False, False, False, False, False, False, False}}, 
             StyleBox[GridBox[{
                {
                 TagBox[
                  TooltipBox[
                   StyleBox["\<\" Layers Count\"\>", "InformationRowLabel",
                    StripOnInput->False],
                   "\"LayersCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "LayersCount", "Tooltip"]& ], "51"},
                {
                 TagBox[
                  TooltipBox[
                   StyleBox["\<\" Arrays Count\"\>", "InformationRowLabel",
                    StripOnInput->False],
                   "\"ArraysCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "ArraysCount", "Tooltip"]& ], "84"},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Shared Arrays Count\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"SharedArraysCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "SharedArraysCount", "Tooltip"]& ], "0"},
                {
                 TagBox[
                  TooltipBox[
                   StyleBox["\<\" Input Port Names\"\>", "InformationRowLabel",
                    StripOnInput->False],
                   "\"InputPortNames\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "InputPortNames", "Tooltip"]& ], 
                 RowBox[{"{", "\<\"Input\"\>", "}"}]},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Output Port Names\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"OutputPortNames\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "OutputPortNames", "Tooltip"]& ], 
                 RowBox[{"{", "\<\"Output\"\>", "}"}]},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Arrays Total Element Count\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"ArraysTotalElementCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "ArraysTotalElementCount", "Tooltip"]& ], 
                 "1197818"},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Arrays Total Size\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"ArraysTotalSize\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "ArraysTotalSize", "Tooltip"]& ], 
                 
                 TemplateBox[{
                  "4.791272`", "\"MB\"", "megabytes", "\"Megabytes\""},
                  "Quantity"]}
               },
               AutoDelete->False,
               GridBoxAlignment->{"Columns" -> {Right, Left}},
               GridBoxDividers->None,
               GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}], "DialogStyle",
              StripOnInput->False],
             DynamicModuleValues:>{}]}
          },
          DefaultBaseStyle->"Column",
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[3.6]}, 
              Offset[0.2]}}],
         FrameMargins->6]}
      },
      DefaultBaseStyle->"Column",
      FrameStyle->Directive[
        GrayLevel[0.8], 
        Thickness[Tiny]],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "LayersCount" -> 51, "ArraysCount" -> 84, "SharedArraysCount" -> 0, 
    "InputPortNames" -> {"Input"}, "OutputPortNames" -> {"Output"}, 
    "ArraysTotalElementCount" -> 1197818, "ArraysTotalSize" -> 
    Quantity[4.791272, "Megabytes"], "ObjectType" -> "NetInformation"|>, 
   True]]], "Output",
 CellChangeTimes->{
  3.88730248970287*^9, 3.887302684000573*^9, 3.887303017170854*^9, 
   3.8873031653766403`*^9, {3.887303506059278*^9, 3.887303565769998*^9}, {
   3.8873035957724447`*^9, 3.88730364723493*^9}, 3.887303807129323*^9, 
   3.887304044055645*^9, 3.8873041133847637`*^9, {3.887304143532198*^9, 
   3.8873041515573997`*^9}, {3.8873042102783403`*^9, 3.887304232920493*^9}, 
   3.887304279570537*^9, 3.887304413992764*^9, 3.887304572194769*^9, 
   3.887304757425527*^9, 3.887304938242751*^9},
 CellLabel->
  "Out[603]=",ExpressionUUID->"d3ac2bb1-e992-420b-920f-64705179519a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Training", "Section",
 CellChangeTimes->{{3.8873032569897137`*^9, 
  3.887303261522298*^9}},ExpressionUUID->"ca8fb2ca-abf7-4e15-b549-\
8ab203b95e0c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"miniVGGNet", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"miniVGGNet", ",", 
    RowBox[{"{", 
     RowBox[{"genTrain", ",", 
      RowBox[{"\"\<RoundLength\>\"", "\[Rule]", 
       RowBox[{"Length", "[", "trainingDataFiles", "]"}]}]}], "}"}], ",", 
    RowBox[{"BatchSize", "->", "32"}], ",", 
    RowBox[{"MaxTrainingRounds", "->", "50"}], ",", 
    RowBox[{"ValidationSet", "->", 
     RowBox[{"Scaled", "[", "0.1", "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.887139191381907*^9, 3.887139214990491*^9}, {
  3.887139835201268*^9, 3.887139836698352*^9}, {3.8871399528082113`*^9, 
  3.887139953609837*^9}, {3.88714001202826*^9, 3.88714001951877*^9}, {
  3.8871414520755177`*^9, 3.887141453206833*^9}, {3.887141486018591*^9, 
  3.887141489020554*^9}, {3.887142529892151*^9, 3.8871425414476624`*^9}, {
  3.8871535589427433`*^9, 3.887153567979046*^9}, {3.887153630779949*^9, 
  3.887153631884293*^9}, {3.887303289625135*^9, 3.887303295483387*^9}, {
  3.8873045803169622`*^9, 3.887304580649585*^9}, {3.88730499056748*^9, 
  3.887304992385099*^9}},
 CellLabel->
  "In[605]:=",ExpressionUUID->"80966a0a-3587-4913-8cb9-bd477dbb8d72"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "block1" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{16, 3, 3, 
                    3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{16}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {120, 120}, 
                    "$OutputSize" -> {120, 120}, "$WeightsInputChannels" -> 
                    3|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 120, 120}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{16}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{16}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{16}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{16}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 16, 
                    "$SpatialDimensions" -> {120, 120}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{16, 16, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{16}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 16, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {120, 120}, 
                    "$OutputSize" -> {120, 120}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {16, 120, 120}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{16}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{16}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{16}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{16}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 16, 
                    "$SpatialDimensions" -> {120, 120}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 16, "$InputSize" -> {120, 120}, 
                    "$OutputSize" -> {60, 60}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{16, 60, 60}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{16, 60, 60}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block2" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{32, 16, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 16, "$InputSize" -> {60, 60}, 
                    "$OutputSize" -> {60, 60}, "$WeightsInputChannels" -> 
                    16|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{16, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 60, 60}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {60, 60}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{32, 32, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 32, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {60, 60}, 
                    "$OutputSize" -> {60, 60}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {32, 60, 60}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{32}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{32}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 32, 
                    "$SpatialDimensions" -> {60, 60}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 32, "$InputSize" -> {60, 60}, 
                    "$OutputSize" -> {30, 30}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{32, 30, 30}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "7", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{16, 60, 60}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{32, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block3" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 32, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 32, "$InputSize" -> {30, 30}, 
                    "$OutputSize" -> {30, 30}, "$WeightsInputChannels" -> 
                    32|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{32, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 30, 30}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {30, 30}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {30, 30}, 
                    "$OutputSize" -> {30, 30}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 30, 30}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {30, 30}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 64, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 64, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {30, 30}, 
                    "$OutputSize" -> {30, 30}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {64, 30, 30}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{64}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{64}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 64, 
                    "$SpatialDimensions" -> {30, 30}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 64, "$InputSize" -> {30, 30}, 
                    "$OutputSize" -> {15, 15}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{64, 15, 15}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{32, 30, 30}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{64, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block4" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 64, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 64, "$InputSize" -> {15, 15}, 
                    "$OutputSize" -> {15, 15}, "$WeightsInputChannels" -> 
                    64|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{64, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {15, 15}, 
                    "$OutputSize" -> {15, 15}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {15, 15}, 
                    "$OutputSize" -> {15, 15}, "$WeightsInputChannels" -> 
                    128|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {15, 15}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {15, 15}, 
                    "$OutputSize" -> {7, 7}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{64, 15, 15}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "block5" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 128|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 128|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 128, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 128, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {7, 7}, "$WeightsInputChannels" -> 128|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {128, 7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {7, 7}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 128, "$InputSize" -> {7, 7}, 
                    "$OutputSize" -> {3, 3}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 7, 7}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>|>, 
                    "flatten" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{128, 3, 3}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>|>, 
                    "classifier" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{200, 
                    1152}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {200}, "$OutputSize" -> 200, 
                    "$InputSize" -> 1152, "$InputDimensions" -> {1152}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{1152}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {200}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{200, 
                    200}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{200}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {200}, "$OutputSize" -> 200, 
                    "$InputSize" -> 200, "$InputDimensions" -> {200}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {200}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 200}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 200, "$InputDimensions" -> {200}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{200}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "6", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{1152}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "block1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block4", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "block5", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classifier", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "flatten", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classifier", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 120, 120}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{120, 120}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, "MeanImage" -> None, 
                    "VarianceImage" -> None, "DataTransposed" -> False, 
                    "Method" -> "Stretch", "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "13.1.4"|>|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{"\"n01440764\"", "\"n02102040\"", 
                    Skeleton[7], "\"n03888257\""}, {
                    "n01440764", "n02102040", "n02979186", "n03000684", 
                    "n03028079", "n03394916", "n03417042", "n03425413", 
                    "n03445777", "n03888257"}], "InputDepth" -> 1, 
                    "Multilabel" -> False, "Dimensions" -> 10, "$Rank" -> 0, 
                    "$Version" -> "13.1.4"|>|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]120\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 16\[Times]60\[Times]60\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 32\[Times]30\[Times]30\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 64\[Times]15\[Times]15\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]7\[Times]7\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"block5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "10", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "block5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[Times]3\[Times]3\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "block5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"flatten\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1152\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "flatten"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"classifier\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "6", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.887139247507613*^9, 3.887139322979417*^9, {3.887139949304378*^9, 
   3.8871399791858664`*^9}, 3.8871411069791822`*^9, 3.887141483828578*^9, 
   3.887141856884632*^9, 3.887145666295257*^9, {3.8871536272933693`*^9, 
   3.887153656250218*^9}, 3.887153766831962*^9, 3.887304369941883*^9, 
   3.887304494119619*^9, 3.8873046614320393`*^9, 3.887304849355678*^9, 
   3.88730498730744*^9, 3.887310069360887*^9},
 CellLabel->
  "Out[605]=",ExpressionUUID->"03c70a0d-833d-4dfc-87be-e6b3d0e6ecf2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetMeasurements", "[", 
  RowBox[{"miniVGGNet", ",", "testDataFiles", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Accuracy\>\"", ",", 
     RowBox[{"\"\<ErrorRate\>\"", "->", "2"}], ",", 
     "\"\<ConfusionMatrixPlot\>\""}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8871411086577797`*^9, 3.887141155330662*^9}, {
   3.887141195151024*^9, 3.887141195492817*^9}, {3.887141227447445*^9, 
   3.8871412654644737`*^9}, {3.8871413018873262`*^9, 3.887141302253614*^9}, {
   3.887141380994021*^9, 3.887141381837483*^9}, {3.887141880758121*^9, 
   3.887141881159686*^9}, {3.887141915472473*^9, 3.8871419274912033`*^9}, 
   3.88730330213072*^9},
 CellLabel->
  "In[606]:=",ExpressionUUID->"93f02daf-bb70-4410-912c-dc2776bee192"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.7388535031847134`", ",", "0.14420382165605095`", ",", GridBox[{
     {
      RotationBox[
       ItemBox["\<\"actual class\"\>",
        DefaultBaseStyle->"LabeledLabel"],
       BoxRotation->1.5708], 
      GraphicsBox[RasterBox[CompressedData["
1:eJyVVX0snXcUNhaMauejOnNJsWhGiY2iOp52mI3WlGJ06bQrJqmWkaqPoei0
qK/U2nVKSPahqjaGpYYyXY0aSmW9uL0+73vf+34YIyXKumb/nj/8kl/y5uTk
/J7zPM85r8WJM4GRGmpqajr/3/++A8RUVlPCocPqcumJQB4nDfOZlnYBn1mG
z39vy2PDxHX5mJ6A797pcgo1FnE+2HX5/X0C8Op02NEeAUzkSuZyrIiY/t7x
vdVKpLut12yvUCFRu8nZa4EHk1Q6Nx+lgoeNacCdRxwuV7c2HcoRcP2i8ZrS
V0SmZmFbaLYImyKH/rJ7Ikxl/gtvf8mjwzh+R6OfAP2lN/0LHEUSj3ptHFdy
lkPGzt8bm4t5DPQtvMSPCZAuNM1IWodxOlNm4vebHEpz5zNm4wxa9Eelt32U
aHe/d7HzExV0Ag6ZbXvEk3XKHXOZ1E4VNqyPxG814vE03Gogq0qA8683ZiK3
qJBhN2UfdZWDJRtU/lq0QPJD9UXVaY6KFCRDHGC2MaIzwMMtJ9zUckXAle5v
TvW3jML8pLw8vXcSsu665oRQJXqkegblEgbnfEsb5SUsPu+yiy9L5Eme9+jb
PR0uE6CmJ0mt1xQRZH78um2+SL67WZyUXi+HTP5lxTNY318QHWuhQsXVWQ1p
C48/H7w4eDdidtBybAJqLw6zafyKBxarx+YFdLwSXK7hLaJ9tKcx4gcRB710
1xO/FQGN+7LaThFXfK7N9U7Rfqb0onxC1dHmo/zeuzUEadFI1pKeHAbn6yRv
5DLg3XTiGnLmcOrjs/GGyUpMFup2bsxzJE6qXwonNddmlzpk3WtKeLi49MWM
qyC/KwlI3iagcnk93v3JHHaH1ZdGtyhx0CdB6rSVJ/0/wto/OcA/ho1HFbtv
dgoX7tx6/PeYkswPbFhM6NmrABfMNLYuKfHLhnQx5rk/stVqpqQ/sWh3qNEz
COPQ/BaXNf2BQPZF8UzxQ8UpHc/tmOtIzxqBQ5oYodKahMRf9cx7jSF9TvHp
EVmzWlo0i4kYiXXIIINrMrMwvorbtI6ULpS+Q14/yz8MZbHhGMe1vf7cT8k5
Mbd3Cwix9rU4nDYB1uTT8kHzGTQaF/dNn2ZJPClfqRvtSmLg4tM34jTIYiKl
LK+3hCfjhUkHGM/FWVRG2sUuGynRqzes2N7FbXqONjvXW1a97+qmj8PConfa
7/40bLMXxuXeLLmvqPmifEj919RzU8y1PWYwlWuqtapQwKYyT66zhyP3HrXH
KJzy9olnixceoiKvTZz8SA7dXT/u3H+TQf/Xnv+0yXlkGN501coTkFZXEt0Z
IKK6O/948g0F6g+vrB51Y8HaF2eV+tH7n+KTml8qn8JD5RdUNBz54o8BLHgq
gkKmZFh92GpV6073RcWpuaPepXxF8UP5hPIt9e6/4ibe6A==
        "], {{0, 0}, {10, 10}}, {0, 1}],
       Background->GrayLevel[1],
       BaseStyle->Directive[
        FontSize -> 7, FontFamily -> "Verdana", FontWeight -> "Thin", 
         FontTracking -> "Condensed"],
       Epilog->{{
          InsetBox[
           FormBox["335", TraditionalForm], {0.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["6", TraditionalForm], {1.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["6", TraditionalForm], {2.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["17", TraditionalForm], {3.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["3", TraditionalForm], {4.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["4", TraditionalForm], {5.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["2", TraditionalForm], {6.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["1", TraditionalForm], {7.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["10", TraditionalForm], {8.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["3", TraditionalForm], {9.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["14", TraditionalForm], {0.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["316", TraditionalForm], {1.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["6", TraditionalForm], {2.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["30", TraditionalForm], {3.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["2", TraditionalForm], {4.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["3", TraditionalForm], {5.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["12", TraditionalForm], {6.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["3", TraditionalForm], {7.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["6", TraditionalForm], {8.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["3", TraditionalForm], {9.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["4", TraditionalForm], {0.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["3", TraditionalForm], {1.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["221", TraditionalForm], {2.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["14", TraditionalForm], {3.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["1", TraditionalForm], {4.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["15", TraditionalForm], {5.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["18", TraditionalForm], {6.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["71", TraditionalForm], {7.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["8", TraditionalForm], {8.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["2", TraditionalForm], {9.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["33", TraditionalForm], {0.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["11", TraditionalForm], {1.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["16", TraditionalForm], {2.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["216", TraditionalForm], {3.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["4", TraditionalForm], {4.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["24", TraditionalForm], {5.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["24", TraditionalForm], {6.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["41", TraditionalForm], {7.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {8.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["10", TraditionalForm], {9.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["5", TraditionalForm], {0.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["4", TraditionalForm], {1.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["4", TraditionalForm], {2.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["10", TraditionalForm], {3.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["306", TraditionalForm], {4.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["9", TraditionalForm], {5.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["17", TraditionalForm], {6.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["43", TraditionalForm], {7.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["4", TraditionalForm], {8.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {9.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["7", TraditionalForm], {0.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["11", TraditionalForm], {1.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["17", TraditionalForm], {2.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["33", TraditionalForm], {3.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["12", TraditionalForm], {4.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["248", TraditionalForm], {5.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["12", TraditionalForm], {6.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["32", TraditionalForm], {7.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["15", TraditionalForm], {8.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {9.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["3", TraditionalForm], {0.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["1", TraditionalForm], {1.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["5", TraditionalForm], {2.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {3.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["10", TraditionalForm], {4.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["5", TraditionalForm], {5.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["319", TraditionalForm], {6.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["34", TraditionalForm], {7.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["1", TraditionalForm], {8.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["4", TraditionalForm], {9.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["2", TraditionalForm], {0.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["4", TraditionalForm], {1.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["9", TraditionalForm], {2.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["14", TraditionalForm], {3.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["9", TraditionalForm], {4.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["8", TraditionalForm], {5.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["20", TraditionalForm], {6.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["347", TraditionalForm], {7.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["2", TraditionalForm], {8.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["4", TraditionalForm], {9.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["19", TraditionalForm], {0.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["10", TraditionalForm], {1.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["12", TraditionalForm], {2.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["14", TraditionalForm], {3.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["5", TraditionalForm], {4.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {5.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["14", TraditionalForm], {6.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["9", TraditionalForm], {7.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["284", TraditionalForm], {8.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["25", TraditionalForm], {9.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["11", TraditionalForm], {0.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["8", TraditionalForm], {1.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["5", TraditionalForm], {2.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["18", TraditionalForm], {3.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["13", TraditionalForm], {4.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["2", TraditionalForm], {5.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {6.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["8", TraditionalForm], {7.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["10", TraditionalForm], {8.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["308", TraditionalForm], {9.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}},
       Frame->True,
       FrameLabel->{None, None},
       FrameTicks->{{{{9.5, 
            FormBox[
             RotationBox["\"n01440764\"", BoxRotation -> 0.], 
             TraditionalForm]}, {8.5, 
            FormBox[
             RotationBox["\"n02102040\"", BoxRotation -> 0.], 
             TraditionalForm]}, {7.5, 
            FormBox[
             RotationBox["\"n02979186\"", BoxRotation -> 0.], 
             TraditionalForm]}, {6.5, 
            FormBox[
             RotationBox["\"n03000684\"", BoxRotation -> 0.], 
             TraditionalForm]}, {5.5, 
            FormBox[
             RotationBox["\"n03028079\"", BoxRotation -> 0.], 
             TraditionalForm]}, {4.5, 
            FormBox[
             RotationBox["\"n03394916\"", BoxRotation -> 0.], 
             TraditionalForm]}, {3.5, 
            FormBox[
             RotationBox["\"n03417042\"", BoxRotation -> 0.], 
             TraditionalForm]}, {2.5, 
            FormBox[
             RotationBox["\"n03425413\"", BoxRotation -> 0.], 
             TraditionalForm]}, {1.5, 
            FormBox[
             RotationBox["\"n03445777\"", BoxRotation -> 0.], 
             TraditionalForm]}, {0.5, 
            FormBox[
             RotationBox["\"n03888257\"", BoxRotation -> 0.], 
             TraditionalForm]}}, {{9.5, 
            FormBox["387", TraditionalForm]}, {8.5, 
            FormBox["395", TraditionalForm]}, {7.5, 
            FormBox["357", TraditionalForm]}, {6.5, 
            FormBox["386", TraditionalForm]}, {5.5, 
            FormBox["409", TraditionalForm]}, {4.5, 
            FormBox["394", TraditionalForm]}, {3.5, 
            FormBox["389", TraditionalForm]}, {2.5, 
            FormBox["419", TraditionalForm]}, {1.5, 
            FormBox["399", TraditionalForm]}, {0.5, 
            FormBox["390", TraditionalForm]}}}, {{{0.5, 
            FormBox[
             RotationBox["433", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {1.5, 
            FormBox[
             RotationBox["374", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {2.5, 
            FormBox[
             RotationBox["301", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {3.5, 
            FormBox[
             RotationBox["373", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {4.5, 
            FormBox[
             RotationBox["365", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {5.5, 
            FormBox[
             RotationBox["325", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {6.5, 
            FormBox[
             RotationBox["445", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {7.5, 
            FormBox[
             RotationBox["589", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {8.5, 
            FormBox[
             RotationBox["347", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {9.5, 
            FormBox[
             RotationBox["373", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}}, {{0.5, 
            FormBox[
             RotationBox["\"n01440764\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {1.5, 
            FormBox[
             RotationBox["\"n02102040\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {2.5, 
            FormBox[
             RotationBox["\"n02979186\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {3.5, 
            FormBox[
             RotationBox["\"n03000684\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {4.5, 
            FormBox[
             RotationBox["\"n03028079\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {5.5, 
            FormBox[
             RotationBox["\"n03394916\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {6.5, 
            FormBox[
             RotationBox["\"n03417042\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {7.5, 
            FormBox[
             RotationBox["\"n03425413\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {8.5, 
            FormBox[
             RotationBox["\"n03445777\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {9.5, 
            FormBox[
             RotationBox["\"n03888257\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}}}},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->{{All, 30.}, {30., All}},
       ImageSize->300,
       Method->{
        "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
         "DefaultGraphicsInteraction" -> {
          "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
           "Effects" -> {
            "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2},
              "Droplines" -> {
              "freeformCursorMode" -> True, 
               "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
         "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
         "RangePadding" -> Scaled[0.05]}]},
     {"", 
      ItemBox["\<\"predicted class\"\>",
       DefaultBaseStyle->"LabeledLabel"]}
    },
    BaseStyle->{
     FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.4]},
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Center}}},
    GridBoxSpacings->{"Columns" -> {{0.5}}}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.887141120855536*^9, {3.887141187577405*^9, 3.8871411996532803`*^9}, {
   3.8871412391218367`*^9, 3.887141269363475*^9}, 3.887141306942068*^9, {
   3.887141869121502*^9, 3.8871418850826817`*^9}, 3.887141932795657*^9, 
   3.887145685759487*^9, 3.887310155450626*^9},
 CellLabel->
  "Out[606]=",ExpressionUUID->"5767e3b9-7e56-40aa-8112-5bb314b5b63e"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{982.5, 528.},
WindowMargins->{{0, Automatic}, {0, Automatic}},
Magnification:>0.75 Inherited,
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"07767761-5eb7-44cf-8480-ad2030116a07"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 251, 5, 50, "Section",ExpressionUUID->"5d3719b4-7d73-4e50-adfe-59d3f1c490ce"],
Cell[834, 29, 2765, 62, 204, "Input",ExpressionUUID->"ad5534ea-6578-464f-9cae-f7dc8c33b6c0"],
Cell[CellGroupData[{
Cell[3624, 95, 971, 23, 73, "Input",ExpressionUUID->"56b7b102-ec99-4c3c-8ce2-1f43135c8382"],
Cell[4598, 120, 571, 11, 36, "Output",ExpressionUUID->"0fddf6e5-4187-46e4-8faf-6b901fca3ce1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5206, 136, 223, 4, 22, "Input",ExpressionUUID->"08e8b3d8-7e8a-4c18-a0b0-cc4506f18633"],
Cell[5432, 142, 248, 4, 36, "Output",ExpressionUUID->"7e6cdfc5-0aa1-467f-8429-42de8d3079c1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5717, 151, 222, 4, 22, "Input",ExpressionUUID->"c194f5b2-6398-4e7a-a205-a14db8a66002"],
Cell[5942, 157, 204, 4, 36, "Output",ExpressionUUID->"454c27db-6f42-4250-8680-fcc9abc41d44"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6183, 166, 385, 9, 22, "Input",ExpressionUUID->"734fceb7-aa13-42d2-b9d6-5ad97bb8dac4"],
Cell[6571, 177, 333, 7, 36, "Output",ExpressionUUID->"9ac45d8f-0ea0-4f2a-8f34-26b5ca3c522b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6941, 189, 597, 17, 23, "Input",ExpressionUUID->"cd20ee2b-5b3d-4ce7-8eba-28cc7437c0f3"],
Cell[7541, 208, 402273, 6615, 86, "Output",ExpressionUUID->"dda40f3b-5251-462e-ab61-d4dbf3fe2fac"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[409863, 6829, 151, 3, 50, "Section",ExpressionUUID->"b43674e8-f6c7-4b51-ac9b-9b8e70613707"],
Cell[CellGroupData[{
Cell[410039, 6836, 257, 5, 24, "Item",ExpressionUUID->"fd62b67e-c670-431c-a103-7d8f29c8ff77"],
Cell[410299, 6843, 365, 5, 19, "Subitem",ExpressionUUID->"73027853-5dbc-4955-929b-be842ed13f2d"],
Cell[410667, 6850, 432, 9, 19, "Subitem",ExpressionUUID->"a9e011e0-b375-449b-9c7b-d57b5af0964b"],
Cell[411102, 6861, 545, 11, 19, "Subitem",ExpressionUUID->"910a7ab7-3c31-48e8-aa18-88741bb84e08"],
Cell[CellGroupData[{
Cell[411672, 6876, 414, 8, 19, "Subitem",ExpressionUUID->"920e83e4-97e9-40d2-b727-4499a444af8b"],
Cell[CellGroupData[{
Cell[412111, 6888, 1421, 30, 117, "Input",ExpressionUUID->"02e2f6d3-ad9f-4e05-9d65-6316824507d7"],
Cell[413535, 6920, 7483, 157, 59, "Output",ExpressionUUID->"955da09f-7261-4dbb-98a1-4e504e13fbcc"]
}, Open  ]],
Cell[421033, 7080, 6714, 150, 614, "Input",ExpressionUUID->"d203e121-864a-4db3-bd09-a0aea8524f2f"],
Cell[CellGroupData[{
Cell[427772, 7234, 1285, 24, 57, "Input",ExpressionUUID->"32aa27a7-c42e-48f6-9513-eab5e56420e5"],
Cell[429060, 7260, 71313, 1313, 59, "Output",ExpressionUUID->"35de65af-181a-4b7f-93df-ae89fd2d45e2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[500410, 8578, 319, 6, 22, "Input",ExpressionUUID->"13ddb35c-6ee4-42ab-89f8-b70629198602"],
Cell[500732, 8586, 5905, 146, 152, "Output",ExpressionUUID->"d21c60fd-938b-4f4f-96be-d057890ff612"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[506710, 8740, 203, 4, 40, "Section",ExpressionUUID->"95c60f04-b615-48c7-9f69-62973c8dc314"],
Cell[CellGroupData[{
Cell[506938, 8748, 1606, 32, 120, "Input",ExpressionUUID->"5c8ff4d2-ba22-4ab1-9520-778a6c5ee955"],
Cell[508547, 8782, 7605, 159, 64, "Output",ExpressionUUID->"366f0dad-6a32-4695-9532-ddd0a5dcf80f"]
}, Open  ]],
Cell[516167, 8944, 7732, 177, 616, "Input",ExpressionUUID->"1ccbbd24-5723-4a5b-ac84-28739e8e9eab"],
Cell[CellGroupData[{
Cell[523924, 9125, 1340, 25, 43, "Input",ExpressionUUID->"b6da290d-56d9-4453-8d5f-8d5a4c1e00f5"],
Cell[525267, 9152, 87290, 1594, 164, "Output",ExpressionUUID->"bc863296-78fc-4d2b-ad2e-b6f9541e8841"]
}, Open  ]],
Cell[CellGroupData[{
Cell[612594, 10751, 369, 6, 22, "Input",ExpressionUUID->"418969ea-c418-4539-afa0-e541a38f3c8c"],
Cell[612966, 10759, 6139, 149, 163, "Output",ExpressionUUID->"d3ac2bb1-e992-420b-920f-64705179519a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[619154, 10914, 155, 3, 50, "Section",ExpressionUUID->"ca8fb2ca-abf7-4e15-b549-8ab203b95e0c"],
Cell[CellGroupData[{
Cell[619334, 10921, 1169, 22, 40, "Input",ExpressionUUID->"80966a0a-3587-4913-8cb9-bd477dbb8d72"],
Cell[620506, 10945, 83762, 1531, 62, "Output",ExpressionUUID->"03c70a0d-833d-4dfc-87be-e6b3d0e6ecf2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[704305, 12481, 745, 14, 22, "Input",ExpressionUUID->"93f02daf-bb70-4410-912c-dc2776bee192"],
Cell[705053, 12497, 30406, 871, 264, "Output",ExpressionUUID->"5767e3b9-7e56-40aa-8112-5bb314b5b63e"]
}, Open  ]]
}, Open  ]]
}
]
*)

