(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1167361,      20955]
NotebookOptionsPosition[   1161922,      20851]
NotebookOutlinePosition[   1162313,      20867]
CellTagsIndexPosition[   1162270,      20864]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Importing the Imagenette Dataset", "Section",
 CellChangeTimes->{
  3.886966484834105*^9, 3.886966523606743*^9, 3.886966693820922*^9, {
   3.887136234764105*^9, 
   3.887136252051091*^9}},ExpressionUUID->"ab75cd20-4ceb-488a-8340-\
c2261203da1d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
  "trainDirectory", " ", "=", " ", 
   "\"\</home/mk/imagenette2-160/train/\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "testDirectory", "  ", "=", " ", "\"\</home/mk/imagenette2-160/val/\>\""}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"form", " ", "=", " ", "\"\<*.JPEG\>\""}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ImportLabeldFilePaths", "[", 
    RowBox[{"parentDirectory_", ",", "form_"}], "]"}], ":=", " ", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "paths", ",", "ExtractLabelFromFilePath", ",", "LabeledFilePath"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"paths", " ", "=", " ", 
       RowBox[{"FileNames", "[", 
        RowBox[{"form", ",", "parentDirectory", ",", "2"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ExtractLabelFromFilePath", "[", "path_", "]"}], " ", ":=", 
       " ", 
       RowBox[{"Part", "[", 
        RowBox[{
         RowBox[{"FileNameSplit", "[", "path", "]"}], ",", 
         RowBox[{"-", "2"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"LabeledFilePath", "[", "path_", "]"}], " ", ":=", " ", 
       RowBox[{
        RowBox[{"File", "[", "path", "]"}], "->", 
        RowBox[{"ExtractLabelFromFilePath", "[", "path", "]"}]}]}], " ", ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"LabeledFilePath", ",", "paths"}], "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.886964449137669*^9, 3.886964461373549*^9}, {
   3.886964502845955*^9, 3.8869645207942553`*^9}, {3.8869649524043093`*^9, 
   3.886964952960499*^9}, {3.886964988841268*^9, 3.886965114318097*^9}, {
   3.886965207618587*^9, 3.8869654939384127`*^9}, {3.88696554684308*^9, 
   3.886965676010015*^9}, {3.886965736601329*^9, 3.886965845074841*^9}, {
   3.8869659870679626`*^9, 3.886966019462158*^9}, {3.886966066220867*^9, 
   3.886966069284411*^9}, {3.886966102073146*^9, 3.886966128500276*^9}, {
   3.8869661601646442`*^9, 3.886966183613948*^9}, {3.886966331300652*^9, 
   3.886966345301632*^9}, {3.886966377989546*^9, 3.886966436889002*^9}, {
   3.886966529341906*^9, 3.8869665943305073`*^9}, {3.886966624374587*^9, 
   3.886966647446649*^9}, 3.886966720420967*^9, {3.886966998211691*^9, 
   3.886967007963192*^9}, {3.8869753574629717`*^9, 3.8869753686549997`*^9}, {
   3.887139532515122*^9, 3.88713953477319*^9}, {3.887139802262438*^9, 
   3.88713980462589*^9}},
 CellLabel->
  "In[155]:=",ExpressionUUID->"d2788577-798d-4130-bbf6-e5c2085af804"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"trainingDataFiles", " ", "=", " ", 
   RowBox[{"ImportLabeldFilePaths", "[", 
    RowBox[{"trainDirectory", ",", "form"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"testDataFiles", " ", "=", " ", 
   RowBox[{"ImportLabeldFilePaths", "[", 
    RowBox[{"testDirectory", ",", "form"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"labels", " ", "=", " ", 
   RowBox[{"Union", "[", 
    RowBox[{"trainingDataFiles", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "2"}], "]"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", "labels"}], "Input",
 CellChangeTimes->{{3.8869666057572412`*^9, 3.886966611457056*^9}, {
  3.886966989448803*^9, 3.8869670149380407`*^9}, {3.886970618343615*^9, 
  3.886970691160719*^9}, {3.886975376999236*^9, 3.886975389803348*^9}, {
  3.887136313324113*^9, 3.8871363374601927`*^9}},
 CellLabel->
  "In[159]:=",ExpressionUUID->"908aa6ed-84cd-4fdd-8c67-3c91c27d8518"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"n01440764\"\>", ",", "\<\"n02102040\"\>", 
   ",", "\<\"n02979186\"\>", ",", "\<\"n03000684\"\>", 
   ",", "\<\"n03028079\"\>", ",", "\<\"n03394916\"\>", 
   ",", "\<\"n03417042\"\>", ",", "\<\"n03425413\"\>", 
   ",", "\<\"n03445777\"\>", ",", "\<\"n03888257\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.887136338049995*^9, 3.887139482962305*^9, 
  3.88713953750521*^9, 3.887139808279004*^9},
 CellLabel->
  "Out[162]=",ExpressionUUID->"5bfc484a-f462-494c-b186-380ca7d202f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "trainingDataFiles", "]"}]], "Input",
 CellChangeTimes->{{3.88713948741397*^9, 3.887139491561997*^9}},
 CellLabel->
  "In[163]:=",ExpressionUUID->"40a0b480-d68a-4446-9e0a-c40ddcfaf47f"],

Cell[BoxData["9469"], "Output",
 CellChangeTimes->{3.88713949179099*^9, 3.887139541617896*^9, 
  3.8871398136601562`*^9},
 CellLabel->
  "Out[163]=",ExpressionUUID->"30c2e8f0-309e-4c3f-9cdb-69647bed4adb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "testDataFiles", "]"}]], "Input",
 CellChangeTimes->{{3.8871394944924603`*^9, 3.887139497533276*^9}},
 CellLabel->
  "In[145]:=",ExpressionUUID->"31a47070-ddd0-42e4-87bc-b0d22a0c4b45"],

Cell[BoxData["3925"], "Output",
 CellChangeTimes->{3.88713949774338*^9},
 CellLabel->
  "Out[145]=",ExpressionUUID->"4b9801ab-c3c5-45da-bfb1-ccb5df88065d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"genTrain", "=", 
  RowBox[{"Function", "[", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"trainingDataFiles", ",", "#BatchSize"}], "]"}], "]"}]}]], "Input",\

 CellChangeTimes->{{3.8869668449910603`*^9, 3.886966914632674*^9}, {
  3.886966947937873*^9, 3.8869669725251703`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"5e05f33a-a81a-407b-a255-e27b8406d040"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"trainingDataFiles", ",", "#BatchSize"}], "]"}], "&"}]], "Output",
 CellChangeTimes->{3.8869670190905724`*^9, 3.8871363446555853`*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"f4ba1eb7-400e-4284-9a5e-42e63f3c15bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"Import", "[", 
      RowBox[{"#", "[", 
       RowBox[{"[", "1", "]"}], "]"}], "]"}], "->", 
     RowBox[{"#", "[", 
      RowBox[{"[", "2", "]"}], "]"}]}], ")"}], "&"}], " ", "/@", " ", 
  RowBox[{"genTrain", "[", 
   RowBox[{"<|", 
    RowBox[{"\"\<BatchSize\>\"", "\[Rule]", "4"}], "|>"}], "]"}], 
  "  "}]], "Input",
 CellChangeTimes->{{3.887136351995638*^9, 3.8871364028620977`*^9}, {
  3.88713643858812*^9, 3.88713666751798*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"c442d6c8-25a3-4cdf-af7c-d08ba04b9c55"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
XAwGBwaIxZEuXLn+3Q9PNUYrEkNgc3gKiZDPIOGR+bkZqdnpGfm5CHQRHoej
YfCM/EJKRjY+M5+SnkfbG5+/OyY/FUH/4P5z+N3fTUa9k4QhiX2x2bxkhGhb
AubtuPw39qX9YVfS79+L+fVf9v3zn/f+yxsx//KXg3sQ3N8nEXfnq5OwNgTX
zzBUnv/qh4XrV4c2Tp288zVeHwT80sXBBJ47U+tPlJgBP7C+X+IH7G3hB74H
+IEHbuG3n6L9t2wG4LedpHoHJ9tJ0QB+ZEo+l4dRKal6LcOgppq15GIT3e9g
l7m5NaWSpnJFc5WqrVbf0WSGea+13lDqZPjtFJeRYFIWqUUIpSAP8hfM02Pn
w0gW8KpK3HKfS24zCEI+Y8CjHR9sHOitKfPrqoLGnpaSgdaS8e6ysa4AaLw7
ONlXMT1cN9Zf09MebG8qAYFzwuAH+IH7weDXUGZqrjCD+4U8irBfXR0yA37l
ZfbKKndPX8Pyysj8ZPfyTM/q3ODR+aHVhZHVecjTiWOLk0fmxmCztjR1YmXq
1LGZjeMzm+tzZ0/OXz57ZIu985trH31w4drljfnp/vmZ3sXpbiB5cXF8+eSR
5tFRjt2bytOkC407UHTI3y329qCiG7C+t7MwGK1XUt6+G82PpapiGToYdSB5
oXoAe/sZxvfQkoNsw16ssGnx7OcvIl/8FPnyeaRtcFRvsYskwgJEThEyl0ZE
M0kYYO+1DRZEDwAJWAIejUGjou6HwTFZHDZHcOerb+5/+4jFFWGIVFQRBoPM
B/wUQjaPRsYWIgqysxE5ufm5SHQRAWwwP5+AQjNSUtEH09CHM4lCZTG47rnP
HsbmMONy+PkUG1EYyCWaErK5+9NIOxLy3tyd/Nu39vzT7977x9+897s3Yt7c
k/7bven7EJxdWcLf7sG9nUixVA5c+ebhzOWLExfOzV3/KIWlK1CXp4nL4nnu
ZCgdcgeEL7AXLbxcCxAI4buLon4XJ4XXI7gfVI8ohKrAIYFzB1b2ZgFvO0EJ
1WwP3bifBUltpfGINA6OJyLr9HyvR1kR1FWHlDVBeYVXUOHlhVwsj4nk0GIt
aoxOWiDnZSl4aUp+ulqQrRblwFiog6YsR8P4Z9ZSm2sdgJ/LKvLYo/j53dpS
n2F8pLWvuwqALLaKwj5V0CUMOYUlJkZjUNUUUrdVmXubPNFT4vbQYE8F+OTk
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
kKT5BAVb7idyrYUUFYomxzAUOLqsiChEoNlIDB9PEmchyBiSKCufhSVr9bb6
m/een/34zsbnd0598WW+zJDCtWTKQ3Fsd5LQC7GbKLHG8c3xr+9yib7PS9dt
sQeTMOAH498hkQvyN01c/C5K9Mds5j6q7mf8IHkBvzSeJFsoy+IJkRIRXiHJ
IKFS0Wl0MZ7FLxSLkTp1kcuKD7op5cWksAsXtGPtCpRBhFwYKjdJijSCAo0I
KeMjNFK03chUSYm+YmVne0VLU1lNjb+pqaK+vqy9ubypxtdYXdzVXAqcdLeW
tNTYGioN7Q32jiZnXYURJsaqMgMEd5lfVxky+ZzKkFdXX2HvaCxpqyuuCxqq
/dro+27lxp5ae1+DvbfW2ldnG252DzW5uursve2lPe2h3o4yILy/p3p4oHF+
pnd9baqvuwbU21XZ3RXu7gx1dwd7egK93YGxkdqxkfqx0caJ8daZqe75uZ6V
xb5jywObx8evnF28duXk2vqRjpERhsaMUzmyhYb3EMTtBf/OHqzb8/Hv5mCg
+To7JzJFpv1kyV6yfCdZAS//3XTjeyTNDrI2eu5KUaTyjUDvqVv3v34Vuf3w
hy8efGNx2B0OW8bhZAoOB01BSGewCHg+A9ouik4u4jAJPDaFySTSGSQWl0Yk
4whUYmd/70+RSF17WxYwR6EhCXgEGpWLzMvOzcrJzizIzcIi8ojIAlIhkkUg
8mnwrSQ2k0UgETEkAl3Eu/LxzSc/vbIXlxSgidlIPJbMJ7NlMp2byJaDCCwZ
niklcRRUvhpEZCkBRRxNjKdLiHQ5haXwhZrufffy2u1vP/z+1fSFzw5zDGkC
d4rAC0rmuxM5psMiRxLPlsi1xjAMIKj80fNPojKZZ4e6kSUvSeE7kPryBJb5
9xk0yN+dBOVuin4f3QQ1LZZtgzWTL8kWSTI4vDyhECuXZNEIqbg8kpgs1rPl
GqpSiVXKEHJRuoSdIKLu4xH2yJnpUmbOaGepVoiScfKkvHzoHWop2mZkK2RE
T7GivTXc0BisrPTW1ITCYU9dhaey1FoZMIOhdTT72xq9DdW2ukpLRdhQV2Or
LDeDmhu8rU0lTfW+9pbgONhU9CivBTTcVdlS46oLmmAIbKu0d9Y6uqrtwGF7
ham31t5f74Qr4HsdUYU628q62iuG+huWFwbBxAZ6Ab+KHgC+M0rd0GDZ+FjF
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
xcPby83d2cbK/JaR6c3rdpZmro52DnaW5neNbC3uWpsZWxkbWRhdM79xxfTa
N2ZXvgb87l7/HeBneucK4Id0tA4JDqBQ8Vw+q6y6vL65sW94bHZ1fXl3f2l3
f2X/ePXo8dLBk7l9QPHp6vm7w3e/f/zD3w4+/LLy7NPk8dv2xaO89glKfmMC
ryicrAhEi7yzLm4ZoA0nT3ypasOhBUqBJ8Gw6+LPKIHY4oLPtcuQWiaLrFLE
DigVRGPIp4bduQyBS6YQ5PzrapixnMJxSAMbFAB1IGj8QBByv+D3qwz4XU5s
/oKfw8XNHcAPKq9tFNkqlgqtI/yXfMHPMYF4cUo8GZKvUwzhEj/7JO4X/C4J
jI71Cgt3DrxnGxhoHRRodz8IERbsHBXuHvvQ29/NMsjNJibYk41Nnelr++Pr
J5/PDz6fbP5wuPJ+a/LlfNfziYYnI1XHPfnbbZclmFQry1Qy4hnYKCIuhsnG
ipVsjoBEZqLR+MSkzMjE1IcpGY9QuDg8OVkgoYpkDImcI1MKctSK/MLcnFyF
RCoQi9lghlwukcXGMumZdFoqnZJEoyRI+GiZEK1WkquKRQ1VyvoKRW2JtKZY
NqKvbSrLrlaLGssUHXWF7bXqlqqcxgpFU6WypkgIupiPKq8rFtaViVvq8zpb
KjrbIHfU9unrR3p00P4Ndzd2t9WM9rX2djYO9LYP9HfzBHy/oHt+QcHePn5+
Hh6eDggna0vwOmDPw9XR3cXB1RlhYXobIDQ3vmF++5r5rasWN69a3roGMr31
zd3b35oYfePhau/ugvD3d6czSCC+kCORiQuKNdqWpma9vqmjo71vYGhqdmJx
beP4ye7jl+MrOy0DE+0j0CUerJ6/Ofv8l/PPfz378b+cfP7r9ts/TR2+aZnd
K+9fIhQ1Z2TXR/M098gKX6zIDycNIinv03M90RLDXEGQYfvOcDoLMrUvUeWW
KXJPF7imwj86xyGJfXHsk2mbQIe2zUBaOt/pYvvl4nteBBfzqTj/M/wMQomB
wEv8DJP6ktlO8GpRZEi+ELQNbwS8Ycoc4IeIxRkObDxKQUSkO0bjv+BnyL/J
nC8Ehoa43L/nFBKMfBjm/iDENdjfIcTf4WEQMsTLPtTbgZwWnS+iQwc4093y
7mDz7f7Gp7P9z2e7n/aX3q4Ov5ptfT5ee9ZftKdX7rTLZ+q4+kJKmTRDQIkl
oCNw+AQaCy1XMQUSMp2VhSXFo7DRKHwMjpxApKYyOFiBhCbN5stzxYpcuSJX
KVPIhWIBh8/g8el8AYMvpPEEZC6fyOXhIC9TaakMZoZUQirRSHXaoraWSqCo
t7MBsOlsrq6vyK8tz9VWFtRXqhtri7paK5vqCrVVObrq3KZatbYyu6JIXFEk
rK/MboBg0lAK7tfRVNHbUTPcq4NC3NlSNdjVCNFjeKAT8GOzmd6+Pl7evq6u
rg6W5j5I+3veHvd93e/7e94L8HR3c7KxNjO9a3TX5NbdOzdAprdvmBvdML95
HTi8dfUrY6MrpsbXL5/m6GDD5tA0xerSsqKSsqKKqvKK2kqAUJ6tyslXl1fX
aJvbGtv0Te2dLd19/eNTk0vrQ9MLTT1DBTW66rbe7smlhb3z3ZcfT97//vTD
H44+/PH5L//PwY//Zf7Zp87VY033JLusJVNaHMNWheCFflksjxSKazLVO53p
ncn2SGO6JFEDcDJ/rNQXDBMl9MgQXt6LccsyDD93yeS5ZP5jvdhm4V2Gjv/Y
+4Euv63jP+LnGM+wiSR9wc8Vp4Bs4oUX2UShAT9EROrlvh/g55DIRSRyLvH7
QqCPh52Xm02gt0NYkFtYgOs9b/swP+e4UG8+Mb2lNHeyQ7sx1vN0bf5gZvRg
cviH84NPjw9/fHL049k2NIHvVwfezbU8Hy0/7VWv64Qz1ez+UnpjPjFflEkn
xmDQERh8LF+AY/OymOx0KiOFxkxlcjI4fAxPjKcyMwE/ea5QniOVKKUShVyi
UIpkUq6Ix5dwxTK+QMYRiBlcIRn8kyskCaU0JhdHpmZS6SiegJqrltTVl3f3
tIMGBrth7exq7uxq1emqampK2pprdPVlOsMudHFDbZG2phBkOKVQp4ELWHU1
hQBqi1bT31k31NMIZgjWN9TXNj7S39/TQadRPD3dgT0rS3NXhM09L9dQP08v
VwcXJxtXV4S9g7Wxyc27pkZ3jG8Y3b525/Z1U+ObZndu3r1x9eaV3xnfuXHj
5re3ja45Otna2VrY2lnExkWw2NTsHLmmOL+6pry0XCMUcdMzU6KjIyOjIx5F
RpCplKJiTZ22vrZB19Dc0g4cjoxvH5+t7OxPzK92Do03dw+09I30T8yPLm1M
bB4sHD/defXh7NMfnv7057PPvxx899Pm64+d81sVvePC8kaUND+eIX1E4N5H
0fzSqG6JVJdEJsg1he2exoXy7YeR+ONlBhrRBrmhBK5ZfKThi5k4gN+l4wF1
LmhIwUCd8L/HXoz4n/GzS+Yiklj2sTTAzyaeDi0BJF8XrOGcA+BnFZEFvZ9j
dMYlfhA9ADxwP4DwEr9LAqPCguB97e/mcM8L+SjIMyv2gYpDbitXz3Y3PV2b
fbk+/2xl5sPu2rOFyeOxge+217472vv+8fGPj/d/PFr+vDn2/XLnu6n6Z8PF
6zrBVCW9r5jcrqGWK/FCZjKFFEemJlLICWRqAp2WxGClcniZPBFaKMGLZWQK
I4PNJ/KlbJ6YyxEJBDIZ5E1pdrZIIRMpRUKZgC1i0TgkEgMDgvJNpGeRmVg6
l8wRMdgCJoNLg5TClwrzNIU1zbqWzo6ugZ7hyfHWzrbiipKKqlKwmpLywsKi
3Dy1vLRUrdVW1NWVlWqyaw32WNBQra4pUwGEXa3VwF5rQ2lHS22PXtfZ3lRd
UZyakuTm5uLj4+Ngbxfq7/MgwDPA3RFhbWxmcsPc3MjSytjUwsjEzMjI+PpN
o2smd41srM3tbSwtTY2Nb103tzD59urvbhlds7a1cHF1dHJGuHsgMzJTmCyq
SMwTibkYbMa9IF9Lq7s3rn/79Te/gb9uYnIHgbB98CCUSCRKpVJ1QT7QKJUp
CopLdC2tEJwHRkbHpueW1ja3D46nVlbHFhYHp2f6p6dHFhZmtrYNM4JfvTp7
//H0+0/H7z9tv3gzsX3YNDJVoGsXlDQkcgqimPnhlOwgvNQni++exnZNYRoG
AqP4Hmi+J0YAK8gNzXNFcV2yOF/Ac8OKfpXkcs/5n/GzT+Ve4oeIoVpHEG0T
GC4YGeCHNNxuNuBn+SjTITrLOTYLki/gh0xiXm68AH7QA3wh0NfFNcw/AJea
kicRNZRpurRV0z1tB/PjL7dXHq9Mfzra+vl07+36wk8HW//++PTF4tzLna13
J/tggz8drf+wM/VpbeDtbOOLsYonQyUrzZLBMlpbgWF2roQZx6ZE81hJXHYy
j5Mi4KUJ+ekCQSaPl85hpwOKZEoyjZlJY6DJNCyNSeKKOOCBsmy5SC4Uyvhc
ERtII9KxeGoW4Afh5QJCLJVNpLEpJDqBQMXT2FSeREBk0YU5Cpk6J7+8RKdv
q2vSFZQWl9VUNbe3NbToSipLcwtzKqvL2jubtY01ObkAuLBEo6goywFpa6CI
V7XoyivLc1saq1qbqquqNCIhJyz0noenS1RURGhIUFigd7CPq7+Ho7uznb2t
mYW5sanZbVOLOyamt43u3ABZWZu5uTp5ebq6OTshrK1u37j67Te/MTO9Y3r3
trWNub2Djb+/b3FxUU9PV0tLk1Qqhtc0unXt69/9262bVy6eZnzr5vWbN64B
hOamZvALgUB4eHlKZNJCTVFtg1bb1FhRU60pKy2trKrS1nX29/aNj0wvzs9v
rILG5me6RoZbenuGZ2dmNze3z88PX7zYe/5i99nzw1evj959Xn32aeLoXdv8
QaF+kl3SnCYqjKBI7mE5fpl0KNYgfxT7Uj4ow1QudxCG74EVeGLFv8rwNW0G
/C42/ZBZEogzEJxtk/lQTG2jKdYReMDPFS3zIBgmHAKf3jiJ1cNMxxgUMg7j
GIUG/CAgO6eJHZIFwJ5TIgvknMQGFavL2xo7RnpH+ju7+9s7ZoYGdpdmTjcW
3hxsQLP3/cHWj8d7fzo7+suT07+cn/5yfnK2uPBsY+X93sYPB+s/HS7/sDPx
al5/MlT1ZKJmrSN3qILRrMZWK9M1kmQVO5pPCZfyksT85EtJQIIUqTBdKszM
kRNVCrJSQZHKKGIJhS8gsHlYBgsDcRgiCV9MBUF1huJLY2Hw5DQiNYNMQ1Po
GAIZhcGno3FpcEFjEgg0DIRrsUqkzFcWV5ZCY1/b2KCpqCgqLwe/g+v65oa6
5rqK+oqcomyuhKNSK8VSAU/I4ovYYglPIuepssXqAllpeV5XT1NFVUEWKjk6
5kFKamxkVKinp1OQr7uvh7Oro429rQX0ctZWZpZWphaWd4EWM7O7xsa37941
BpMEWVqY2ZjfdbE1u/6bf7n97b/ZmZkAitZWFjY2NgWFmpHRyfaOzti4BCsr
q7vGJte//cbo+pUrv/vq2pXrt24am5tZf3vlxtWr1+/dDyHTGTJV9l0rKxcv
L4ZQUN3UWN/RUtmkLdXWNPd21rQ0V+gaigHI6qqKBm1rb8/I7Mz8xvrsmmGO
/+rBztbp4d6T0/2nZ7DuPH68cfZk6/zF3rM3h6/fH735uPn0zczuydDyVmVH
n7KqgSBWxeBpYenY0DRMeCY+HEMLxgkCCWJQAA5qtEF+RLkvUelFNJx1ccXK
nTKlDumGiSK2qSK7FIFVJN46CgedJISdyzvOHiiJSyrbPhLrHIN1ikTZhmfa
RhCQyVyndBkiWYRM5rgmsb5opG9qqGdisGtorH9sY37p8d7u+c7G3uL028Ot
90fbn8/2//j05M/Pzv/y5OxPJ0c/HR48Xlg4np48n5t6t7X889E6dIAvFnvO
J5vWOzWL7bkL7arZNkV3FbNUmqSghgtJoRTcfRrxAZsWKWDHyfjJKnFGtiwr
W4qW8jMUIlS2jJCbTcnLoeZk01RKikxBYnNQDHYmk4Pmi4gyJUOVy1GoOFI5
k0RJh8aPRMnA4pOz0PEgHCGNQsvCEVIoDBSHTxEr+VBwda2N9Y06wK+spqaw
rExdXJRfrimuLS2sKpIXKPgyvlKdna3OKygpLK+pgBSg1uSJ5AKOkCWUsIvL
1JrSPL6ISaSg0zITQsMC3Nzsvdwd3ZxsHewsba1MbSxMAT8ba0tra0sTExMA
ycLCzNLSHNiztbECH7MyvePnZO2NMLOH5vD6N6a3b1pZWF6/ZsThCscm58qr
6gMCg42N7xrfvvPtV7+9dRUIvHb96i03V+/ffnXlltFdFpt/cvrk/acfT54+
jU1ONrIwv2lm6h7kV9FYrx/urWtvBgK1HdAidDV39TZ39eg6OuvbWqsbm6sa
deXaeljB//WDfUPTE9Mri0vbG6t721vHR5tHhxuHB+sH++uHR9unZwdPnx2/
enX+9rvT12/3nr9aOTodnF+qbO3g5agz2UJoGoPxvCA0F/zQL4sDEcYzk234
7hLILIazMTIvnIExhzSBVQLHLJqMiCMBfohEGjIDErTY8L0SaIlDHNXuIQoZ
jfFIILolkJ3j6Y4JHJsEvmUsBzj8Z/zmxhbnJxZWppZ2FtdPt3eeH+6/PNh9
vrvx3fHOd4fbHw53Ph3u/nh0CPphf+/Tzt7LtbWDibG90cHny3M/7q9/3lt4
tzbyeqVvu79qXCvXa2j6EnpbKb0yG6VixvAIDyjYECoxnE2LErDjxeCE3BSQ
iJPMYySKOKkKCVqdTSpS0wrUjPw8em4OvaCIl6tmKZT0C1ckCYR4NgdDo2dA
/uXyCCw2lkLNwOGTMNgEPD4FmMQRkgmkNCCTzSOr81W19VU1ddUQLUHK3BxF
TnZukVpdos4uVIHyS9XZ+fBQDvRXFVWVWl2DVldfp62t01bnqVWFRXklpYX5
BTmQfGNiory8PJDO9khHW0dbSxtzE8M2i8ltKJfmZmBWxmamJkCdowMCYWeD
sLOCR0yMbgB+rjZmYd5IT0dba5Pbjna2UEzB1gRiRe/AOF8kt0M4Xbt249aN
m9/89jeAnwV0izeNr9+4A1Io8w4OTz98/8PJ4yeLq2ujk1OWCNsbxreNrc0e
JUQLVKK+8aHCyrIKra66saWhpVPXqgc1tLRr2/QN7XqAsLKhsaxOW1xdq6mp
La6tK9M2lDfoOodHRubml3Z2t05Ogb2No+PVg6NLLR0cLh+erJ2c7zx7efTm
u7P3n8++/3nx9HXv6mFZ9zi3rAElKYihS0NxvAAU8z6WH4DmeKazIE07A2xJ
dLA4t3Q2IhbvEE8EON3RhiNYHhipZ6bINhKHjMK5RKFco9GuMQSnGBIilm6f
InZFqQw3Pn7ddQEtjc9vL6ydb++/ODx+sb//dGf71cHu96eH7w62Xm6uPF2a
O5+ffbow/3Jl9f3G1vvtnddr62dzM/ujI4cTw88Wxt+tz3zYmnm/Nf5+a/R8
vmOlp3y0UdWnVeirxRUqgpgeB+Cx6YavO78UFx6hxrAo0Vx6goAFFTldLkYp
pRiVDAurTIIFD5TKiWIRVijGikU4kQQvEmJ5ArRcZijTUgmJy8MwaBlEUjIR
n4gnJFJp6VRaJjBJo6GEQiYQWKRR5+Vn84U8oViQnavQlBflFmYL5Vx5rris
RlNcqlFmK4TwSyxSKBS56jyNRlNeXt7a2lpTU1NaWqpSqdBobHBwqI+Pn7+v
n4eLk4uDLcLKzNrM2OLuHRBEDIDQ1hJaPqSHCxIgBPru3r555+Y1oNTO9LYP
0j7Q083N2QFha/e7333zb19dwREZBZrK5DSUmbnNN99cuXbl6vVvvjK5fsXK
1NjC3OZ3X18TS5Q//PjHw6MzhTIXim8GGpVXWHDN6LqJxV1LO4trRlcDQ/wr
68rrm7RNbfrmtp6W9l5da5e2sa2+CVrcjkZ9d0t3X1NnT0N7Z11Le01zR01L
W11rp7ajU5ZfoNIUF1RWVegaG7u6eycnZ9Y31w6Pd54+g/5w/8Xrg5dv9l++
AQLXz54tnTzee/Vh9+X77ZffbT5/t3j6cnB1r35otqi1HyPJT+EpI0n8oEya
dyLRIwHvlUT0TKaYBScCgRClA8k5bigxCFBERONcYrCO4Wn2YSlOj7Ico3CQ
jm3jOY5p0otPAoqcUv+xPt3afb6z/2bv4O3+4Zv9/Ve729DaPVlZBAF4UGcP
JydPp2eeLiy/WF57tbpxPjsHNB5PTqz2dKx2tZxODb7bmP2wM/tpf+6X51vv
D2YnO0pq81hlSkqeCMOnxDPJMQxKDJ0cDWJSY9n0eC4zkc9O5jOTwACBxksB
mQJWIgDJZiayDGsyh5Mq4GWIxWipGCcFCPkYoFEqwsPK56AZ9DQKMZGAj+Ow
s7hsDIuRRSWn06lZfD5VpRLlq1UCPkso4uSplZU1xSXl+WIZGwq0RMZWqqRC
EZfHZUskotwclVqtzs8DFTQ2NFWWVxUXlQn5kvjYpNDg8EcPosPDIvy9vbzc
kC6OCAdbKwcbywtZQB+ItLfx8XD1dkM62kHGNQXrg9gLTDpYmjkjbAJ9fVyc
kZYWtrdNLIzNbe2Rnmkogn9QqKUVAhq8q1//zvjmNYtbN6yMwU6tUtKxj5+8
HBwaJ5HpHp6+nl4+ptAL2tqYmBp/c+UrM0tjRyfbgEDPkFB/dX52cUlZdU1D
cwtU2d4OfW9zW1dTa3dTew/Q2NjW3dDWrYNrfX9jZ19j92BTz0D32ERLf391
a2uJVltYXZtfWa2uqMqpqIRqq+sd6J6anVjfWjo82zh/vvH05fbTFzvnT3af
PDl8/vLszbtzSNPvPuw+fwN/uv741eLJ05H1vcaR6ezaFqwk5yGG4pWA8kwh
IRPJHukcL4z0ctiaZwbXPgrjGY93j0F5xaD9UyiBULtTuU6JbCDQIVVinyb5
sr7d2/90evb90eH50uL22Oj22PDe5Nj++Ojh5PjJzBR0elBt325sv1nferG0
/mRuGVB8sbz0ZGFmva9rrrlhvaftydzo2625H082Hi+NNGukmJjAuHtIBjo6
V0hUCQk8eiqblsggJ9CIMSCAkEWL4zASOLR4FiWWQYqkEx6BOKQoPjWWz4gX
cpP5vGQBJ4nDToCnMWhxAC2NEidgpwGNMiFaLiUoxHixECNgZ7AZaQJ2JtAo
YKFY9Ew6OYPNBBflFKplZcU5arW0sFBRV1fS1FRVXKri88lEYhqbTaZS8CCh
gJ2XqyzWFJZoiks0pZrC4vy8opKiColQERuVGHr/4cOwGH/fIG9PL7A4Z/t/
4OdkZ+1kZ+WMsHZzQvh6uHggHeEReBx8zPTOLbBBKzNTextrX28fpIvbo6h4
oSxHIFd7+If63Htobe9ibed0+7bxtW++Nje6YWl00/KOkbub98z82unZMy/v
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
xcoEBJWEli1lykR0sYDI5WRKxDiZlMzj4yGMKJVCiJPqgnx1vqaotELX0p6a
hTGxtEQgkQik0/1HkVi6MC6DbO8W6OUXau/gYo9wNoe+zOjWfT+/AC8vHzc3
f28fPx9/WxsHo9umpmbWX31zPSo+OQtLI3Oki9tQp96MLh+snn63dPRGP7bc
1j9Z06gHr/v2yo07d0wsLKwQ9s4Po2Ih8Hr7BASHhAN+zkhXKNBQgm1tbZ0d
nZDOjjbWljYW5g62Ngg7SxOTq47O5sHBnrGxIekZUQAhiZxGICahMfE4YiKb
h80rEFTXqZtay/Td1X1DLT1D+uGp4ZllyDfzsyuzo/PjQGP/xPDE4kzvBPxZ
f9/k6PDclAHFudnJ1dW5nd3x1Y2eqdmm/qG6zp7azh5td5+ubxCYbh4c6Rib
1o/PNA2MVrR2ZlfUCgrKqLml91E031RKGFEcghc+JIliadJHKCpNmtM7MdM7
OtE/MTu+sjO8srdy/mH57P3Ws/f7L9+fvfvxycffP/v4x+3hjscLY6/XF16s
zL9YWXi7sf5+e+fd5tbHvUMQgPeHx48/Hx39dHr889nJ+93Nx/MTw9rSOhW/
TMIWYlMTAr3iA70YafGlEt5yv/794can443vdpaeL44dT/aAzheG1gaae2ry
K5RMFRcDeIh5KMCPz00HGbZWeJliboaEkyFlpYOAMZCAlcpnplxKwARDy4Bw
AT0eNHjQRuZIqaBsCQWUK6HmiClAoFKAl/MxgDewJ7u4AM6h+GZL6blyNkgl
YyskDOj6ZHK6RErncEhMBpnH48jkSrlKrcguFMvzGRypX/BDaycXAotdpm1o
7O4fWdqv7RgPjEhz8Qm9Y2pnCfnDwvrOzVuerm5+Xt5uzkAHEhpFVzdvW3tX
B2dPb797OCLN1SvABunT3DO29fj96OrJ/qufR1aOH3/8990n79///m8b++fR
CSngk7Z2jo4u7oHBYS6unmCDIDNzawASLtzcveHa1s4e2gBnZxdHR2dYra2t
nZzt7B0snZG2AUHucXEPMjJiMjNjU9MiUOi49IwIEA4bQyYl0mmpHHaWQEhU
F8iqaku6+9rGZ4fnVqYW12dXt5bX99ZAozOjvSO9QzMjI3NjYI/dI/1QnZv6
B7omZ6Y291ZPzldPnkxv7fZMLzQNDDf1jUBzWN/V29A70DY81jE60To02tA/
hpXkhOGY99HMMJIwEMUJyKCHZtJCU7BpJEZJnba9u296eXXj8PHk+sHI2lHP
3NbA7OrowtrU6vbC9uHa4fnJ3PC73aWfzvZ+ONn7dLj7+ejg7dbW+fz8u63d
77b3fjo9Bd/7dLj/48nBD8f7L9YW1gbaOkqUhRw8H52YFuoX6mqb+SioSEhv
LFBtjHS/313+uLf4cWfh3drEs+mexxOdT2b6tgaahuuLanPYuTy0iAX1N8uA
Hy8LJBSgxUKMXIBV/CoDPEKsXATZFq8QE+QiPGQWqQCrFJNVwJvUMLsyV84E
5cgYORJ6johmYE9EUgjxYIzwUiAAD6SUEODJEECUUiawl6cSFqllcgkbHC9b
JVMoFIaTXtJcubxIpigWSTUkhiIqAevqG+4R8FBRWPnku88f//LfHn/62+Hb
Pxc19InV1QnpBGs75I3rt41vm5jdMXVGODnZObq7euHx9MqaZnVRDZhewL0w
UwvwQlcUmVOh65zePNt98ePeq9/P7b+a2Hi8+eTjyesf//Rf/75+cB4Zm+bq
5eflF+ju4WVj6+DkbPhYk7WNvZOrx0XDGWJrj3T38n/wKMbHP8TOwc3K1tnE
zPq60S1rWysfP++HEWFx8VHxCVEJCRGJiY8oxEwMKj49NSIz7VFWekRW+kNM
+iMcOpZKzWKyCXwhTSLn5OZLq2o1lyhOLYwNTwxOzU/sHG8fPTlc3VmdXJgc
m5+a29oaWlgEwOq7uht6+rsmJifXt1aOjrfPns5u7wzPLXRPTvWMT7YNDFW3
tOVV16XQBQ9wzGC0gUBgLwzHQQlyufml5bqW+tb2iprayvr6+pbOhu7hvvnN
ya2TtYMna/snq3vHK7tHS9sHL7fm3x2ugmu92V17vb323f7O292dl2trgN/7
nf0L/E4By09HO2+2VrZHetqLFY1qYQ4TjY4MiPZzzngYKCFllsu5rcU5B1P9
Px2vfd5b+H594s1C78tp/Zu57sfj+u2+xnFtUWM+vwjCKTfL4EtinAA6QCFa
JMRKLjCDMqoCwMREqJWA3CVpOTIomlRo2xQiCvCWp+Coldx8FQ8EF7kyTo6M
pRLRlXyynA/4EcEboSIDt5cAZ8vIOUqGSs6AsquQsNXZouLC7JxseV5eXr5a
k5dXolQW8wRqMkWBxkpiEhgBIZmR8RSkd6SDx4NkHGdq7ejkuz+effyvR9//
15ndV5tnHzaPX6Fw9K+/vvntN9dtrKA4u7i5eAbfDy+vavz889/2Tl5jyNz/
/Jtv/uX/+FdLO2fAT15QObVxevjmDwuHb4Dhuf03W08/n3z3y4c//TcgsK1v
HOHiBfhZWtkYm5gDfv4B9/3873n5Bvn43/fwDrK2dzE8Fhrl7Hnv5l27W6YI
WwcPC1unlAwU9AlV1bUisRSDwaBRmWQSLjUpNin2UXL8Q0xaDAWXzCCksIlp
HEoGAZcEBRqHS8bgErH4ZDI1k8sniWXs/CIFqLqutHe4c351enV7cXNvfe90
b3V/b2lvb25zGwrx0Nxcz8REx+BQa19/c08vqHN4ZGJpcc1w+/hgZnWld2KK
k1+KVxUnchRheK7B+rBMrDhPValt0He19/QMjQyPT88MTc22D47X6gfLmrrK
tO01rfqWnuG+ydmJxY3vjtbeHq2+2F48/f+oeuvgttI13bfun7dunaozdebM
1DlzZjZ176AZZdmWmTmOmUHMzMzMlkWWZGYIx3bIdhyGDnSS7nSoO51m3r2b
tu+77D37zlU9/eXzsiS7rZ+e932W1vrWuVO3Vk/cu7D23vblVzdvP792A/Tm
zp03d269uLb5/tb6teWZObfRLaVb+DhGV21TYVprKVqAa7dJGA4JEyryg/Xl
z+9c+vja2Q83ll6sT753IvL+yej95fD2pO/4sD5i4NmkZBUfcSdwPwCPLxwU
CPFiEUEqIiLmJiCDiUn5RIkQtpBlYopcQgV4lFImSAPIKXk6FX9PGgVXJeMC
gXI+BdgDwWMR3qQkpYQAvqeQAXsUwA/cTyZhyCVstUKoVyt0GqNcauBxlDSq
FDsgbGlhllfgc/N7cvJ6cwr6XP5T5UeoeZW9FKFldOnC7NqNc+98unLlmX/u
gj2y9OCDLwx2/+GEzP374uIPJyXGpyDRIQvDF2uevPhsbfM2cPLP//p/oH97
e3/C//7DgTRMeXDm1LUnn4D7LV66d+LK46WLd6EEP/3sr88++/HCtftJmXlg
cG+/ve/goTjwwJzcAugAM7IwqNyiDHQRfDevtB4wxtNFBRVH3zqM2p+Y09FH
9Yenr958dGZtS6ezDfQTersH8FgCYXCgr7Otp+XoYEczqaeN3NdK7W2lDrRR
iV00SheT3s9g9kFOIZI6B7Etvf1Ne8dvEMm9dBZeruJ7fJbpudHjZ1bWti6d
3dw4u7m1urW5vn0ZaNy6dfPKXfCrq2cunV84dXxyaX5qYW56cR40sbS8/eTF
+qNXs9v3ho6dN04cVwanTSMzgblj44vLYzMzSyvLx05Ao3nq2NrFlfPbS+e2
ofjOnTk/e+Lc+Mrp2NyJx1fXnt649Pz29rNb248vX7p3/tzDSxffv3L1xY3r
z69fe33r2oc3t59snnlnbfFMzA3suZRMVn9jfX5yRVZcb32RjNYH+DmlrM2F
6Ivts1/cufTp9TNf3TjzxZUTL8+Mv7scvL8Y3J5wnRhWjxq5TjlZC1mV1yfg
9YlFOKEYJxITQRIRWSIkAXggCKcADEKdjK4Cu1NyDRqBSScC5PRqwa5EBqUQ
rEwr46klHDmPKuOQZRwS0AulViunK2VUuYSs07I1KrZCwVMoBEqlXKlWyRUq
mUwnltiIZFVTM6u8gpBfSEDnDKShupPT21GY7pqjjCcf/dJJlLTjJLOnbh67
9K5/ZoOtG9eH1qS2+ao2zsqZe2bHZGpa+Z/fhtSbGnc4NSMzJzEN1dqDXb9y
Y2n14oFkVGJKJjo7v7CsJhNT+s//sZ+lMG/ce7758MMrjz+ZP3fr+NaDjXsv
P/1x57Mfdwyukaz8yoSU9EOH45H4kltwOC75rX3xB+LS03NKS6tba5p66XzN
ytqVO09em31jqbkV//Rv+6oau5UG18TMCSj3JBKrq7MfN0hkUmk0EnGwp7Or
6UhfayOxt41N7JWwiEohjcPsZzH6mPReNrOfzRnk8nBcHoHDxfMFJC6fSKP1
gyX2D7ZQaH08ARkKtMludPrc4bHI7PL8ybXTqxfXz22cB128fGnr2uUrN7cv
X9+6sHX+zLnTp86cXFk9DakkdnJ9Yn1r8fKts3feW7396PT1dzbeeffE+YuL
J06cPLu6DMV66djK6qXlc5cX16Gyb82d3Zg5fXH61IXZM5de37/29PrFR1vn
Hl++8Hjz4qMNKMGXP7x969Wt60+2Lry6sfn82vrW0shSQBsyMCSUpsGOypK8
1KzkffXluYyBdhkDa5UywkbZ/bWl55fPfHLj3GfX1z7bPvVm49gHZ6bfmfff
mfNujRpP+uRTdr5fSzWKBuT8fqSvExMUcrJKzQQpFQAbNGlUtYKuVjBVu9Kq
OUYd32IU2Y1Sm0FiAgg1AqOab1ILLWoRjAY5TyflafkcRAKWRsRUixngkwoZ
UyZjyRUCsVQgV2vkOgtPZqQL9ANkWW0rs6iamltKT8uhJqRTEtPpadksVD4z
qwiflt/KUVnD8ysQ62ZOb9x4/PnZrRcDTA+mXlDcosqvlRZUi7r7nSSyr6lJ
nJPdnpd7JCkFk5aVm5GHoYl4Vx7fWzi3WtvZeaStp7SysbkLD65V29qH50jh
j/zOqy/OXLt/4c7Tk5fvXX/8+uknP334xd909uiBBPQfwChTklE5uXmFZW/v
T/rzwfTf/ym1orYPR1UIFG5fdOXGo9cbt5+6Y7P20MT//S//sS8xIz2nkC9R
0Nk8BotJJhOpFAKXRWYz8CI+/CJkKrEb29dMxLdzWFiRgMxlD/K5OAhcYiEJ
WeqEg4UtILmUxhfAl3ihiCKVMQRCMpM1SKH2UGgDRAoiKgPPEzLUOqnHZ4uN
BxeWZ9YvnLlx+8qdezdu3rl67eblq9e2Nq5cWt28eGZrY3F1dWR+fmR+YfrU
aegPoSgDfuvbVzdu3r508+7ZretL6wh1CHirW7Nrl+fWt+fPXVk4f/W97QsP
Lq0+vLgGsL2/vQl6dm37ozs337t88cnl8+9ePAm5ddwusUuxMlIDtrmgrDg9
Le1QSWEWg9KnFjGlDLxNyl4Ju949f+Ll5dVPr53/ZHv1zebJV+eXHx+buD3j
uzFlvxRRnxiSzNh5IR3NKsWp92LFLn5qFQPwQ0YlXaNkaFVMvZan03BBRr1g
79pGTrPcYZLtQWjTiRFpJUCgUcHXSzlKDk3Fpat5DDX8rURQpllKGVcmF9oc
VqFMSeXIcHRZ64Cwto1bUE2Jy+qMQ/UfzsTHZ7JSsiWZ+WpUgSoNw05A96YX
t6xsXvngmy9uv3z+5JOvn33+myN4NquEeiALm1zETsljp+aySisUNXWq0mI2
JqfvwIH87Nzq0qoGtdVy8/13X373BUMtTy0qKqw6WlzZ2txN7CNze4hsrso8
fmxt4+6Tu8/eXL7/7PTlu3c++Oz9j75/9OJbmXb47UOohNSMA3GHE1Mzisuq
0bmQOOqTUkvLqnv7CTJf5MTWzeenNu7pXNGssnq6TFtQe/R//Pvv0nPzSDQ6
nc3i87lCEUfABYsjCPlkeN+B+FwCFFlgCcyNLySLJTQgDXlLSqhCPgnAYzEG
wAzFQsouhzgoPUo5SyGjS0RUgFAsZfCFFCYbB35IIPXgid1kaj8D6j+DIJFy
TWa1d8g2Nj5y6vTK5e2LwOHWtc1bD27dfnB38+aVc9ubF65eXr+8dfzc+aWz
q/Onz86ePDt9cm329Lml85dPb99av34f0sfK5q3li7fmz1+dXb1yb/XU3bVT
jy6sfXD50ourW8+2N55e2Xh2ffPO2ok7a8fWpkIjZolFSOJhGzsrM8qzD2dl
xBeX5OHxPUad3KKVwosetmi2lqeeb629vnb+8xsXP72y9vrS8edn599dit6a
9G5HjecCsuNu0ZxTEDNznEqSVrS7y05MkMso4HJQIrW7Mqg4Bi3PbBSZDEIQ
TGxmicMqAwKRiUliN4qterFFJ7JqRWa1wKDg6iQsgxiRUcI2yrnIFhVfqxKr
1DIotT2DpKqGnrIabEEZHl1MyMwnA3voUkZSNvHPCdg/HsTvS6AnoXjoYn5e
Nb0dL/r4L799v7Pz6rvvPvtp5/Hrn/qp1hQMbh+qN7GQmpxHS8wmozCM/CJG
TTWnp1eenlGVg6mqP9q1trn99S87t99/mVvb9O+H0g8lF6DzjpRUd9a14rtw
XLrY6IzMnti4deHue2euPjx9+d47z794/PIbIFBnjfxxf3pqRnZySlphUVlp
Re3BuPS4pOyMrPK2HrrWMnLm0r17738Rmj7Flpv/n3/9U1Ju6b7kzMPpmfWt
7e3dPeB6u3uN+IAfldQH+EGLq0AWdGKIRDSxmC6S0AUiKouFVFuBgCISU4VC
BDAY9+ZsDo7JxMJ3+XwyjHBPkErDBylUXAmQLETON9wTjY4QCCOVhmOxqVKZ
QKdXGsyaoaBnemHy9PqptY21C5cvbd+5eevd+zfffbh56/b6lWsnL24cO3fp
+PmN4xe3QccuXV27du/s9Xtr1x7AuH794f2zZx6dX326eeHl1U0QRIyH50/d
XT9+9cTMxfnYmF0DrZ2eSyS2VUOzl58Rd6Shms1l2WwWq1Gnk4k9Ru3J8fDN
Mytvbl7+/Nblr25ufnnt3JtLp56fnnu4GLk97d0MaM56xSdcwgWncMomGNax
zDKqRowEW2jwoNNTK5EGT6/hIrV192pu/yAQ5gAe1F8z0KjlG9Vcg4qnVyKY
6eUcrZSlFtPMKjbIouaY1TyThgfNoRY5Y0mOw5PLK5tR2bWonLb07J6MXGJu
ERtTyk3K6k9A96egySnZrBQUJyGTkZpNySrCReYvAHsvvv7u/c++fPn1L5t3
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
JeiY8thGnOYhm9nrsA65nF6Pa8jl9jicLpvdabVYzDqzRWM2qw0GmUYjUir5
KjlPreRqVDyAUAcjzBUcEMCG7BjUiewGmdMst5lkFoPEDNHYJLVbFRaLwmCS
6/RynVGFrF+kUQrFIjob/oY6sUxPoYmrantQ6Lqiks6Ssu7EtPKphXMff/Xr
k5dfffLN3z75esc+NHOkjY0qGtiXNnAITYvPZfwurmNfSieElExMa35ZC7qo
Mi4tIwmFbuzoPtqOS0gtLasa/NO+irjUnsRMwv7E3kNp2OQcUmo+JaOIui+9
Mzm/zzt2cf7MvTtPv3747Oub7766/e7Ll6+/+dvfdn79GWHv1192vvr6e4FQ
fBiiCCqrsa2tuaObxORD+xeZOvHO48/e//BHKL5X7zwE/Eg0OgMMiccBAwSD
oZIGZGKOWMDksSkcJknAZ8llQolUwOYBNjwgDXiTaURAGkzA67RmJSAHBgjI
aUwKYE+uFcNGjoimN8k1BpHTq9caxUaL0mLXcPgUIBCKLFdAp7OI4H5AnUDM
gWcGDxQImVCXjSYVvGp6gwLcD2o0yO4wgWx2I4wOp9lk1kllQiaTTiYTgUMS
iUSmkuh0+tPz55+cW717+thywD7r0fkNPLMET+2vbapBF+XGZ6QcLCnAkIk0
q3nI4x4zWiIGz7jWNaq1hMzWUDQwvTp7+sbxi/ePn3935czT46dfnT398drJ
V6cX31sef2c2eGfCeyvi2PBoz9hUZ73GtbD7dHR4MTw0GfQFXI5hD3K6gs/n
93kDXvew2znkcridEGmcFrvNaLXozSat0ag06uQGrUQuYSvl7L3P3WBEwrIa
CSxWo8JmVNvNKpiYdGLYYtDxkdRsk5jMQoORbzCLTGax3iRUqJFmhs/nyuRq
ldogEKioFBGNIe/upWdjagRi07OPvvnkq18++uLnV5/+fOrcrfG584Gxi9nl
3D+n4PenEA6k4VKzSehC4uG0hvj08n2JqAQU+kBKan17J5kl+uPBjH2H8zIx
HSlZ2LcT+uIyiCkYRhyKFJ9FTMKQEzH45LzBzFKswjx16tKjF5/8+uzj79cu
3dq6eh/w++VnhD2YfPX1D8Vl1clpWajcgtzC0tYebA+B3jlIB/eDxu/lp7+9
/OznzZv3Byl0JlcgUSg1Gg2ELImAy+fQBVwai04g4nqw/R1UKlYmFRhNGnAh
vohJYRGAOmAMKiyyoBO8qfVSlUEGE2APRrgDOKHaKFfoRDwRRSilS5VsgYS2
V3m5AioEEzA9gZgFzyZVgCXKVVqZQi0BKTVitU4KvqfRSpFFJFRICYY5lGCI
J2oNWKICpNHKoSGXy0QKhUwul8KvLZWKQXdOH99emjkR9Q3rRDG7Ui8ikntr
qwqTczP2odIOFOVn9ff3anUm91DE5ggr9T6jd0LrjGlMAaslMBqYOTd39sbK
+u2l03dmV95bOQn4vTp7/P3jcw/mo3fngndnAvenAldD9nWPYXXYthr2no4G
FiOBmUg44veHgyPhUCwUjoWCsYA/MuwLD3kDfr/f63W7XA6Q22N3uW0Ouxks
Ua+Rm/QKq0ltM6sANpsJ7E4OE7fN5LKZnTajzawxG+S7xVqgh1bQIjAZOQY9
S29kWiwck5WlM9JUGrpCIVCpFHq9XqPRKeEPo7OJRKrWjkGhWA9e9PqLH28/
ePHgvY9vPXxx/d4HZy4+dIcul9arD6XhEzLwiZm4ZFT/odQjCVl1//N3h/4U
n/ofBw6VNzb5R2eGR+dnljdic9vtA7Y/xHUfziQm5zEOZhJSC1jJeTRUGYy4
Axlt5qETF69/CPjdfvh6feP22XPb3/7w67ff/gwl+Nedna+/+7W9G//ngylx
qblxKZji6hZMaWNjF3H7zrNHH3777LNfPv/rzs2HzwbJ7EE8DUugUig0KpXK
YVC5LCqDimPS8EwaFkkffKpWK7XZ9U6XSaOXiaQsMDFAiEIfhGIKngbFVKOX
CHfDr0DM2OvxQJBBRNDSmKUSFUehE+itSqVerDZKNSYZVO29XhG41Vu0GqNK
rpFKVWKdWQMymDV6k1qjVwCWSo0UsIRUIpHyZXIhCKwYunGdVmE26fR6LUin
g7eOCl6ICwtjJ0aHR6xqv1lhEFF7W8qRZf1yElIT38ZgMjo6W8RSidHq0Bjt
Co1dYXBrbWGQxjRsMQ1HPKOnJ1auL6/dP7Z2Y2zu8dLxD1fPAH5Pjs/eXxi9
txi9vzjyeDF6KzZ0cdh21mc9OexY9HumA76JcHBydGxsdGp0bDo6NhsZnQlH
Z4IjU6HQeHhkNBAIeb2+oaFhP3LzDXndTofFbbd4XZD5bEO7TaPHofc6DV6X
edjjBBcdctk9TovDqgM4Ibwgu2tMAqOBo9cx9Xq60QiiGg0UnY4GWQbaS4AZ
KU9ioRa56VlsvtPpf//Z6/eevbly+913P3j9+Pnru+89vXj1/r0nP/YRHano
wfQcQnxa7+HU9vj0NlRhV1pew//13/7X/mT00Njcs0++u/XkzcvPfr339K+R
uYcp+UwALz6bchhFyauRJeRQ47MJcVkDJEF4cuWdW4++u/3u50untjevPVw5
ef6rb3/87seff/p155edna+++9vxs5f/578dOpCYdzCpMKcYwkthWePAOx98
fvO9N8+++Ctkc+gYe/HMpta+I02dba1dnZ3d/d1dfV3tYHoUYu8eflwuWSaD
ACuB9sPu1GkN0pGo12xTs7kk95A5NOIG8KRyDoAn2MUP2b+n5MGcRO0Xypkm
B5RqhlIv1FkUfCkT8ohAxgLb3GsawSSBN7UB3rsyIFClVxjsepfP6R52Wl0W
rQE8TgSlGXwPDFAqEyCS8EG7BCrB/ZRKuVqtBPbABo9NDi+Nee1qrkHGqi1G
o9MO7Pv9v+TlpGaj08srivsG+gUymUJrQJpOJURTp8Lkkes9Kp3LYQnMjsxe
WjhzbfH01anFS4HIvdm556dPPju9/HB56u7i6O3FyJ3FyLvz0Rsx7/lh6ymv
Zdlrm/Y6x4aHxsLhmanZqen5iemlsanl0cml2MRydHwpMjYfi82EwqP+4RFQ
KBgNhyOB4aDX7XE7XW6Xw+u0AWZuh9njNPk81oDPEfR5hqGEe6GHdACf8F2X
3eC0aR0WJXSDu/sMeSY9x2zkWPRsmCAlWydyWlV2i1qvERv0KoNRI5FJjSbb
mbWLV27ee/f95x9/9c2zNx9/8PGHn377PXBS30xLy24tLCeh87BJ6R0Hk5uT
slp7SdqjfRz3yPL7n/wEVDx+/dOnP+y8+nLn1OaXxUeUqQWMpAJ6fC4NUyvf
n0n4Y2J3XrXAHduePn5/4+abS9eewdPOHzu/cmr9x13wvv7hr3/5beennZ0b
9z76P3/MTEE37E8ox5T3vZVQnJhTt3b18Z0Xnz3/5qcnb765cOXBkVZcQ2Mv
ODYeR8FhSX1d3S2N9b1dzf09zX3dTZ3ttR0ddQRCJ09AlinYUjmLL6R4vUaj
WSYQUAIh+9iYT6HiikQ0h0sbCjlsDjXMqfR+NhsvV3JYPILaCI0dRa7lg+mx
hVShnM3gkfRWNfgetIhI4dYrkONzdXLwQIFcoLZq3X6vb8Rn3120BFmqUSk2
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
CLgnxJNQbMofnYWwb/aMKYwBEldf2URMRDdnFNCyy8R5VXJMpSy3XJZTIcsu
l2cWi3Mr5dlVIBmqUpRexk8v42aU87IqBehifnYhL6uIA/jlVMAWXmY5B0wv
sZAKY0YZN7mAlZLHTivgpWI4CShyXGpXRk53Gro9DX00p7AVU3yksLSurv4I
gYDjcCgiAYXDRPa3SAVYpQgv4fXKBL1aOV4pHqAR6rta8prqMusqUssKDrc1
5pIGa4XsLjG3R8hCVkrZW2pMzOnfk5DVL2D27S0pJhWR2Yw+GrkTcgp2oJlM
7ARLNOiEDofOO+wMj4bGJ2Mev1sqF40f3x6ePhNZOm8PT6sdQ5mFxdnFBRm5
Gfvi/hSX8FZ+QWp5aWZZMXKpwfysg7UVGVBza6pRe6qvy25pLu7rriNgm2mE
Tia5h0cdFDGQvdByBlHJoqq4VCEbC7GdzwNPJojEVLGEJhLRBAKaWMyUyTga
pWB30QyhSS20aSUOo9JsUJuMWrNJZ7UYbFaj3Wbak9Nh87idviGPf3go4PeF
gv6RcBCS6/jo2G7nNg6d3G5fN43UVmj1dtH6/4rvLpl7cMJ8rzrD5B/uB163
55B799xjFanIk3t5HNH4+PzkJEALD1yeGJ9F2AZQJ6ZndluBPQ+dGosiBEaD
0UgAUQwIDAciwWBkBKD0hiPeSMwXnfCERzV2L0dm6iWpWwfU5Y3sjPyB+MyO
pJz+rBI6poKfXy3Jq5LmVEjRZZLMUmlGiSyjRJFZJC2oUuRViHLLBIBfVhmw
hwjITC9nA4fppazUAlpaPiOjkJWGoSei+jJy29AFjenZVSmo4ryi6vKahsaW
5kFcn1jM5kGtpA9wWQNiLrK0jpgzCJ4m4nRDwRWwOvs6iiqLE0ryDgJ+HU15
nc35gB+f2YFc35bVI2L3AoG74z/w60Xw+89VPTVKllxC5bPxTGofjdLDoPVx
2TgejwR9IINNkSvEHp9jbn5qbPmSd/SYd2zZ4B2RmhyoopLUnOz98Qf/uO/3
6ZlxaWkH8jHJlaXobNTBfHRcXUV2TSXgh4aWD3JH09HCzo4K7ADySSKV1MGi
dPOZWDGbIOEQ5VyySkBXixnwC+xekmOQyyOAG4uFFBByMqCIJpMwlFLW7vlu
yNHLBhUPINSqQGKQTi3Ra6RGndykVwGTdoveZYcW0TrksvvcjmGPM+jzBAPD
o7HIPwTd4cQYBImJqYnJmanZWcjFu0KOrpmYnhibHB+dAEYAvKXF4yvLJ2EE
3v5hmMAb1O49Y4Ttu/PlmZmV6eljoKmplamp46CZqROg6ckVhMPJpdmpxVmw
1um5uZlZRFOQcMYmR+H3CYGgOkdjwXDUFxsPO4fsMrWEJWTxZXyN1YAcPebz
sKUyjkxB40v6yJzmXkp9K7n8CLmoGvpDzt/3YBfKs4v1uSXWnBJHdrGxvNFY
1qguaVAW1Mkw1dLsKklOtRSySXa1KKeSn1XOTi+kZBSSUAWEtJyBxIxGdH51
XnEZGpOXnYepqatu72rGE3oFAgqUIejTGNRuPgcr4uDY1D6QhEcQcvqYlObB
nqrGWlRpQXxZYUJHcyGd1IztraYRm3jMLuQKy5xeZJFGbh9UbYTYXf0DPyjH
Uj4eWkFot6DFg4aQw8Luntvez6QPUKlYGh3PYdMEQqZUwp87ddUZXlBYhhUm
j3koNECld2IHy2oqisoLunpbsnNTUKi4yvKc/Jzk0sLMipKsyvIsSLttLeW9
PTW4wSYivpVC6qBRuuB/hEXv5bEH4f9FzEVWa5ELqQoJQ8Ajcrh4NhsPI8z3
CNwbJSKqTESTi/cWQEPWxwAUNQquWslVKTggmOg0AoNWYtRJTXqZxaiwW7QO
qw7ktBk9Tgu8gMGANxT0Qd8VGQnEoqF/oAg1cQ/FyfEpAA+KJGyGer3XMUIT
uLx0AvD7B2//Bbml/3+ZPjaL6MTs7ClEM6fnEJ2anT45O318bnplbnppDu48
Mw/szc/Ozc8uQALfPS4iOj4Gvwa0CIFIbMhgknMF1Jb2OkwxGoVJyyvOLa0q
BlHZeKlWYPdZkCt/DXlkWjOOJmzqpNccZZZUMrILmKg8Xm6hprDUXlDmzi+z
oktFOVU8TLUQUy3OqpBklokzSkWoEmFulSSvGoIMN7eUmlU4kJ7TlpzZkJhe
gsrJLSzKLi7Jra4t6utrolB6maxBiYjMYQ1w4cXiI6s5CVg4BqmbR8cqxXSo
nkBaU31uc0Nud1spzOmkFiCNy+gC9oA3ZH085NrKAyCYAHX/FT/+bv0FA4Ti
C2Wdx8IBfvC6g/hcAp+LnJDCZiPn5cHIYRI4UhuZox6gCnF0AZkjPNrZ3T04
2NLV1j3QpdZJu3taSkqyq6oKKkpzG2pLqivyW1oru7prsTjkI2xwVBajD1m7
Bn4QB8vn4pAKy8dB/wkjNHtSMWJ0Ah4JOftv9wxosZAqAesTUPao21vDSiFj
KuUslYIN+EGG2ltl6B9LDO0dVG/SiS0Gqc2k3JPdpHFadC67weUyedy23StK
ecMhXzg0HEIuqzW0C2QoGgkjO5ijuzuYI9HoSCQcjiCBYm+X9G6l3uvlFheX
FxaW5ucXkXQ8NbP33b2qDckaIJyfOz4/e3Jh7sye9vCbnVmB78JDZv/ztggA
Q1c5OYOQPxGDSDI+HhodDUxMhCEme4dsBrNGphRxeEwsfrC1rVEgoupNwuGA
ZWTUMxIb9vi9OrNNJNNjyeK2LkFFDSOvmIYpAAIlmEJldoE0NZ+aWUrH1Ajy
G+QFDZrcanVOuSqrVIoqRvbkFNfwiisp2QUdqaiqlPTiTFRufh66qiyntjKv
vbmSDl7HxUEvJBbgeex+mZiklFEBP/AoqZAq4pGhFjNpXQO9Nd0dlST8UbgP
9O0wCnkDUhFRwO3nMLtBPHYvcpkV3gCyXPyu4wFyu1cWQMRnDoCjAnggKLgg
DgsRkwkeOAihGIo+ldhNIXWz6YM9OF4/id+DZwF+eBqnubu3F4fr6OvKzMkY
IPT1Y7tr68pqakv/X7res7m1JEnT/DX7YW1tRc/udM1MW0+XyKpKdbWiliAJ
EForQhIkASqQAKi1Fpfq6hRV1d07O7Z/a5+IlzyJzp695hbmJ84ByEw8fN09
IhDx+s0Tl6tnbKw/HB4JR1xqkVMEHKpFWiEXKOR9eXv2UDrjNltX5QMEWbP1
TSo4kQ7lsxECLorHf6xa/tt5IfjBnnYaKeZ8xdw4Vsp7temQ3fslNldNL9Ry
9bmCltljywuVZn0aSVxYmFxerrVa82tr9bXVZRkQYrs7W6SI+7t7sCcO9ygG
9g8h8PDwmPIBzIAH8N69+yD2KGGA88CMRp8YAm0Qv7LaCIE3159urr5gV5ef
jDBeWqkkbl/xunPM6OfF3QU1NaUMynt2ZAg83js7PXh7ac6qvjSj4GcoM2XU
wtw8Ar633Tw92oZS7Phkjyqbkrk6t5TJ18bGc686I9889v3hz75/+r33v/zO
+x//4P77P/p+83WUaPvbp5V/ejzzj99M/ZevCn//T4l/+EPsD1+Hvvpm9Hdf
vfmHf/zmv/7TH/741e9fP/lz1/M/dzz940DX94nQUMFsYefW/2EsnTBn9BAl
+TNPREZ7Ox9Rt4aCvfCTmzA73SXiw+bYlIQLVkngKZNjUUNgNNJHa+AMD7bj
x48wtUzUhegl427YgxCoI+yGYJvgO94X9g+it0hQJR/pGgj0DAWedQz1DHsH
Rjyve3pe93R98+S7//Cbv/v9n3/b1fu6o/tlT3/HuJ+QPZ5KR6kayBySSX88
7knE3PwIHZZRzJutbPIF/0Tek5kYs4f2uicKPkqMfDZWyMRKOcQtMVnAMQTy
n5zLeMVtGbmbjJbKsWIpnM95inmP2Z2v5KuUAlPloLVwbTpuTkmoZearEzIr
hsXZ6oSxmfx8rVifn2zUqyuNubXWws7mCmbyw/WVnY31/e2tw92dQ6LvIfXy
0fHDPwoW5O/6+vruDhF7e36O6J3Rv7dnnry4QADPrs2oogLr3bUpWG41xmhC
M8RSLl9faurv0kxEm7smmTy7uDg7vzhHRk9OTyihjR3tIcn7J/tnb09ur88+
vD26O926uD66eX/+7vb89ub8ErW9vDDP7x9sr22szszNJiYm3P5wz7DnVc/o
0073b5+O//3Xvv/tt+7/9b/6/sPvE3//x/x/+kPpN7/L/+a36f/4D/7f/MPg
P/6u66s/vfjm60dPHn/b8ep7V/fL0e5Xg6+fevpf52PjZnMJu0PsVNFPtZuI
DiBuKBufRcDX29fzyIhJjk8kmp0gYI3FE6PENVriWjzhMlVkegwOQ2GzdisW
HZTcUWCmoyNmM7fQIBIaD49I8e5FL+qRcRlw9/BkZSJYnghkIiMeXzwUz456
Ar5Q1OX29A4ODLtdAyP9sUT4TdcLt2eYUiUao2JNjntHTNkS9sTjXtQslwmj
bNYC+Qlao2P8yaSzo8nUaDLtSk+MTeS82tqxnI9TX0yXk5QY5HiwVylFEDfk
brIcqk4nq7U0Nj0TLxbGy0VPpeyfrgSr02FspmIMAmcq0epUrDqVmKnEZyr3
X7SknJ+ZSk1NkjHGSRTNQNPSzPrK/NZ6fXNtaX2FBH9hfWVpc62xu7W6v7N+
sL99aJbDHJjptsP9Q2WJp6d3N7fAdmYK6FOqaRSSdJF07u3lOZJFYgd+XKJx
phw+uUTlTLC+vbm6ub40xcf5xc0ZcZs4bmqZU1PsGPzOAJpIf3x9cYldHJ+f
7J+eHpyfH16d7V0dbl4crZ+fbV+d77w93Do63N4/3d83YzinB2dne0cnm9t7
rcbKfGW2mCmkYulImD/79EyPu/jtq/AfHge+fpZ62ll51TP7pnv2n74K/J+/
6frf/+7b//wP3377zZOXL571dT8fGXw91vfGO9Dj7n0TGRucyccXpjJTudBk
zo8VM+N8BPxfRdmIuYTmdNI9W81OV5JICqGN5NDEo3xQu7RhxLVSMcCnDHiI
pDnRLDxktC46Qtov/KLBYQhMGvXzJBLjyBTAwF4k4kYGC2k/uMb9AxDLb5JN
ZxKJWCwajkZC8VgoEQ/HooFwCKWNJBKBaNTLq0DOoBv36qv05I0TKX8pF7Ff
eEyCU95WGWRrQDVVMVvz0cJVuRScnowIFcjBt5eGIqIq4ZVQO1n0c1mrJqan
ouUSfmRmKgRv05MhSR8aKBmkh35LoDHeB6tNJ3l/s0HWdNJsBmi3w8Ix/nxx
ZXlqa21ud3MRw1lbqYHl9nbrcG+dfOzseI+weHKwiyoicQYVO5J3dkjt/Pbm
ArZu0UMwurT/4JPA+Rbgbsy08u27u3cf3t+9fweECOAVze3Vu9s7XnV19vat
lj7Y9zQzNyjuPuzv7G4Y29vc3d862Nvc32ptbTTX1huttWZrvdXcWmvtba8d
7G6cUDUfbpJOzMwU8vlEoWD2ySwUs6VSKZMthCNJ18h4R8dAR8eQ1xMr5Kp9
PWN//OrbP/zuTy+ePe9+89I12JMIewk3+WSwlImUs9FcIpAKj2GUhPqiNJ8X
pQf8hPx9keBAOjFmonAxMpkLlrJ+WTHjoxyGLipKgJlIuAtpsxEoPj3cTVss
aallIqHBcHDgISWj3PBmUibnNyVGxEP+bwqBOM4oL6dAMKdd5NPFXCqfTWA4
pXyymEsUJuLW+LuIkrA5QmcLhwDsYflMEAJhr2jOLPCbutVWDSocJovBh7Qt
BFG1aZCLiCinx2pakHa+lliYTc7OxHRLd7mU4eth7jrW9kxCKBKd52upxbkM
htOo55cWJurzWZz1lcr2RnVns7a9MbuxNru1sbC7vXSwu3K4t3q0v3G4t3m4
u3W8v0NwBJXLk4u3p5dvT68uji9Pjy/29/ePKGOh7hphu1aLwd7N3S3gYXIu
r94aPk/PLu30861d+oADeyRzm3YB9nprBcxWG00MZ63ZWJqfW16Yb9bnfxlT
Wv3FqK2qU/nJotm2a3amiJHG5NNRWToWiAbcWCrqpx3sed3f9XJ8pN/vHooF
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
cbS3SguNqCL4rTYoZqeQJptfmeDC/95yNlpIRTJRfyLoSYbG88kwHC7PVoSl
wySYgSUEOvhN5TJT+RQ2XUjOFFMPlsCqpSRWK6dmJ9Okf5BGzEXf0D188FPF
QU8mHqRVXE5F/WHfKPgRf5E+jCqAyBsNuhDAkG8A9aP0QLsgUMUvLZiN9j3D
pG8AhsMlTDr94lCSKPZcfU+He5+M9D9zD730jXYFPb1R35AsERzJRL25RCCf
NP+LSvnkxEQsm43mcnFasuvNNZNjwyEOoaRRN2I4XysqIZyr5VQFWyDT2mfe
Tr+a0KZKQVkcECKDy/V7GqvTYRJCjZDIeBhyMNASS3AlwJyAiEncdJcnMWDj
ffhBvHZ9pYwqilvL6v04M5hpVkWlh9RPo4IyQdiYn5AhdJC20ZzEoI5LWjRw
d726twF41Z21me1V2jljq/N7GwsHm0sHW/W99UV6tlqzG02zedH8NNjEihn9
mQeBh7/0dGQ8PD4U8gzGA6P8b6dzKp9AyhZnCvggClq1csa2BsiZYma6kK5Q
1U4kuGsfSPC25WyY9+TNJ3Ph6WIMAqmCUTyVt6awtfjRA29kesmID+o0ABgP
jaN+SB+RFwitjaJ7lr1BqR/4Ue1C4Lj9zi+tgqyTAWIOgcRlaaMIBFTT02ts
qOcxJgLHBl95ht+MDbzGPEMd/tGeqM+VDLn5f8JvEvAO+TwDIb8rnSBRjK02
6qvNRVq7dZ7ZG2ppoTpfKwMhSthannX0ECZNO5vXVvO0JlOay9iPOGozectP
PQOEi/PJuVoM6VOGJj7BaWN1EgMbFRQOcmIMrsSzbok9XsUt1ci/RHx7y/oF
m7kZDh0BBDabIdwXuQ9ynTG/5GymXkvTQuDqUhECMcADwnb2nFi8UodM+JwC
NsLxZqu6Spm8UGotlmmXZvPgVy0nZrRcdgqEopVc3GpgaCLux8CPuEMwbS1M
rSxOgxyX0CgH5KzipWX0T05AXXS6EDcHJqaD+aQ/n/KVssFKPmLEcPJ+iM+p
OxR8ibaIIQSKPZP1eUfGR/qJuRAYC5HyGfDEnt/TFxjvI/0j7MKe8POMvuGS
ckN1ByWGTMWvEbr+5+Cn5BAaBzq+63puFtJgg92PHth7AXvYSN9LbLT/1fhw
Z2Csnz9G2UDPi96uZ0N9r8xROAm/2V25UW8tYQuyxuIcBGIQ2FomKM/iQCAJ
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
WaMOw9i1/+jBVz9ZJOqH3hK6316gtpeXKK05HhJlQ99Orq/Ob815Vxc31+fY
7c2lQrMUUuzZML0rXNUDfqSRJJO2xm+JQGfHZgg0m3c15mBPQRkZJPgShadL
uWrRGPhp11xtTKpd+KAOK2fDsFfJRafyMdACv8pEGOTwYUyburRt1XK/5Qvs
YTo7Q0e3wKE5SygfoHYm/sYDPbCHEka8HVFfZ8zfRY+dZTYTfECIQZo4BD9u
0Y70PPIOvcCnorGdg84XUqSEGntpH3BuHxsc7X800Pln8LOL+V+NDVBuPMYJ
j3cE3a/pBDxagDQ0jjwf7PlG+IlAaySBT7Rb/ujwyzHXK43DaM2zBpxhj8hr
Bl5aG6srmxvrOzsEwP0Tnbb89vLWOXpeJ+jhXL29u719p3/v7T+cu7s7AIND
HXmmf5JE8YkeShsh0JzWd3IiAnWsJJfHNgxLAHnAnEF6YnJA8EP9wO/6CsDM
0X7WuZBBnezd3dWdOVXynBQR/KR+GJcOkCrkzYD53pYOqzInJthBThz1rK8s
Oc5Kg2ywNl+r1KZL8zOTc9Pl2alSdbIAipWC2TbZHK5hTud0LFYpmjMTZ4oJ
wCulA9oaSEIHY6nQiLNNnyOA4jAVGSVvzKd8RPBkeLiY8ZUnfPFgfyI0QBsL
9sjiod5EuC8V7qdUAa1koB+0YA/DgUB9KwQOx/qejPY+5plK1ocG6muezr4K
BGgVGu3FiEOgWfHlfo2sgZbFvlO80RnyvKG1K/x/Me/oi7GhxyPDj0ddT2hh
b6D324He76mCR4aMDJqdi6yZXaMHntnFMM9V9oIf1iIJam2srW5tkR/twMHp
8dE5EAKb7PLCHNFIe3MNbx/MAWa3t1DXzh68QaNI0+Gkuqseh0znYD6h6Kjl
if3HLfP85TXppAm7Fr/rt9DFD769enuB45BGiyF6ws8RQIkk1KmTHkVt8NPI
0p6Jvy2Nc5rjEqxPpy53Nle21s2xVq3leXum1QzgYbVKUbvQz5TzOkhIZ7U8
WMqxWimB7knukEEMPxl0WaHzaLc07dd3H3/jHgikBcKIry8RMqeBhwm+CTpH
MvGhdGwwFR1IRvplhFTYgzQAgy6UkB6hiAN+SB/xl1tz5ehkxnzveDLjmc75
pia8pdSY1l0TbZ3Iq4VhznQwKifwMJBzYq7EkB51KhwHqIzcL8dGnoIfLcF3
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
E+njdAj7fbPWwRnaPOsd1yaqJPQPaz6WJQ==
       "], {{0, 160.}, {213., 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{213., 160.},
     PlotRange->{{0, 213.}, {0, 160.}}], "\[Rule]", "\<\"n02102040\"\>"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
Pb1cNJSstqZLWb5PZde41GArI/bOiQteWT/+3OmN8+YNiYhieV4OUp5LQUp0
79y4mtLYURUpcdE2BSrx4Lt7CvkgY7B2PxWlV1HGP8DK1Bru58mfrw9OGpGG
yyCpJ6SWOTG4REfIRV7tM5Msa5oGvXm4lvux5eapyo8PRl3YW8i1rOK+Hr15
pC4jGE4PZfJj/Q1qEa8zpOS1N+AeU0eXch+vXD+5+ti2ufvXTL5zdtujW6e4
X+8ruxd4O7ZVejhGmJlwPRaslfXtEsV9use9vTm3tp8Zl1NSUUxAiMTd28O5
c3Skb0SoQSSEAvx4a9cOfPlybfPzhn/ODz93acjtB7VvPi38+GtZy+fFT97M
f/x63oWbI1++W3jn8ezbD+b95g43v9k6ZlKawd5ZAkNas7OPvzAiCmENLt7e
UHio7NzZJo47//P32a9fbnNcC6j378+1vNv47tuyt9/nfeYWA1f8mzvRt28M
ibvThMBiwm1mjc3GWq06mkZYlkhKCsvKjg4MRKw213/Ozvj8Ze3v3yu+fVrw
62v95zfzuK9ruO+HaqojKRgSu0NjqyO4j8c+PNwWwLQzqdtY8E5m0s3MiG0G
td2qtVkNJvP/NcD/rw0GhAKpAnkQAAso+5NhAbAgVyoVYrVarCGVOkYFRFYq
dpKKHIE35nm2B2XQKHPTo4vyUkL9TAymZGmU1uIaI60zaSk9hdG4miIIDUPr
9RjFAGeMkhQOGpGWQkhUBktFcmHXbgWZmelmi14iFahRhY6lYFjs6ekoFLry
+c4SkYufnQkLMdOkVK30loicAbAoIdPqCVitkCmkQLhhBAXA8vhCILWtPYdC
CBomNHIff21WbkRBt8i+lSlAYkYML2xcOHZcTa9gP1LK75QcGwjLec6d23m4
O/P53gqVkjXobT4mGhWpRQ5dU0N2rJx988TWpxf3vbx64N6Jjdf2Lb11cNmt
g03rZvY9uGTUz4cHL+6cvaCm8Pia2df2rb1xYue+dfVHNzeunTVkyciief3S
y6J1kk4QpSbCwhIcHNw2rlvOfb/dcnX1noaep9cOPbl29K1981+eX7V+do/u
Kaq+XbQV+b4s4q7g8bWYkcCMWr3FFmSmDEirlyCU4aHWLrlx3XKjCnOC8lIt
0QHKhFC0LC+ge5dwAnYWe/+lY5TA0Lo6Q/0rUkcNzKnunlieFeZHS6TOUHKY
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
2B+qi0TxzgaY1VRmM1Tc+P3DF7YNYSsXZ6dAsBW5aU/9e+6OAfASXG0NGlM9
d7YUkAmcG1YJhc/dtwGNQRGItRQygU4myngcQKtNo1LxuSqeQM0XKrl8EYPJ
ricxifXA+CQcllYqjrqdEwN908OD/Y2JzpA/Ybdaxfz+mG+oJTjZlZjsbZro
jI+2hsfaIhNd0dmhjqnexFh7aLwjPN2TWN7fNNERGWnyJYzSbrehxaqM6EUx
oySkFTU7tKsGWrctXzLd09TmtQQMCodKaJFxTRK2TsJWy3lMJgFIo5GYzWoe
n4muhpdBi+buSDP3PUF4JRw2981AFBoKfLa4OD97YQ0836JgjXUFNy/rWDcS
numwTrfqAarPjrq3j3s3DjvbG5gqWoGeVZZwMhuD3Na4ojtiWNkT2zjYtG20
8bO90798+ux/1rUv621YOdQ00uKhV2cj8yHXT+55bae7PQq3qQp9Gq6RTdy4
1LtnfYBNfrqzTbRkzMXg4DMyYTk5NSQShU2nZKQsNkrYxz5ff/fM7oMv9H31
4tSJ/7402OhCwrOrqtJGuq1vbOt7d03LpmYDvyKjeHEK6GEKsfUFMOT/7BWg
OvcpBBINBlW1+MzC4gWZ2aCT/eekM3ruACQ8oyQrrWhxCSKHwsVqjGy9la3S
EmVKrM5IsjqYEjmmCpOKxGTJ1BRPROcNGi1WLZtDh4OIVZJfCi0qqSgqLi8s
KM8tR5WWY0pLUEXIKjh4z1Dr66oRUHRlQVoKBA2b9/GBFX/cfHvXdkc4WGS3
LsLXQgy6lC++GP793LZvPh/pbuVhYZWli6F5D6eQK1P0Gshzu9EXj0aufTea
vPpN8sovXUJ0Cyujkf3vFaGKD3a2Ju/9kPz7UPLax5dOvPT3zf23r7ye/Ht/
MvnhiV/XffnDyLV7e378bcWpK+tPXV373anJH86s+erE9Csf+3a/bn3jg67X
9/e89F78g29793/d6YkjMzIg5QVPwNIhOnLhxk5tGgQCL8sAjV4tDonHwwk1
JXw6AlH4WOFCiIZZ3GIntVrx2vrFEuSjRuJCEfxfJY9DChZB6moK2GQiCYup
xyPyc57YsW08+feZZPJyMnnx/p3vr11+4/bN3cm/nrt3Y8/F41u+eXXswqc7
f9i38vsXZi9/tPev7w+ce+e5a5+8fOe7t3aOxvjVWbnzILD8FB4Vx2cz6utr
MNj8tHRIWfm/VOpKv78uHCQEfTirDrFv9+D13w6uGGmsgabLmXUAojXjvSNd
jfW4mjocvrYGi0RUIRAIFApVXQ1KFaYaxaBTZSK+XMRX8LhqPh8kXjWXaxAI
LVKFVabUCsUiGoNdT+RT54B1W0yAWRmHxaeSabU1QjLJoZKH7UYuGavgUZwG
WdxraYu4uhK+JZ3RmZGO2bHu9VP9W2aG1y/rWTHSsmKwaf3Srp0rR7Yu7d4y
1rlhpA1o/XDrbG98y3j3W9tWrRvpnO6KL2n09YUcLQ2GsEnRaNN2BZ29LWG/
2+yy65rivu6OuN9jE3Bp2BpkWWlBWWnh3CUimCrwF5WXl+Xm5malL6RgoI0N
8k0TbdumWtcNBNb3e7aPBfdMhF6YCr+4PLq21xxQVjPgT+FKHuLVpmn5UKMK
lghwpvu8/1mz5J2tK79+Zcu3b27YOOpfOxpaMRTub/TIWHUpD0FwFY+eP7b1
+pmNNy+t//3XLcv7PCJ86V8X331nb2NbAh8J46yOWhgqq6wcWwmjgE4Eh0MW
5eSZlfwv988k77zz9Qs9OwfsTnY1NPWJvILUSiwUtJZbV3Xsmwy/NRH10RCI
9CeB8ZUTyIXwKuCtQP8fsOg6IuhhHwAL+tkHqXjug7WCrEJEcVlVcWFFFqqm
mCfGa3Q0uYrAF6H0JjL4kXINjswoxZOLaHyEWEGy29Uep1mjFFVXV4LfpKA4
I780c3FOyoKcZ9KKF2ZWZjwx70nwxFXISjS6gkbBIGBpPDb0pRcHfzv9/M2r
Ly6f5JIJECnvoRe2O/++/frJo2uvnttx6cyrpw7/cPKbn37+4uPkte+vX3ol
+fc7yfOvJe98mbz3/Z1vnpPkQV7r4Xw6w+6RPyLHQJZ3yI9/sjp5+c1jB6eP
fjlx5udVd2/uPnFy+ZkLq346PQW89fiFVWdubj50ZubY7+u/ObF2/zdD2980
vLjfefDI9PsHl7x8oPHzH0d2vuKMNteh4U+hSp5hoFJGI4LNPSZq2TyQS2FV
pdjaqrlv0qFKSER4XuajBRn/IqNS5fRCNTlLipnnoKe3KUtDzMXCSkhtMYSJ
z6NhKhnYagoWhizPePu1rcnkpb/uXv/z7pU7t366cf3jazf23brzwt27r/99
690L326/+uWegzuGv9wx+v3OyZ9eWPntlrET+1YdfmHZlc+eP/rWxr6AEl2U
kpnyUGlBFgJRWlC4YP5CSMpCCAY732yrDYbobhfBbsYrRIj+VqtBTKbXVDBr
YTVlubiKvMrcVERxIa4Kia+urqmqqsfjZCKhQaPWKOQsGlnEZalEApWAL2Ox
5EymhjNHq1kgckjlLoXKJpPrBAKwS8pmAU5pdbWEaqSAQW3Qa11GvUUpN4H8
LBEEnJYGi86kkyokbB6dADp3tYjpNqsAxSYFx2uShezKqFPTFrAsaQ/NDrds
XtYz3upb0uSe6Y1NdYUHY44uv6ndo3fK2D61oNmm7vVbO5ymhFXT53cs722e
GGgb7mnqaQ13t4SGuhsHeppjIadRI6vHodGghYWVoZDAY6EAXmRVJZuC649Y
to7F963q3jYaXtNt3zbie3Eq9uJ0BND6n+lIj4tBhz1Br3o6YiKFTBQGdqFC
kNvdJAB4/mfV0Nubpg/smHl1w8BIXN0TUfc12iX0upL0Z0rSHx5uVf/81cpk
8u1k8tUdW8xk1DwtF5pMfrZqqaglXBMOYLG4R4ugT6AweASSWALNqwWvfmaq
jE/YvTGWvPn2iTfHWkSVdWmQ6oLFsBrkvLwsHJPQ3ebetyzx5lhwwsrlwrLn
vqJbXfPg6qYHwD5Iwg+ABU0R6GFBJAa7gMOCWjD3CQVyUW4OtBqOqEFkFmQs
zngSjsqXyOptDoFAjAHMAqs12mgmO12ixpI4pThSIYOOctiUjXGXza7kcusZ
LDxPRBHIGM6g2RYwgv4EXVtdR8YXQQuKSrNKSlPr60taWzXDQ/pPP568dH73
qeNrw54SGg4y0ctfO6E3y/OsqtzhLsXhzz68/duFOxcO73999abZlq6I6sXV
Y8lz3986tPvFMWWU+shLXfi3+6vXB/JVWEjx0xCHJOvE1zPnfpw9f2LF1fOr
L19cfefe5h9PDl++s+H87Q3f/DL686V1J65tPvzbhoOHV7z2YcfmV9TvfJ04
dX3PF0dnX9ofO3hkZOMuq8FcyqYUl6ZBDPz8T/YOthnqddRKPKoYXlUMHJZM
w5fDitCY8qysZ2oxRbDSlPqqxTTEUxLMU2FRwbClakRf1qUu0lMWSkk5+KLF
bAycUwunYIo/eGtnMnnt3s2bd2/e+PPe78nkL3f+/PDi9Zdv3D0wd2+K+19f
+WrnB5u7ju5b/uWWwa82DXyzceCn5yd/3rvs+KsrTu3fcvCl2YGECY8sKCvK
pFBwoL+pxpbkFz5VWj5PpcObrUQOp1jAhVaVP1NdmV6cPo9DQIvIuNryfFF9
DQVVwSMSwD+MnM1m1OFZJKJOJrGA6CsSgKoQ8AQ0qphOB8aq4/FNfKFVKDZz
+TaR2CmTu5RKh0JhkUl1YqFayBfQKPU1aMAsuRZDx9cK6VSQn8VMuoTPMes1
TbFwf097e1PMZTMZVRIgt1lj1YgNMq5RznWoRQ1aoVXJNYoZAbPMLKb4DcIW
j84mo/NwFQx0KQmWL6hDKul4t4IPOmLQ3mqZJBOPHjaqnFpJzGeJea1gEWgK
NqyYGFi3YunYQIfDqOQxybVoGKKyuLw4twpWolNKx/ta3tg6sWssuqrNvKbT
sn3Ys2PEu7HXMtuqAcD2upn0yseR2RCPCrtpMtoXVxOr5sm56auXml7Z0vfe
9mUfbF/53GTn+n7fih5H1MomI3NyUh6tyFlEhKd/9ubKy8e3/XXlhb17glJ+
WmUuxCyufOO55mX9ws4oR8guKi6BZOb+uxhaVg6rxuKRNBo25anHCNWl7726
NHn9vYsfr/aSsqg5j9ZBc6EYTDoSnV+DtNiUr63ufaHbtq1J76DC8zPmz92y
A4kGnD4wWUDu/0wWTC7OyVuUnQvGKDwBzAOHBc1nIQyeCy3LLS7MLpq7JV1Z
ZTabg2twScVSPIePYHIqRfJqq4vpCYt0DipXgqLSEQo5NRaxjS/tnJjs7h9I
9A00TUz3D422jy/vn1kznl2cgcRVAqXmPJVb9FRVdbrHx4rGmW2ttC8OTvx5
+/WDB4b95goB4SlMAYSOerKqEIItf1QnoIdsOpeVqpIgaivSKjLmT7Z2/HXq
cPLiO22qlFdG699YgnvWn7OyIdsvmJ8KgTTaofd+33n/ytYbF9fevbn+3Pnx
q7dmf7s2derS1C8XZ348P/PDrzPfnV555Nzmgz+s3P1q6Pl37cevzhy/9Oz7
Xy/54Ju+97/oGpkUKuVFdYhFqILHwibEW9sSHhHKxK4BDVFlZV51TQWyuqIK
gyiDlWYXZGJx8GpkAaJ0PjwbQoE+FBAUTHnx4+bKMDOlWV3cZatT1ZUIkCXM
qgJY1uM71iy5f+235J17l85dvH//xn3QzCaP3U9+e/bSh8nkkeS1j/74eW/y
17dufvv85Y92nHlj3VdbBs+8vvrMm6t+2Lv00z1LPnph8rUdE8vHWhqsSgaD
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
5JOwG3hUC5NoYhFtfLpdzLKJmGY+zSoEA7ZdxHUIOA0CjkfIC0glUaU0qhDY
mQSPkNZslEV1Ep+S59eJIma5RyNyq4V+vTRi0cStuqhZEzNpE3azTiSau5ZY
IQMd8dynzUIB4JRDqteKRSoBX87lACl4HCWfqxHytWKhUsTis0lkArqqsjAn
IyVtwbzSvAw8GjaXn+kUOgFHwlaTsBjQLKOhZQDbrKcfW/wYBGju25G5qfD8
9LKcRUUZKYUZKYBWREl2dUVBZXFmWX5qDaJYyKhxa2k+HcmjIbb7pMPNJrMY
W1e5iI0rGmx1DLW7NUJCRgqkJPvJkFuzcmnXSI9/16buXRs71o03dgcMLhlV
w4AZBJVeE645JFo11bx3x9oVI912OYOBTLNwc0hVjy1e8KRAyu8ZcAwPqUcG
pR4zEZadV7gws7zkCYeD0tvvP/Dhf27fOvHnnV8vn/l++XhsbMTy952DRz96
1kRHkKA5IGOkF+XlopEZiLLcinyzhjMStUzFTOu73QMRFR6VXVZR9L9zOiAJ
g5pXVp5RUPRMWgaYhNfUAnjzoXP3zkJgcaVViBIkLL0oZ376/Iz8udMZsKrS
srIcPB4ejlg7uwKd3b7OXt/oROPIRKJzyNs9EvRG9f64uanTPzzeMrq0o7sn
0tLkbm1yD/fGxweap0c6ihClhaB7roUtzk9JyX6ILkJs3t29YUdsx/Ph/R/2
Ti0V7dhoS97/71/n3rLzy3BFjxCqFpfnPlG68KGiBZD0RZCsVAitCvLDgaZk
8s0bv+9Ont6XvPP2b4c6dq0m/Ly/M3nh+avnt164uPnK9W3nL2/46eTk71fX
3UvuPnVh5vTFlRdvbzp/feOxX2e+/2ny0MkV3/60/LOvRw4dGj91atWF6zsu
/7Xzh4sD//256ZNjA8+/0trfZcXBUtGFkKVdinXLrJTalMrChTIupT1s4ZJg
sJLF8PIcLBYBrShZlJ4Gr65GYjHVOAymBl5Znp2X/nD2Agg0B1JX8bhdCHWL
UV4RJaETGxlILbWMWPJIfclTS2Pe5KXzyTuXkrdPJf84fPO7fWf3v3Dlq1fv
nnrpxqnn2jwETD5EUleoZ6CdfEqjXtJqkTebxM0mYbNV3GQRRXS8kIYX0Yqd
PDaQg89wiqkeBdWnpft1DL+O5ZDSGqQst5TrlfICEk5Qxg7LmREFIyile/gU
J4fk4lO8YoZPznZLWHYhzS5gOIRMwLVTCGjlBqXCqELWpJFHFdyAhNakF7fb
lF4J3cyp8yk5TQ5Vo00dNkiDOnHMrGqyaBIGZVQlC6gkQaPKb9Y2aGQ6IRv0
zmaZwCQXqwUcCZMKJGZQRHQykIxNV/JYKj7bY1GDJGCQ84DUIiabgquBlUDz
0kuyFxdlLi7MWFSclQoctiB9Ydb8Z1Kfeix3/pNpTzy06FEIIDdv0dNAWSlP
ZDz9WFHmwvy0lJLshbCiTGhBWvbiJ4HJZi54WMRCSdmIhE820Oowqah8OtJu
4CaCBpueb9byXVZ5xGf22NUWrTjqsUyMtLS3Wns6HMM9kZH2WEfIFrQJjIpq
PrvAbCC4ncL+7vjGVcs2Ti/xaFgJK0lMzXYHVH0TTUNL/aEoc+m48j8727bM
Dm5ds+TdN2f+uPd1Mnnm3r1TyT+PH/52X1NQWpAFCXjJv59779mV7W0efdRu
aI6FREpRFbkGRIeFuSkMWk1v3DXZ5l0/EJrqMJlkOGAADyIx8FYALMAT0JqS
ngloBTP/3IEHA/Y+OFdbBKtML8qan7OwAJrPFDDYPCoAlsGoa2kJjIx0LJvq
Hxvv6B2IdvcFO3r9jZ3OeHtDot0bSTiija6WDn9bRyje6E40utvag92doYHe
GAjGxYiqnLLSuYviqkoLEZk4esnApHNmvWtwTPDqG4nZGVFjqPLlbb7k1Xde
25RokFXkLIKkPQ0pXwQhwzNCfv761b6DexPXj648c2LD6Z83zTRRtQTIJ+/Y
fv2x9fovy5L39l28tPn3G9sPn5g6cX7N9fu7z1/ffPbKunPXNly4seXM5fU/
nVl56OepY6dmf/x1zeffj739ftMnH7X89uvq23/s+/3u9s9OxT46Hvz61Pgr
7wy0N5oQBSlc/OJlfYrOGLMG/jgWWQyao7hbo+Cg6zFFaFguFl0Og0Nz8nIR
GAxgtqqmBjALQkhRSXpa6kPpqZCSvEdpmAwxGSomYDSMeiosi4FcrKIV0Mqf
1OAqj7y0+9e3nz+wsvPnF8eP7hrcHbeMmRg/vb8smfzkk1dHdKwiLaMqoOaF
tfIeT0ObzQhCaZNB2mqStRjFCQ0vJufEZdyokB0TcaJCRkBACIjwYQUxpqVE
1bSEjtuoEzRqhDElLyZlxiWUhIzcKCdHpbSQmBYUUQG5ESU3quFH1LyAktsg
pAILBnLyGR4BKyDhRWTiuEqUUHLcHLyLVxeU00IKekTNiRkEoJdLmCQhNR88
ENhuk0Ge0EiiclFQzktYVTG7KmSWeXVCr1bsNUg9eolDLbLIeWYZTy9iybkU
CaseSESv51NxIipOziYYJIwGrdBpkFlUApWAJmYS6HgkCVNJQFbgkeU4eBmm
sri6oghbWYIsyinPTgVJEpoFVvL0suzUksxFQE8/PHdXonn/Bu+Whwuz5gOH
nVPBQruJH4/qowGtXsswaDnBgD4etfu9RodNZTJI9Bqx1ajwOS0Bp8WmVyok
7FDUanOobDadz2kLe8wtcWtbqz4cF0tUGLWR3uAyJOLh4Z62RrdxotPW6Oc6
I2J/h7Gpx93eY9+yOf76y4PPru3auKrj52Mvf/HZjuGBRmo9CgF9GgF9bNFj
EFxVSluLZPmUT68kTwy1d8QifV3tA6NdvkYnVUTMg6bl5C0KOA1T/U3rxxo3
jvmm+pxlZXn/AxbYK2haQeu6IDMb+CmYAbQicXUPrisGKq2CMaVsnVPjCtli
bcFQ1OPxWzs744OD7R0dkfb2cEurPxK3g78x2mRv7PQ0dXlbO0ONrb54oweg
ChRLuOLNnub2QEtboL0r2N0XrUQT80oRRZWIuVsfYEpLkWnOCHdoSmd0Fq1Y
K1s5K3DZMzrjVbfO7Dr33YalHVwxL4WIfYhbkyOuLwkG6idH5T+/t+yrFwdW
L3NyqSnqOshkAnr1wvjduzN3ryy7eHbi/LUNJ69u/ObnyRvJvbeS+158J7jr
ZdfhUzNX7uz+9fcNR36e+eHHqaO/zB4+vuLgN0sOfNj66ov2E8cmbt566ey1
LR8f9xw8HTp6cfmb+8caAwZMcZpZUjbYwrRrKqGF/6qCF1TBSlR8vJqDkrIw
OFQBqiIfVllaVFSExNSgsHjwGqIJdai6muLKovlpT6akPpZbkFJeupCIKSNX
V1PQKGZNKQOTaRGUmxhFMUn9ru7oC12eWSv9wLDl12fbXw6p+jmwMR/uwg/r
QMDYNO4PallzPaNG3e31u8Uyl1DgFXNCUnZUwooI6DEhrVXMauUze2ScPiWr
Q0ZuUdR16sk9Znq3hd1uYLfree0aXouclRDVx/m1TcLaZjG+RUFLKJgxGT0s
oYZkjLCCBRgE2PplTGC4biHNzad7BAy/iBUW8yISdkzO8AnqfCJiSEGNa1md
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
sL0z4MAX3VEPO2Ov14Uei+dUaA40+Ln2RHs3+rsciWV0hBI7w0jtYcQGC7re
4tUUgKsxo6t9MY2BBKhqi3etP6EhiFzp650pc8k1UJMV+FgROl7iBUOSEp+o
ICQpiZBtE5TEGCk2UoSJkeKB4gQlOUqKC+FjYmQkyLxQIMdQGzeDwJ0ma/80
tCoakA4xAVbWk4IZAY8NsNstIrCscXIy2FdQwBgR1u7DyjKys33Y5aESyPtg
TuwGMLfETB9KlolhN1JzzKyiIF5xsLAggJPvz821MDOBWS0BrknXk+BsQQAv
U0/LNjJzfdnQ0zRkqwKfoiTAYFMRk+W4VAUhx8DIN7GhZ2tpOTq6XU0BC1Rg
ZKcriFaxd5qSmK6kJEnxyQpyopwCop+s5YAZCBPTwsTr774GsxEq8FovES5c
Sg6WUnwFeDXbC3dgK/hkL6dP0S67vVz34b0O0SleHA4YWipXxJSqEb1ZbQrQ
q4xytogBtLoT3DyI7iQeSWKQKM1KoUbIlDCZIoZEKeIJ2FAiiYDLB/ixRDIO
BgBWphBDAbDQgVYo8NgGkwrAgfgsEDGAPiAO4AXdBPVUaPgyFVetB9ML1lcA
BQOsQ+bV6CVQQCh8lFDMBEjhQeAQPhbO+vppoAPRBosKSmWUqn2kYAZ8A3VG
fw3sCcAsAA7d16Le8tH6f0d/YO8ujJPrzvffIXnvPDoY9/yPwaRs77+9h3pv
G8rFY9srL6Mcdr7ZVhP9y7cD3z7Lev59ytqLiguTQSHGHY9v96/9fF8rE/7t
1dc++mDvzu2HPnx/u/Pefbvef+PQ1tcIzu8mJkvX1q5+88uJR1+33H6Q/2Kt
Z2El5fZnVV89Gzxy2PrRu6gDW18Se30kc91kwmwKJG89+CbK8V0U2eFfPmzH
cKWXn9BZTdor99obzCXYVEi+WVPsqy61yOpCFM0R8sZwcVUgL0dDyFLhKgPZ
9aGCcgut0o/eGi5ojxD2xYihOsM4rUGMzjDWkWjB0TjRUALSasE2+3p1BxDr
tM5FyKeNeqehKMpKqe5KieZitvhitmi1QnuzTLmQxbuQwZ600i/m8Efjvbos
u4djnM5nEU8lex8JdxmMwZ2zI/faoy5X+3UFe3WHo48lEar0u49Ek9qDsB3B
uM4w4p+d1BVOrvdDt4eSuyJoneHUlhBiayilPZxW54fNVToXGskZapJNjktR
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
IDIV99X333l350dOzvv+ikLJWNue3Kt/9Jlt+arvyv2Q299kjUzFWoJcHXeg
mIfe7LBqorgHeO4fO255iXbovSg1RYrb5fbhq3s3vbxr89/eeBW1Z+d7H334
122foMbG837/4+T33zXdupV+7Wrq18+af/1xKDdNRHHbrKQeygxRZwWpCoOV
JcGSPCMzR0OqMHNqLUi5QVCm5VQZqM3+7JYATp2RUWdkdQaJB6I1Q3H6o1HK
4XhNf6SozuBdoTzUGYg/mylZKtNcyOONJaGnMgmT6RjQx4Ui/IM25Mte2Rdd
4JYFs9meR8O3Xy6j3W+SfdaivN+sWa3XXavRrFRIL1eJbjSIbzWLbjbxrtYz
bzRx7nWKvh/1v9shf3TYd7VF/e1Q1LORuC+Ox98fjFlp0t9q197tUN5s4D9s
Ed2r417KIczb8ROJ7qMxh86muM0V4OeKsRPZblN5uJl88nQu5UIhZ7lculAs
ns+TXC7TzGQhMNyEJ2Sh8GQiZqWC/6hTN5vPOGlnt0cTWyPxPfGMvkRWv40/
YEO647mtkczGcEZbDL8nWd4ZJ60JWn+xpdKf0RDKbopgd8QJ+6yy3mRpe6yg
JYrbGs2DlZogaokJW24h1Icy4JrGcFZDGL0zlt0aQanx96rw9agPwrVH0eoC
vfLVjtV+nm2R5KYgbJ58r120s8LHpTkY1xxMqrGQSg2EXDUmR4Uu1OMqLFTQ
btgBqkMYdeHspjghAAvY1kfzGmIF7Uly2G8hLNeHCjrj5QPp+sF03VGb8ohV
PJyhmCo3nS/Rn8hExnMlcxX6xTrTlVa/uXrdWJFgOJU6ZqVOpTHmM5hLObyr
xaI5O3OlXHK1Tn6xXDhXxJktZM7m0mfsjHt1pjs1pivl2rk8ZCqHO1eKnM5h
tIYfOFvImSoRzJYIL5SIp3MFg1HYw8Gep63sc5nS8XTJaIpwOJkHWXgohdsb
RW3wRzf4YzoiqC3B1Grw0n7UMh9ijtwzQ4bJUFFtalqKkm5V0ZMUtGgxOYSP
tbAwOqq7joHRMrwUVIyY4IYQ3MUkTwndm+i5l4zdzyC58+h4hEVHuEwRj4Hw
aVweAUvY7+61G5ilcLAEFp4CflgGckumc6gMLg06i0uDFExjkghkDBR4YyHC
AusLnc4gMFkk0FyJWCCBmCzgQpcgXLGQI5Xy1Op1WpVqoUzBeXnT39/86O1N
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
s+8q793OL0pkWLj7rAZyupFVHW1IUTLsal6xr6QxVFdm5Ff6cJoDkI5gcU+o
rC9U1unHHwmTDvhxjgWyJ5IUs3bt+QzFuUz5dJ6mL4J6Ll9/p9v2cDD/ZlfW
XGXiiaywwRTtVCFyq0n6sFv5eQdyvYZwux77eSvhaS/txbh87YL593O+3435
rrQiD08EfXk2/utp67Op9fp2JvWXS3lr1yvXbtT8slD8dCLji1PW35ZK/nut
4oc5+/V+/5Uew+0h/2/PRz8ZMv04Zv6ih3+jFnsx32E+e/fnjdgvW0gXMxwf
NTCWs12vFHjcrSU+aqf9PCy6VLj/apX3fKH75XL87UbQU8psjvdiMf1mDXIx
n75UzJ4vZACtt5uk12p5V2u4j/oMF8rY49mkSchrJfyzOcxTGbSTabSjSeSh
FOaQjTdiEw7ZhIBtf6JgIAEZSBSBkPUlIUDi4WQR6Fp7NBsErjue3wseL4rV
HMboiuMNpiqG7epjacoBm7TfKgDrC3UkmQuqCqoNdSSZ3xXHqQsidMSw2qOZ
+RqnYpPHenCOWX+lusIPXxVArAkiQwRui+FCUgb2O+LFbbEI9MM2VX+aridZ
2RYrhn3jTJ56qkR9vkgzli1a32dSWANJ1N5YwlguAqp6rkSxUGdYbvKdKlOc
r1De6Qm72x662mBZKpSeT6fN2imXyzhLFexzhaQTObj+dFyJv0MSsi2Kss3g
8KZ2x9tR3jtaY0nTjapLrdoT2ZST6fiFMh58yHwW4VYFbzmfOpPuvZBPuVrN
ny+mncslzJdzFiuQySz6WCpxKo+xUi26Vi9ZquRfKGauVAqu1oguFnNm8uiL
paKlMvFcPm82j79cop7Pk0/ZRetvuUkTnEhg94QSG309y1UHipUH8qSOdmRf
KndXImt7HGVrJPHjKPKOaNq+GIZTGMnZ1+ug2n2/zM1B7OkowR0Qkw4gxP1s
nAOXcEjM8FbwaSohQy/nyhGKVEBSimkaGVspZWnlHL1aIBNSER6JSUUTsU40
koeAQ+CzCRSCGxXnziJ7sSk4OsGTQURzmQSERxXyqDw2ic8h87lEoLWkIuzE
iTIuayuL+tqDe+Wnzui6+uktfazMQi8a5w3nQ3/115NjzJwtr6D2vINyd9pk
1FEiLVyB9ycW5kEzZU8YzyFWdsiH/l5JMuOHx92/Pz88OR751aPKtRc9gx0a
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
Z4u5JzuMUdrtKYaDPVZ1d4wGOG0NF3VGifpixEdiJf1x0vE000SmZSLdNG7V
jMZLxxLEEymyC2ny+UTBpUTOhVj6+UjC+RjclWzek1bT78Mxd+vVy8Wir/oi
PusIvdUUujZTvzbbdK8nZe3nqbXP+r6ZL/5iMvXpdMq3c8n/vZn13WzEV2f8
vp0O/uq075dnzC8WE/992fbbfNKLa2nfXo19tBjy+cWQJ8sxP9xI++lm5o9X
7N8vZry4XvTLcs6La4XL3fqfL6av3Sv/YzH9xcXY70ckD5rdfxpi3GlwvFa2
/Vkv+l7t/kfNnnPpH9+r9rxZ6nKrzHXevmMpf+f3R0i3axzuNbjdb0bfqnFb
KHSYydo1n+e4VOS2WOK5XI67XkO7Xs+6XE1bqaJerqJfLCVOZLk/Oar7+XTw
4wHd437DnXblT2NRn/VaVmoVoLPncvnjdh4wO5YuOJ0hOpUhOZkhOWpDAFgo
kEgAFup/6UsHVV03ugAsnILqTxFBep0t9x3PVZ3OV58p1A5nykbs8okSX2B2
MFMOwPYkIR0J/P50xUCGsjdFciRNPpip/ZNTJfQjNllvshhQHUhTnSow9yRJ
INIOZ2pO5ZoGU1XH0zXnSswL1bqrjfpbbZbVdr/rzablWu18pXKuXD5TKr1Y
pbrW4nunN/B2V+DlJv1yvf5qi26yED+W7bFUKz6TzweLvtiW+t/b02u/P117
8e2/v3u89p8f1/7z3drzz9e+uXnlREuMxBX3EUrnjbo3EvfNRMrNLt+vBkPG
UtBPenwetSl+G/L/9bjfg0bBXA5m3HZopgD3oEv55RHjZ12aazWC+SLypVLK
7WbkUa/yy8PqO038hx3y2w0CAPZSEW2hgLZUxLhRLVkshVQrnLTzzmcLZnLF
U3niqVz5dIFyNFUwEM86msDpi2VUGjyyRXuhMkR7gknv+hE3a93fNmA+CqQe
MuH3qz33+FFcQznoGBE2XoKP5mPieDgbQk1gkgLx7ga8i4Hi6kN311NdVXgn
KcZRjHEQoR0Rr/1C9H4+2pHr4ch228dycWA47aW67GV5u+DdHDCHdpPQhwR0
nJhNYhI8MC57nfZtc3b4xHX/jpYWw9mzqc9/OPnTTye/fta9sGQdGdVOTJkv
zsfm2Sm+ioMy+gGhtwPHeQd57xusg28pcbt8aU5xYlyC0KvYh9WXpLUrXUoD
0Ofb/L65Wjp7NOjeBfvZrsBY9W4j5Z1MHWYoM/CY1Q9U9UiiciRNM5alG7Nr
T6Qpz2X5Xq6KvVGbOJfjNxQjPBbJGreKLmTJnjQEPav3f1JjulMkW8lkr2Sx
7lTInrQbVyslQ5EuS0XI1UrV6RTGg9bQ307lXGsO+Wa6/N6ZvG+Xan66Vv94
LnftUdvas861h7U/38wHAf1uMeWHxeS11dy1m3m/L6X/ejnt68sxT2/EfXPr
//H0FlCtbIu65n63e/Tr17ffeX3vPbbP2br2Xo4t3N3dSSAhwWUhy13Rhbu7
u7trcCcQCBA0SBICcc/syT49mvGPGpWiyIBQ3/z/vzKr8o5GeEcnvGNufxbs
REr2voH9BObSO0CI2GxEXI2Hg40vHNzTi26PzdxHzFb9/SKZ06pHByX3D0sf
gFE7coXKxJe/k8t0t7OUidkqG2kyi/E/n1YqH5UqMNuNL5uMdgsVp7/9jIv+
dTlNbi1DeTZRHrbg1Syd+XStnTKbo3oXQon1Wr7Zdpktsz+AO/z4sB4BmSU3
YcHsZ2pXOKEUPZfhNJPqgoNdL9F1LM51JNZ1KBYxEItofm/7//dQ2E8hv73f
3MfTfYeSMHAdbm+PcB5OxsLo2xOLhFtmsvwXC4JXi8NHkzwrnptUvjDti/ec
zApqi3LvjsO0Rns0RSI74rygWmM8uxN9x7Ke9CfDxOvTHoOB3tr0BQnJ7Yz1
HEry64vz6o7x7Ix0b3zvVPPKpvWz60giGubhnaqAvZqg7Qq/tULPxRzkUq77
Sj5qNsMFrm+Weu83Pia3PCXVBhLKfNaLEXsNziftyIu+0IEkh8YvSNpMK+DQ
AIMBhFIuWwBuvoQi1ikQnXOPZvtKPtjKfmd397vOWFtyz/u1Ui98CfqsMXCv
zOO6PYjVEXRS6U7ItdotsieVOm3l26znWhOLIYMWEMm1TIv1LPPVDNOtIpvz
JvRRDfKkzoNU4QZT8V4Zcj3HYSHJciXDcTbZEZfkOPrNrj/CYiDCauSbPXy1
h+Nc+qOdhuKQY0merR9sMjyVv7k8SETKxbo+fGHxAwQ22PiXcEvZACNZtOZd
D7W7CLXfw63VXzpovbLXeGmt+tZa47Ot/idLvRfG6kHGygGmSkHmagGmKj5G
ylj9Ryg9eZTeI7SBEjRfhO4jJy15e3UZW1UZG5WHFioyZhpyJlryMCFbG6rb
mWjZmmpZG2tYGKjqqcpCt4Xk7u/m0C/rJZIhCqX+/KKifyikqxe9uvp6ayMq
Ocr0KUYLZfrITUvB21jDXvknG7n/9NG7+8peKxZlkfvYtflTQGukd26YcV+W
1+7o173ZqKmOsMW+d3FPNIOtfs5+Zp8eaJcf7Nry+fFI0rOR5NCJzODV0pf4
ylfLhU83St6et6fSu3K2y75MxvsNR6Em4tFzyaj9PL/TIn9aRQitMvio0IuQ
5rKR5ryV6YZPd1lOsl9OcdjIQqxluk3GWM0m2J+1vGqJclhpfHc+nXkJmd0u
B5IJJqlCTGkEnC5Aq2ft5zO2M4R7OYCUJyZmCLaT2aQ43mki7zSeuf+VSfos
IUeDy0RwlQQOP4PTSBoOCzafM8Yw18Me1D7X9UIVco06o1VzKelvF7UKlHp5
QvZP7A69leSfVpNvL8Xf3sp8tJJ4n1yuSanVXE76gd6kQW/RoTZqEfNlpmL+
MR3742aOwnaBKgzJe2UGYzEPBiLubRaZHtY54gvN8IUWp80eh3XOp83Iq14/
YoXDeZsXucmb1h22W3WTihey3ecyoNDzGdi5dK/JZMxIgkdvtCuspdA6/yin
rtA0++NREE8IKdwCPQtugfxOZQfCjf3x7nO5AaslYeulTyGwNa8t4A6d0cjm
CBdIa3+Kb2c8tjnKvf0btjUO2xbvM5gVNpzxpDs+oCUS2xyBbvmKhsx2xmL7
k3w7Ij36E7x6Yz0b39tD9X1DDyZ69kQ7rxX7QSohjP+idSEbsV6EIVb6Q4SJ
FT5bZV5wuVvlB1fWcpFzmZZHLc6CmRDYNeo/Gvanh4FTPBBygQAIheCaC/gA
8MUiNvscABrg7x7MVfnq/ofNz99l+Stej8SK51L26h/zRj/jC1wZ3U8EQy8Y
HcHkGhSlHntRj97KtV1INFxKNZtPMl7NMN8rcYYUb+RYruVYQJ+FNWSvHKKK
OG3wu2wPI1V4LaY5LmY4L2YhlvPQM+muA1FWvV9vpnmPJd4AO5PhtVIYsl4S
PhzvUfXEuCRErzBA65ubzHOzf/ho/K8Q41+DTe7ZPvizncz3wRbqL50Nwu00
n9mrPbdTeWGtBOvtOyuNjxZab8w1wy1UH1uphlioBJop+xk/8jJU8NST9dCV
Q2rLuGnJOmk8sFN/YKv6wEblvrXqQ0vVh0aK94z/+MQKIw1ZfVUZQ3U5S31V
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
o7s/8VklUlH96WlhTR3W2//7smrHxZXXz8P/jnH696hQjaTHjtEY108uTu8c
rCJRVtFo41g3/ab3vrisz0edhfim1KnqL+2FwfUlXvXVmI6OoKmpLztrOUCy
BfgngAq7CRdQz8DBOndrlE3o4mw1srdqeTsNkoNOJr71cqnteqlLQBgWE4cF
Wz1SUhc467ucTKaPfeNOp4GNMrBZA5ZLwUIpWCkHW3VgLkc0EQ/wmWA6gtEX
zh1+uluOYLSHr2e5r5f48xYLwPngJalLwF2XgpNryf45b4sNjkXghCfaEok2
gHRTwsTxKX2A0QcuG1hHmfzjb4Aayd3xJ40ZEPvkNlp+YOAUdpv/SzD5gNH/
82Hdn3gD9/dL/sntUiNX32Z2KLJ6VLh9mmANcdGosZn7kNVpRSrWPKrQPqnS
Wkz5hZB/m1h4m96kQm9Uvm5R43TqMjv0qI2aJ9Vqx9Va+5XapEp9UqXRToXp
VpkZocR8s9QSitzidtrhTqiw2W9wg8CetHmvFDrgUi1HEyyGE6yH4+2Hvjn2
xzr2RkE590W7wEjc+tG26Z1VxxeHvhg3+LD9s33ze+ueKBf4cCjeAwpu7Ipw
Goxzn8rw7Y5whJjDh3B/CGx3LHI0za838aa9tsei6z67lb51rPyErP7iURPl
2ZEU1Jf0pC0qoOGTV9MXr7ZI7/YobFf0TXXtjkYNJXrN5wYt5AcNxbm1fbKY
TEMdt76dy8PM5KBnslCzOaiF3D/cFgbjTLe5VIfNQjSk9egPWs9rA6kNj6kN
PrvFVvgc49k0s6Uib7DdCIS7gEsGgMu/QfUGVBYQiAEXAitlHfL2pk5bMycj
fbC/fpfmJr9eFD6ShBhIchxJd8BXepM7wxmDr5g9T0+qsAuxhrjPmhsplpRq
DLcjBOqgFLGaYQnN96ojWDz6htX7gtn36rA+GI4n0ENXCn0mUzxGEhzH4i0n
4s0mE26urR6MMOyLMMTF2y7nuJMqgjaLb64eGoiw6f9ii88PPGv6eFD9puWF
dZTF3cdKf/d99IO7zI9olfve+squWg8CHTX9HJVDkOqvfPVfeeuFuamEuiq/
9NR96q4V5qb+2Fkl2FE1yFkt0FnD10nDy07N01bNw1rFxULJyeyRvckjOzNF
BwtVZws1C20ZZzM1tJ2hu7Weld4jaLW6incMVR9An/1DyouLr6dnX8UnmXr7
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
pZdAvwj0I9SZ6y/riSttsROlgYyOS4DZDqQfgOSTXj2lBfNasKiCyAVDUkW3
QvJUK23WCqp17BuAc1pDDeNNBMvmzgJWIVi6Jxm9oaPco7yIV83dAPQ78z2x
w13h1NErstUSIO8QCV+IpC9l4nopN0fOTFDTQ9RrvooFL8FkgGL+jGopSz5/
QzZ3Wzp9k/3p8tzrSNnyecA6zx3yYXc7g6lY0QOnoZSjoCEWvCoALTfW7iW/
TneZaAyXzFzhLCQphJlyeZlM+VQl/6xUvJOq78l0GWp9rl5fAcALoKxSyIKV
SphWc0QtPSphwESLDoDjpFpBCKZPQlIu2QEGGjBxehpas4gCq47aRUfpFFo0
gpGMEsQjzrwBDK8fye6z439Csfrga2/seJ8Ieoo/WAwBswFgJQzM+En7HUW9
aNE7hBiK0/142Xs876UD1GfBsJ/yvbv4tau2xxd8DBY+c9G+9Qd9ofo3/soO
D8lTIucBDqKM/RCxVn9yocJ0udqSVm+/CnFRaPU598SnrKMz+VYrJfbzBTaT
uSemrh+n3DZdKDhJrXFYqkYuViEo5baTBSajd45TSsyZjYj1JtRCmRmlyJRW
a0OrsZsrMp4pMF6qsKSUmS9UW9Ea4MwmJL0evlJlSa214TYj1qqtlivMVqss
uM1wZYez4jlh/YHdfJnRTPHxiYKjrAco5StPKAysNRpGkj/cPDJ8z3Sq0mqu
1mauznrxgd36c6yo21nc7QT6fcCQD+h3kr6zZ3fD17oJ3IlzQNIOAFWnV8q1
QKYDcj2QaYFcI9WoeIYdAUq5QqeDbFeqlwDAAexPQ1XnTp3c7L3/n1H2f5At
NyX67J7/GA/opxn9ONaIh5aeCNjn9Uvxmulo1WiYrC9A/NZP1RPGfupBbXab
KEEbngLQGix+Ecdoixyv9J+oDqY+Ps1sPzta5v8mlzBS6rf6KEHWmzlaGVwQ
vP+q2y/1ybDaJPh1v8O5QUYZHgcvehw877o/M+hk0Vni7UTnC0GIc4HwSxGO
mfFumXHks4GYaBcLSElesHMB6Gg3m3CilT/WzBNx3BNl4o+39CNYe2EsIj2x
kCK8CJD8SCisjdHxvb/s2vLtnz9tsTp+FA+zdbA6CQH7y6aN277/+s+d2yBg
f962cce2jXcqCBVNYWfS3M0sfvvvjxv2H9rweTKDKbhRVmt5KmFbe9tZCbtX
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
zPmCVX/NMh4I7DhzR2j9duLPQfqx8+rPZ1WjYVANVK3CAcdSzzfVsI7rGZaA
5QBW8GDC8CmCAt5coe16I0ndEaF5nihqPkOvSxE8y1d+bBQONID1rvnRm1p9
M19ZwBCd44uCoTuJVlSoE1fp5Df1iltA2QRVbw23CYgagKwcyHOB8JyaG6Hk
BCi5nlqRB9D4ApW3mues4bsAlR9Q+qrYzkDuB4QecqaTaAUjWHIQLqMlazjl
mpN62QmwPOQU7OoHU9onS/4USjyLF89D4TkQsPwB1Vez7Kma91DOuMknSPJR
kvAd9n9rJyBm19sRjCf21GbrxXozerONoB0lfIZkPLBgPzyp6caCPiftO7zB
tl44y14QIWDlHU6CNjSj3ma13IzfgoIE8TtXfGKq8PhI/uHZSjPhc+JSA4La
jOM/dWe1kCaLYOMFsKVKx9Ua4shtu5ki9Ow9h5Fcm7Fbdkvl+LVq56USxNJd
M1aZtfg+Wt5CEDVjWY1wZpM9qwUleO4I+f56G4rWDKNUm3GfOoBPvto+X9EL
H/XHaPnbUNnbYDAUq3ofvP7MRfCSDIbC9APByve+0ndk1Qcv/aA/dBW9JIA+
N9CNAS+R4DVK/9yWU29CKTEfLUbLh/I0ix1QJAYqsVwOsQnEGsBXGRZRyL+s
MlYalj9JNHoO0DKAahkIp8QjT+vPeZP3fRNl+Zvrno3EPT8mIP5MsP17ZdSv
rK4IICgC/DuqlVQNIxWILjGng2mjPszP3uLxEDAXC2bitIMh0m5f2atA5atg
eWeQoNUTumWtlhEWCnGzebi5fOfBa7jXF5FPz9iVh5tkuf5+0XHXZdcDxQnY
mguetRe9bkYik12OnSIcSnY3uxhofykIddrDOgxv4os44o08FoSzOOWJSglx
CSBYBTvbBjrbBTjZRnlgU6O8rySGXowPPhvp50dCER2sIYj27txsduRPyGGt
TY8c3fvHgT9379qx9eet3x/489d9f2y3NDuYlhLRWHfn+bPK5obbyXnWiTn2
x2Bbv93+jy07tm7fseXAwe1Gpt9n55KKKr2y7uDSrqLPXCCGn3IKi/L0DyVn
3b6YV5pz9VpKYUFmS8O95spbD0uvVeQkNN8796j4dGmme+55+9uX7dofBvCZ
hVpViVyRrlSdUylTJILTElYCEF0AwiuKpTMLb7zYA2H6xWSwmiSd8Od9doEs
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
EsURIG8GmtNyWHarpaBMCvLlqi0yWapckgKZUrpJqdiigVPHWUCSoZyOUYwE
LQz6C4UJM8IEqTQNklog3Qz5xoLBUMlwmHw0eqbHd6LbW9QXqOgLlXR5y565
gxd88MxW84AiaSGJrtElN20Vt12Ut90Vt9zAY1/JLaeZ80wI1fmLDlC4OnfJ
deac7ewFovgmUXKTLL3FEN1ijl8gjV6wEd6HgE1Td6co3qbLe7Nk/XlgshLM
1ylHd6pHynpuRrQ2unVfywCT1+A5C2Bkdua9BMxOq+YmNHPTQCAAC2L1rEo9
A4BIIhHJ5JDL+wenECp/AAtJrRr2gVWw/orUcOWgQAmEcANSjUKklkmUYrlK
DLvWKvjoqlw0qxDPKSXzKrlIpZRCnH6hT6WWqtRiuGxJLYbuF5VavnhcXfEn
tv9FLviPwH5hVqlYPDMrn4YWB83sm5HOc32PGpWfWsBE27PLpdtiuUidf7HQ
umQrPXsagUMl4VAIDMLcwkDPWHc12mwDk2TMIRnQkUvDbFfvTaVeKHA/nspt
CCbXeeN2u2J3uuIKXa1L/OiFQYwcP1qWPy03mJkXRN/qQ0x1waS54yFtzfCi
JPPxMTxshAMG8of9OUgfFtKbjfHmYt2YGEhMbUlmjjQEj41ytbN24+L4HGtf
J3qYh62PA5WDN+PZIO3oCC7dwsedSsCvKyyK7OtvffvmzItHO4ff1w/3NOws
drE00iJgfiLhfkdYLrGwWIbB65Lopk0ndu2pz9lTn7HvUGbdvnTIJd67J7ey
YtO++uz2p4ebTiZs38Eu3uWUkE719MX6h3LSsiJTs6ITtkT4R/P9I1xCY90S
E7yrd24qyY7Mywwozg4p3h6escU7JsM5YpNzcKp9RIpdcCTdxwNVmheSEe/s
40v0iGElH0j02RcVeGaTy6H4wKOZhdd3P514qgQzcJno7CDkVs2A/lFFh2Ly
EXh1Gewv6I92a6Jp1wWZbykiJO5n5hx1qj8X+Oxelryvqfv0tp6LpeL35yWD
N3oeHh57eQ4MPFG/uDF9+cj8tWOyB2c/XanrPV0qbz+qfnxE2NYIPjwFimkg
/6xQDCs0I0pVLwDdQHIPyK6pFGeE6mNz4PACaFSAY0B9Gm6lDk5qQKMG7ANw
MqoEqPMBJKnyHCDIANKtQJkDVNlAkqaajVGPBklGAsXilBlBkmAhWSlMV84k
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
SFqBWATEc0CyoJFLYNd4kSbln/ZFChd1c3FWjgaSVFhhFeppuXIGMkgivwSz
/1tgFXBBBQws5GBLFWMS2TDc7kk1AJQ9QN4tGmrrfXjs5dX9e7dFVm8NLUz0
TPCnl2b7nm7Kunmj9PrdsuYbWzeV2dOclmPJaywtVxjr/4gx/dXNxizTj1Me
7V4V5bbNmVToTi/woKbbo2I55olu1gnehABHqyAHdJynTZgj0Z1m7sdBhziT
IFSdqeahrnBjf197EhOtjzNdQ7HSoSD0UIarIGA5TIw9Cw8B68wlQ8a3pbrb
00lIAzbVkkUxpRH1eQ6o2DhHKCxtato2PnRlfvzG4PtTwT4IpPk3OPRSM6Mf
DPV/JBENGEwk1470rO2JfF4IOUJ975+PjrwVzo+Njnzqefd+bGxgdr63ta2u
oNhrZ2Voz9tLb1+1dj2903Km6UPH/cG3T0+f3LuntiAg1HG9wc///FlrpeG3
LuE2HukOnCSmR7mPW10g70BQ6K0c3oV07L4AdJUXpsSZXeaecSkr91a+S73P
xiIioy2a9jqJ+Dwae97V4bBz2ZWkafBEBBYHYE28+Xih4VAEP8RiOWmNlq6e
1lcIra+If1uG/8mSsgFpthapt1Z/9XIfB8b4mxag6G2r3XQowflsmufhYBZo
Pz1Yk/k6K3gwO6w/0etDjGtvovtcZaLkWK7qUmV7XmhbcZxy8D70t8jB5JRk
dNFxk8ClqmAOgEkVGJODEYUG0pdPQPYJiPslMy+FoiezU1ff3i+5W+t30s8o
T1crd73WQfayU1GIF7VeE5fS3tV6PYpDX/DcUOexqiFU71DIhuuZiI4yeAac
+KoXeJcCOoIVz7zm78In1sFLN8UjR/FtlqaNp2xxHm+i9O/FfTpIH6qndpVa
dJWZDe3HDu1HTRy1/rjX6E259sdai+5yo7uZq26nbXiYbXkvG3s9A9kUaVTu
vnarw8pM+/UZTgZZXthsH0pBiO3OaI/KGK/SULcdgS6lgbyKYHZVFHdvmseB
vIjDFelnD5Q8vHK092lLX3vLi2unHpyov1CdVxDu7IJaxTT+wZ20Lsodk53g
eKAioe1izdzQI7jJkmZcsTAIpNNAA2/gCGYWFmbFwgWVSADnG4BUAiTzi9us
kkWA/xtoUIALOcxy+KANBKxaAIAACqYgyqBgdjGeXfjiDy/SqvgL68q/5of/
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
jdbjstAOdkS6DTIqztcn2InCsDSzXE0jm7g7EmJ8uWDmvbDjxons8LJAGNhj
qV6NsQ57/ElHo5hX0njnY5mN3pYNfAMI25tR+JYo3J04woss247tzof8LBPQ
P5/c6jf/4hpcWqwSihfGhcIpaIleTGKIZOLPkrmBhYk38I6kZmR6uF043QOJ
78zMkAYuGVBK1bADLYKW8slRoWBm0Q1b0MjGP4091Xx+PllTOZqRCeprwYWj
iltHxppLhkqjB7PcX4SiT9r/XOP0t0vpaz/WEj4dpk3fdv7c6jDR6jjdypu8
5TAO3TzzlvXGgqk88DFHcy1Kdijwfqj5UbuVb8q8+w5EQtiejiI2BJNrg7jx
ZKsQa0SGIyeDx97Mo5T6s8sC6HuibA+n+xT40MMopvFsTKwNIt2BkOttlx/A
y3BlQ7T6kpHQ0htpT0t2t03ztI1xJIfYoAIppr44fVcrbR7KiGG20R5t5s2i
8Gl4kulGvKmuLRHJsjZxZiCdGOZcso4N5jc+R2f4zRkgfAtv1sgVc5NjX7RV
opqVwqm8OYFmckE1JdEsyNQSiUwsFELy91dgF51n9SKnavX/YPYvoer/5qFZ
LKySw+hC4j4DRB/Unx7Nd5x/2Jh7u2ZLW23uzdrtd45UZEe526DWQy4clbAR
Wvyt0HqQg4fFmZhb6pBplrb2GGdnNJO+3tzoq4x4ZlWhf5gbwpGw2sfGiGul
w0Kb2xIJ/jx7TxadaWXqzaamBPBDnZgs5EacwUou0SQl0j09zpdni0Vbrcdj
9V3saD4udp7OXA4Nh8eYEbDmJDwCh7Owxltg8RbWBEsM0RJNskQRLZAEc2jR
IOJ1cegVGKuVGMw6KIaFvgMBi2NgiCyStQ0BScW1Xjh58WT90UN5++vSa6oz
qyo31e3Oaty35fTRpFNNkdW7fOv3Jhw9WXXk3D4rljEhlMgodQ1oy7K9k4m9
EKm3mxf+vJR+KHRNns1POxirDrsbXokwvx1n9SDJ8nWmzvAW7aGt1u/zXLvL
9Ut5Wqh//c3oOxO8AcpKH2Wis3LpN78t/ZeJ2XoUbqOuwS9WViu4NkZE67X6
pr9AwDI4CCbDAvr3oq20iXgTFhvLsSeYWG1wcqP5+HPNIS0mGe/OTwJT73qu
NZzMCd+X4H4wyeNgIn9/lG2lF77WF98cx7mYZHc2ino8EHPcz7LJw+iYp/GF
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
1Nr1SrMaUAmMsVorA2YYQVkIxkUVAhkhQpUIOFOmwgGtYlzW09U/OAher+c9
Qy2d/b3tPQMDA9Tz5093711+6eMP2nvudAw9+u3ZvZ+a799zPV9yft2Op8e3
PT9S/9FceYUmKJ4/wcFgOEV/C37jvfc9fN/7O897HHvSOM/Rb0wa/ybM8FdL
OVJJYCBrjBgL1tthBUisKrZaJwTJWq8TaUkuAdMxUQDO9yNEgXqUZdEIDXqR
WssFlhgW+8kE/riUBryDHGWbjWhA4GiB0M9okEjYXqmRmttXjmyYWdpYHFef
bpuSbJqd7VhQ6FyQHw5qeUn02sr4HTOyD84t2labMj9Zv6E8el2pc21JpHun
PGpumqHYKiwwCybHq6akGkvjNdlOsiTVaiY5Vp0Y0Ap0HEVocbG6upq0sjxn
RoIhOVqdGqsFlRRFxoXjCZGKnBRTbUl0XCgM88Yh/PFgKxP5fvXtjUWrF4tJ
yBBrWbyracPRzRxxgEkh0AR7Wjk+Voxm0DBQnb+UnKiEJ2jhiUrMG8e9uNy3
3uR5eKT6jNsWyjiTxd2XxKrGVVVq/RSDocGGz3fQ6pT+9aR8sV1fSUhMniqj
X0EaWZ9pbUiyN8SE19odWaS2ITm9Lik5HpPYWV6ZaMDcKGhDkW1mgqE8XJWI
hZjpYy2MsWnykOow+fQEfZaaW2SB0pXcOIyeY4LyHRigtTbRkmOCi+xktlke
p5TEaWXpYZoEB2lRi0xaIYc1BsN9pMh4KTpaKHvr8o01LztO/3hn3ocf2rZv
IY8dNn900vrp1agHvxXf+7lg+wZR3eTRF8/GU9SBJ3+uvXdv3cfXZg0PfkYN
3HN3/+59Otz7rLPt/ouXd9u7ngFm+4Z7+oZ7B4b6B4aAex4G5epzN5X5d2c7
DbmbXgCP2OrqfdD+8JPmn08PPjjX8f3Bbw8vPr60/MrGOaea6vbNqzi7cX5T
TZoZCmIGjNdr5AjEl0rZKrU0OOR9nuj9+UtS+6jrrb2HnzZv6ezdOew60NO9
o7NtW0/nrt72nUP9Bwd6j3e2n160KF4keVtv4hIantY9dV+ptWjUVo3GptbY
CY1doXWQhjAjYBNwCsoYbtaHGsHWGmUHPwKQCaMSbAGwYAdWoSCuunMrxpYh
bETOf6XUMlSDyfWE3KBCtQSsxHu63N3w+odb+lytzZ2tzR09fX3UvXu/r984
95ObH/YPP+gYePyw7cmD3panVOeaT3dteX58a8fJWZ8sx6aZ6cVy31zMPwvz
gMe+GzjKN+A9Vog3i+1D4/lAKFOHi+RCmkQcEMwcI8Fpr4GFSaZSy3O3k9IK
9CRXhYQgAj8AoITrDQv9YCiAxRkvQwK0ah74hJjUYh3BR0U0FmMiPXicTi/T
GyBYFgR+qzQj4qOdK4tj9LPyo6ekWCYnmWbnRi4siW/Mj5qXE7EwN2JVWdz2
+sxD84o/mJo2N1H7QW3q+uLIDWWxTcXOOWnminA01yTMs4qLwrFCpyInEi9K
MpRk2GPD5BgUKJX4iyWB+UXxTatm5KTbwiwSFR6sUdANKpaODDGquWEWKN5J
ymUBiMgPFIkxbEapTsmTK3grNzc1D3c2rlrIRDh8nSSuNJGHMeUYRyOgJRnQ
cIOEKxjHQrz0TqnJxAsJ+htIQHzB+2J4or/k3XfRt8fH0UIazfjuTPXubNny
CF4VIapRIvMs3Dn64FkqyXyzsBiRJvHxKBaq9Ya4oxx4QFW8sS4tKsemj9cS
GTZDXVbC1OSwKIl/KOPdYh1vSpS2MkxVZILTCW4418voPyo0ZGyyLKA2DJ8e
pym2QMlyZo5BWmBD8+3y6jhjrhkpDiVyrViSRpygk6SFykFSAHYCFo8n5ZMg
ydsMpkdMHLOyVnnwePWW7SknjmadPZ7x+O6y4Z49FHX0yL74OfWi0ly/UKMH
JvFYMk9NDZ/vaT/2+P6OhfNM06rUgy+/Gn7x00jrb1TvY/dkJKoNBLKWjkf9
ru7+kd7XHd5eKaw7jroG/u3picODr+YnD7VRPX+03f/42e2jQw/P9905fuf0
qpNNVadXTjmxYtqhpVOu7Vq+s7EiVisShUzSqdxLPcIQS60UBQa/o9YE7zsw
o2foysNnO5+82No7sH945HBf796u9l1DPQefPljb2bq7o/Xgb7/uKCnTMLlv
hjkJnVXuRtWiV9sMr0qntqs1DhUotV2rCzXqw0wau540q0EUJUwqpUWjdRjA
EXAm2Ac8ypQIUFtMDaM4D8gr2JIaSGXAyVdf6IATNFaD0qRV6FUDfe4mskOu
liGqvbmjpb27b2CQ+vH2rc2b5n9/6+TgyMOXnfefdDU/Huh8SLWsurFjxcMD
W/rPLfppm3x+BH2qLqBW71OhfsNO8wjwGOX9N6bIT2VDcRssJEKk/AA+fQIA
FidYWpOE0AvctOoEGoMQRYIhoY8cClKjTDXOUuJMHGOIpf5snidwF4SSCewo
M/Bdpv/7Uo6PVi6wGFGJKEgoCgSRPCFWDy74CVY5AHZVfXFVsq0izlSVYGnI
cS4qS15SnrSwMLYxz7miOHZPQ8GJxZUfzi5YmR9+YmH5ylz7miJnU0lcfbK5
wIbkWiT5DrQgHM8KRdIdcEakoiInPNGpZNPHWMxIATC01VlcgQ+QFVjkRSAB
JBoItqCUGA0QKgcSLAuOCCUT40wRYWolIZLBLHuk8Zt7P+w9c6iwomBqfY3B
oeVKQ0QoG0Y5BlKswwVylAlhDEjDxk1CuYojk/qrZEEC9jiGcDyXDGSgk94X
jnpH5zkpR2rcW6jYmcGYb/SqkTHn6uDlDuFsLbNCFpTOYSRz8SxEl4FBGn8m
601YONahCmmalZ9ghZR87wSDrCzelmdXp6jhbB0eC7ES4JACA1wXo5sSrkyD
aXbau+aAt5KkfjkkK5NkJ+P0TLUg1whl6eEsA1RoRYFJztCJ4kh2tIodY+BF
m/hhemZMOL8gl1i0IO7Hn7YOjVy+fWfVN7cWtrXvplwn3Yv9UZeokYuDHWfK
csUWzZhws48SHWU3eGUmCwY6L1NDNzpeHt6+Po4T4JHrFN88sYkafkKNPOt4
frvv1RQpEG+HXF0Drr5XrY+HR4bcvRj/usfu3wIWCPLgq/v7Btup/oedD643
/3Sc+vPyyB/n7l7YcGb15IMLSk80TTm7Ye6N/asOr55emWIxyvlqXKQnIQ0p
1ShFbPaYnFzDF19/0N1/6cHjHS1tu3v7Puzr2T8yeHio+xA1cLzj5Q7X4Mnh
/nNffbk2MUnK5LwdGqmxRBhJo44wGhQmk8JkIM1uNkmLirSQqF6hMKsApLie
wHQKuYEEBfbBCYBWwCx4CmirWC4FwMo1IEXThWIahHIUGlhlUCi08r9Y1rjl
VapARgb6+/sBpo97B583d7zsG3INDVOf3/z0yOGNDx58Mjj8+OnLX591tTzq
7fy56/HCC5um/7h13dC5lU8OEivi/BsMnjOMYyar30jkuu9s9fLw5o5DzGK+
nusnnMALmYjy/GWSIECZzijBlWw58MMGoUYn0Gr4UsEkTBKgkAUTKF1BsoGp
kJAstsyPxhrDF3oS8hCTWmAkhQopXcLx4zO9TQYEWAWAksUIySVBi+uKeh98
t7AysyjaUBJrKk+w1mVELCpLXV2bs7IqbVFhzKqyhA/nlgCF3V2Xtaks9uqa
+kXJuiWZtqaK5Dl5zooYTZYVyrbChZFEboQ8ySqtK4qeUhxr0vD4HE+Q+kH2
1xpRGcoEwMoRX4OGbdJxwdao5eiUbPDnOayoQs6GZAwpFEIoJQgmEEPcyCRn
JzW4+9SHq1Ys3rJ0qRWB2Z7jDARs1GMozmfx/CUwyxamMVlVfBGDJ6BZ1Gi6
WacRM325E71gXx9FwATJ+Ansd8eK3psUxZQti8JOFAbtiZuwkPCuFePVePQc
R+TiSGGBjJEkUJab9SVWtpEhICfFJskO7Khd35g8u9CQZeNbYZpTLU+0R4Qq
NNWxYSUWPFspylcLa2zyWdHa+QmGBUmGFIlPKhyYgYckwkEg3qaQ3HSNNBZj
ZukFKWpmipqdbhKm2YSxRnaENtiu8zuyr56ivuvvvXD0WFlFFefURwXN7Vso
6tBw9y6q/3DPi/2DbR/99OW2MANNBfvZ9SKZ0FtH0lW415/3TvS1n+tvP/rZ
lVq70kPJ8ojE/Jvqsv784QLlejLS96D55Z32rodDVMcA1fP/Dqy7u/LIIDXQ
Tg3+2ffkZsdvZ6gX16knV59/tvvjbTP3NxafXF135YMlFz9YfHh13dIpWUnh
akzKNGsRm0nhngcr9V2+vOTFyys9vZcePdnVP3i8f+BwT9d+ivpopBf8Rw5R
1DnKdbG77aOjh2dERAgg2F9rJhQaUmEwyg0WucGGGcHWJDfq5Sa13KQEwILt
6x3cSCptWlBgB3CqsmpfAwvSK0ASFIirbH4Alx8gljExpfT1gJVEAYHoKkAk
XEjIEfGGBns6Op6+aPm1vedBa8cz9xzt4eGrV85furi/ufnWsOvZkxe/tA92
tgz3/NHzbOXVDyo/X7Fu4OyW9tP6TRn0JWGeS0PfW2AdVUWMiWD9jfnW3yZ6
eDLeo8l8RCRDq+IbCB4sDcZwlgylyUm23gIRag6p4sbFak16iUbFhcX+LOa4
EPZ4HuzPw2ksyBdRMKSyAEjih0FBIMDKIbqOFDmsClaIp0YrNRogBKJJOd5Z
scaze9ZNyYwujDKWxVsqk+xT0yIWlqasrytaNyV3cWHcuur0/fPKttSmryqM
XlXkvLpu5oxoYm6qeUlJwsLSpNpka7JenKAR5EYQORFEtE6QFkE0TssLM8lk
Ij8MDQH/lkAUDIC1mCEFHiQTTcKQQLX76ycaBtNwhG7QyfRamCQluEJsAa+8
lpBAwqjEqIVrlxw49eHGVUsTLaY4pcooFDI8QUrCBBBLRojAuwBjIhgR4rgE
QUVSYQjBoZsVEKSXTkKCxkN+bJKLyflcSeBYxGtiith7WRj7ULb0QCZzkUFQ
LlNPJuHJqLQG5+fJeFmoJE8tTJRpU+DKGRGLFsSc2Fv15Kddd29uXTcjvTTa
mBXhiFKrypy2EocyTSWMlQWDxFobpZydapmRaFiS7wTb6kgiU8138CfF4axs
AxKNMaNxuhMNTNZxy+KUVanarAjIqaM5VH5bVxZuWJaeFk+Pd3pFhI76+stZ
wAAP9u3tbdtBUef728An+dOTB2fA/PdQob9ZgzrtWvBO6VS0508uDHRfHOk5
9dHRvHTnOIG3Rzjq3TQ9+ZfP91OdP1D9v430/0ZRT10jz4dHWtyd2Ya7Xy2+
M+ReLG/w35wE9RpY902yndRwc9/L79vvX3HP4n55s+vW0a8PLD68sPjc2vpr
OxcdXztj37LazY2VRUkOKdsPABseqpErOKiCtnv//CHXt50dZ5/9udO9cuLQ
8aGugxR1ta/zxMN728+cqN67I3/t6qyMNByGJ6l1UqNNj2mUpMlCmGxys7sI
sG82A6lVmHSkVaeyg60GMAv2deEWTagJsEyatW7nbNO5fbKBwLS4TAmL5SIB
xAEFYRKgrWoTeIp0D0apMQEq4sECtpTb2/9yYKilteP+i5bfm1vvu6iOrq6n
x47vuPnZ6Za2X9u77nf0PG7pedY21NY82LL/i6MNX6xafH/7Kdf1sivz3qnH
Rq91jNmT8OZSy6g0wZvw2FETPQJ833p9szx4v4C8sjleUphGaNxfvIICOitD
GSqtAByUyAKlUDCE0IFLlOAMEUoTyYKkMneEBEEVltEkQn8Epms1IoNRBqiX
SINQhKEm+aygMUqYsXvDwoq0SCCvxU4tsMTTMyPnFyWumpIHRHZerhPo7MZp
OetqM9dUpi7Od15YP3tmknF6ognk3Dn5MaUx2sIIdVGkJsOGp4eS4SpBRUbk
slkVmQkWWBigUQgMWgiF2SjM1GkBXMEgXOMYXUVwSIKtwLmEnIejPLNRTuBi
vZ6wWvQ4JpNBoqYVi48c3ffHg5/qp5Rx6f4GOaJGpRIuA0eAYRaIpSwI5oql
IQBznR4RSehcgZ9cKZKRfLkZFamkuJFgiFhjPccpjOoAOd+DN87DRKfPdhK7
irGdOfw1MSGNBuZMxDc3UDWFIEpRVhrHMsWQ3RBR15iwcHHi44dHh4euU9SX
Dy6uODY3aXOlbcPk2Clp9sJoU1YYUZKkN8r8VIKJZSnmFAsSpxPnR6kqkgx5
kXKHLEDHnhgBs8IRVk4YGa8XRSgYsRouCAvg2TSTBPyYZBTphZ56ydgw9aRw
/YSe5pODPacHeoEfvtL88kBv15HBvlNL5jvEHA+LBmR80mIkReIgg4X96M8z
T58e7O8+dfJgkYX0cKjG7F5dcO/rnR0PP6IGv6WGfxhpu0n1fjfc+a17rtTQ
w/a230aozn6q52VPy8C/tHUb+asG/1qIZ2Tgr7vgXf9C618TMkaokf7BwfbB
/udDvffdi2B2/Th499Ivp1dfWFV1dkXl5Y0zL2yec2L9nCPr5zdWZGsgtkYh
0hgQusg3scBx9sa2PteXTx7uoQZODzzd7mrefevj6RdP1Oz5oGDWLHtuLlRc
qk5JU+hNXFItAMYV08rlBg2iVaM6DabX4gbgjU2AX6XJrrTYMJMWt6jkFq3C
qiNsRtJuUtvNoADL+ggrMMkah07jAHlVguohhpjhTQ/kQDKVxSrCMWCtMR0J
iObAvBBJCFvG5sCs3oHW1wsbuXPEcLOLamlr/R344fsPv3a9GhMYdrdf6Bii
ujpHWk5+f7r67JzGnzcc67s07ctlXgsNE7Y739oT67FM/0aOeJwx0Jc1OiTg
XS5jgoA7SSoJBGwKxP401ngJQgO0muyYxiiVq3gCaYAbUsRNKCiw4052GAOc
HxjwLgh6OMYUCnxlMB2AL4aCUDkLoA2sNdBrJn2ciO2dFG04vHtteVZUigXL
tGDlMYb6jIg5+XHLq7OaJmfNy49tqknfMC13dU3GioqUJSXx5zc3zskKm55q
m50XPbsgpiRKVxpnzA5VplrxRKs8QiPJibc0zaspzYlVoiy1nA/ijEohMuph
SBokFvlKxH7gWgE8MKng67WQ3UoKeIEqUgKA1anRMLvBbFCScmj7ltX37906
sH+L1Uwwgr1RGQ+DhaDUagyGBSJRiEhEV6mlfIF/MG2MnOQKIX9bNGGJIdRm
CAg6jgiUCoTDZtDZtEA+3QtivCnz94DHvxnPQ9dlGI7XCDfGTpoioVXwJIVC
ogTC8iX2KlVBfdjmnVN/uXOkrflKX9/1+7c/+P1s4519tTc355xbnbWoKrI8
0zilyJoRJ5teHbpjY02Mg29SBpNSTzU8SYd4mrBJRqmXTuQVIWcn6JEkmyJC
LTTBwUaJnw0OCsMZYTDDLqXrOH6JGil40dLDZTFmel/LRWrwan/vuRHXjda2
k93dR4b6j69d4UQlHkYV3W7EFJgIXIqV+qCf/zg4MHSxp/v44T15ZTm8TcvT
Wu6foqgf3DX0NdX3eef9E79/uZ2ifur881pPm7sNyDD1on3gSS/V3UP1vZpQ
ASh8Pa3idavyV80o3MAO/u/AjoAHEOnenqG2vsHnI/0P3Qu1P/704eUt1zfU
nltecmVD/dVt889sbjy8rnH99MpYA25QQVoLzoACGjfW//T0QmufW0+p1v1f
niw8tiFyUS0ysworKUZj47mpGXB2gTYukdAYxaQGIkAs1SkBWahOBQozKHGD
BoTZV8CGkmY7gFRu0wBaX5WJsJmVVrPKZlHZTEanHYRZQKvarpSqBJBaGCwI
DOTxWDI5YXVAGi04U0wikBrlIlwWFCKSc2G1uKunvX+oe8jdmKe7o+PP5hd3
Hz749uiRTQDYJ89uPW/56Zd7n33/y8ef/3DhzLUDR785NPn83EX3tm5rPV71
1VKfJWa/HbFjdsaNXR8xoYJkJsMCks6kj6H5vcthe0IoE9MIAYwB9NGAUJ1Z
BmgFpTZIAKSwnAmeAsd5Yj++xF8IBYKDgE2gp+45yXwfswkGSh0Q+B6g2GzD
FARXrREBYIU8HzFnkkbObVowtb4szY6wo5VCoJUgwzbkxiwsS11anT6vMG71
1Nz1dQVLK5KBpC4uSzy1Ye7cnMjaJFN9RtjcwgRwfm16WJpNnuYgYo1IlF6W
5tQtnVWRlexAJcEKjAM0VEWKgemFJDRw3UAxJoZzXiVWOkG6788FgVqu4OFy
LihwRCAMYLG9jxzdfujwVrlC4OX9NorylEoZjosQhI+iArGYKYGYfGGw0Szn
iwK4Ap/cgujQcMwZCSVEw+lxirIMc6IFVgsCFGwfmOUDiwJDuJ5jWO950D08
xG9NShaSS+KsW7PY01X8qcQ79gnsBJY+T54xObRxacGXN4Ec/Ej1/0gN3T68
qWLdzKh9C1PObyj6bP+0xdMM65ZFrV/hbJgi/+ho5Tc3l5o1b8eG+1UXK8vy
5LlJouRwZow5JJQMjNPzS5MtYSqRheDp4SCVyJvkTVTyPfWiALOEboGY1akR
S6bm1+aFVufrBrquj/Rf7u3+yEV9OjR0hRr+iKIuHNpbYFaPNhLBFq1Up5Ip
VQI2/80zF+YDFaZc5z6/2vDxR9P7Xlx+tYLeT1T7Z66Wa/1PL3x7ceWmRWnf
Xl0/2HqTct0d6Pl5cPixi2rrpZp7RtqHX93d87oR8b/64deLVP53P+z660nw
FIjD/a7uweFWauip+7uk1m87vj30zd65ANhzqyYDYC9sX3xs3fxzW1eWJ0e6
hwSNMGrgH7mytXn4646By50tH7b8sWZvk7Eux7802be2BCorIXMLVClpWHq2
2hmDq/RiUg0TOgLXqgChblr16n8B1kwabaTZqnSYSYebViCycosRFGkxARKB
yAJ7rDAqtaEgySplKqFIzgng+tFFAhaM4SYzajDIjVo+KoI1qMIg19kIS7g6
LMbY1dPZ3Pry/oPf79z59tqVMxfPH75x7eT+fasXL6opKYsrKovOyLNHJSgh
ItAz6A2hnVl7bu7yx7tWNx+acme9YFtiyJ7kCZujvTdEBTSYmbkEnQya6PN3
H69/uDvSaIWoXsyXBQIqAZsKNV+pE+FKLtjRW2CUYMvwEAApeBYA+1eJ/Nis
iRHhSpBVmayJgBQAKTAeVoc8PELl4zsK+GS7BfOZ8HcB03PdspkFyQ4V39+B
sQqcuvqcqBl5MXNLkhZWps8vSVg/s2j99MLG4oSGnIgFJfEHVtTNzAorjiSn
poXNLkoAxm96fkyqXZEdpY0xItFmtDTTuWBmqc0AsxjjAa1KlUhBCCVSBoJy
FARfqZKALaBVKAqEZDQQdoDcy5BgBKMr1TyVhg9yt1LNffzk+6XL6kPYXlye
v86ASqVstw2GOCDncngBMMrlCQJROQfB2VYHNnlqdlqaMSValh+PVmdotjbm
VyeonLLAZCU3Ws5ScSdyAt7i8icIyKD3Be8AbN/XTRKXqh3r0iI3ZwVlCvB8
PCyLbJiVdvXiRqr3B6rvdv+Ta3eubDy2seLi0TnrFictm2q7/fGi2TXieTNE
mSnv7dvp/PKTKVOr2ByaR3Ee88yxqp+/39Tbeun53ZOXjy+fWRFtU9CMKIMQ
B5EyugahaeBAtcRPJfbVSoL1Uka0Ds2JMRUl2XMTNcvmZ/R33+hs/6i7+0xL
86kOsNNxZKT3xJG9BRbV+yTkrcaBTfBGERqH9/c9+yvb2o9QrtNdL/ZQ1CfU
4HfDbV93P73x29f7922onJxNxuh8teK3Jmer/vj+EOX6rfPlN+5FN6gX3QOP
+odbhtxDx8Ova3h48J814qbyfwxI/QuwI+402ztCdbxq8whE9o7r/uW7H60+
u6rMnWTXT7+0bdFHmxbf2Lt5x6IZ2fE2Ps8rIlH9xa8nB6kfW7pOU0MnqO7d
Fw4kzS4PmV4qbKjVFBWSWTmq9EwiPVsf4VSQGgAsKlcTiEqJaTV/0WpUgXyq
MGpfiyxIskqrUWHT4GYN8MZue2w2EGYjOEiY9SDSArurC9NpHSqZSsSGaP4c
32ABT6AgcJNJqpSL5DKQqULjHOn5SXmlqZnZsSmpEXl5eampyZERjlCH2aDF
oyINtdVZpSXxILj5+HtwRaMNdl5WoTWzGETpEDiCk7GjcP5vW1Z2HF/YdTTu
y/noySLP9c7xy+0BC0O9cpA3JO97vO8x0fPvCMrCzcALclliX+CBgYCK4WCz
Awe0AjANVgTQ+toVS1H66wIniKSBjJDxgMoop8YRSgBgLXY8Jt4IAi9gWW+A
WMwJ3hP/DrBKcOoml6RW5cUpBf5WlJkfpZtREN9QlDinNGlBVfq80uR1DaWA
WeB+p6Y7GksTdy6aPDvPWRhJVKfY6/Oi02zYtPzotDAyJ1YPaI2xymdOyV/a
WAucMCvEU62BFKRITgiBTZVCIYBZuVwIdBPDeUBY3fEcdS90guJ0GA0mlEyV
hqNUs9U69olTW8AfzBEEqDQQCKc8AQ3GBBKILYbYAnEIIucLJDQWzwcjeEqd
QKUXxsUp50yOnVFozQ0Vzcw0lDqkC7JtTSUxmWqulv6+TuCpx+kymd9E2luj
gv4+Cqgt901pmca6LE43Lzx2dmRqFrGtqbTz0UWKuk11fXb35sanN7fcODJD
rvBIz+V9+0XTmcMlTofH0gWCnPR/zJnOPLA7/OOLBb/+OO+7L2bWlAumVeMz
a00xoSyI+x7L7x++Yzx4tPFSni8k8EdE/u4xfOjVrTpShlLKJMQMLQJSlDci
mrhiSW5n59W29jM9vecpCpjYryjXRZD4Du/KsynHGvBAmxaKDtPV1qTPm5/6
6PHB3t5j3a27H/2y6rdvV9+8sGH+tHSrig6z3lbw3nbqgstTFTOKTRVpxPzJ
zs/Or3f13KYGf+/tueNyPXRRL4f/GoMa+Gsk6j8er9Zt/98GnUZe2edX5vlV
M0Z3Vz3K9Sc18BvV/OXzz3Zf3FC7d272kaWV57fMu7Rt6ak1C745tW/T4npG
4KiGxvzHHZ+6qO+fth4YHjhADe3/4UZl4zTB1FJBZQmakCiJjIHSM9TJaRp7
KEaoJUqNXKFR/VdgSblJqTCqCZOONAEqjUBwUaMKMahBgX0QXQGqAFjgogmT
5tU8CoPSohDiHH+2lzfDkwmLFTazwmrgICKGiGWNslROKV6wZHrD7Oq8nNio
UHVsnDMqOiw83BwdbYuJMpWBj/rqWcuXTnY60dAwcWKqMj3XkF8WWj0jKTFX
xzcFRC1JqPtqeePLD2d3Ha58vlN5vpK2M8l/a3zQ+pgx1QoP1QSPAA9/5liV
VkKGKqQGkRBlYCQHuDtgfcOjNcAYMzgTAb9swSSO0Icr8gUKC1B9DSywxO5B
Kol7MMpkRmITTJiCDdxjaIQSwZk+/m9LxAFKkodDdL1SOH1ybn5ymFZKt2Ds
jAjNtIK4WaUpcyvS51dlAmxXzShaPbMYyGhViqWxInnrgqqFVallCYaSeGNl
uiPVgddkR6RHqlIi1LE2RXy4anpt3qLGySpSKBIHqbUyNt9fLAuRwEwIZqEY
F8cFuJwPmAWyC7wx+PNwBRNoK4zSEIwGyDWYJAKRe8ndsRP/HsLxlWFcrjBI
IuNoDYQMFTI5Qa8mhIvBcRnGUesh8IIAK5KYqFvUkFeRbopWsaoSNIUOeEV5
3PKS6NIwJM8qjddwdLJAfsi4YMZYnozOkAZ7+P/Dw99jjNlXWWNInxu7annB
o6/3upHpON98b0fLbxs/WGDKiBjFRTwaVis//rxm2VLF+nXKvTst1y7n3/62
/ovrVT98Vd/Tvv3h702w2MN7rAfdz8NrjMekMR4yfrCUQ8MkLFgSIhUHiwV+
YoEPLPbHoCAFxCRkHAHDV6cQ85jjaQF/W7++sqfv0+7+S939F9paz3a2nOlr
O0b1nj53uLq2ULl+UfnB7Ss/3LHm0IHVe/fNAFxTI2fanm89uS81O8ZXIR5j
ItjgQgRzxuKc0U4tozRVObPYPr86oiRFPrs6/MvLm6mhO5Tr96Hen9y9oF2d
f619OeLuNfPqQb2u/wVYauSfwFJ/Bd5+imqnXMAV36U6b7XfPvrpnjkHFuQf
WFhyak39+U3zT6+Zf/Pg1qNblsSGYV9/c+RZ2/Vu17V+15me7p3DvR/cu93Q
WC8syQkpyIcyssi0bENKqjo2QWU0wQolpNGpVcC4avWATQAjoBU3EnIT+Wp2
hAYwCwrRKmE9CWhFjX/R+lpbtQ4TkFeL06pzaGUqCUMUOM7/PQAsZlKb4iIR
g5ImYjKEdKCti5c3bN62bMmiusxkhxplV1TlVE3OKStPLytPLciPmlqbvmxJ
VXVVXKRTFheP5xfbS6oinQl4bLoqs8SO2JmhdY6qc7Pr722tfLJ9xsAx/Fw5
50gW80i23/60CSvDx+Yj4yw0LsEAn0lduFIbQagtCCCRxfcGegpsP6ERAFrp
7AngCJPnBQqQC1gGB90lCWBzJoEPDKkUAo0GWU9rkFlDSSkSAiEhXj6j5Bgn
1E4iYpqf51vRDnVhhlOPsgxwSLwFr8qKaihLm1edOb8mq6EkeXl9UdPMoql5
UaUJpnnlKetmly2enAUyWm60pizVkR9nrM5xZkcbgLwmObXZKfbK4uTp0wpA
SgX/EHCzvoFjWDw3s5icr1AKgNoiGBcUrhCgOE8KMwTiQDnJBztGCwauTo5w
lcGMMpjeerNcZyGFMjaTT+NL2RJEJCcRCBFhCplSg8lQPqmBtHqEyfHmCvzC
IzSpSQ6nTRkfrpldkw38eU26PTdCXpNmnl+ZkB6Bgc82gTPBnySUMZlSpifP
DxgYbyIopSGtfG7ap5fWUR03KOrTlw82njuZumu7et0y7tatkrUfijedQvee
Uew+pNx/MGrXjrgzx8tzM2hKxGP+DCXVf2Kw62hOGmPSWI+ACR4hvmMZvn6w
EGb4M3w8J7pHxqTgykkDF0+JNAikAETGRmEOAnHtViUEjki9L13ZMEx909p9
trP3HOW6OdR7hRo47+o5tXlFbLh2YkWGpa4sY/a0krLCaGck88MPS/u6Dgx0
7t6zPhTnekDsd/VyoRJmEJLAJAdWlWWrzDACZmeVhq5sSJ5Rals+K/nerUNU
762+ti/ci1uBEDrc82odrn73DOOhYXdvqFejxiP//L7nXxvLDA/9E9i/2q66
OtzdJwbvA2A7fz1z68zKs+trjy4vP76s+uSKade2LT++cs6RjY1LGnI72756
9vIi8MMu6ixFnaSoQ30dm1cvVRfkMLOzJZm52pRMQ2qqISZOqzcAYGGdQa8x
WhQ6g9JseQ0soNUN7L8wC5T3tbCSFoNbWC0G0qwFT+lCzXKwG2kB+ZQrDQlg
eo3zeYchCjbG2DWR5mAJy48TyEPYpdW5S1fM3LRxwcol9elxJpTrk5Suyy6w
FxSHV1RGVZQ7583NWbtmcnW1MyZGZrawgMLObswDJ4RGIym5Vok2SJ+lKNlb
3fDblppn25uo6/iF8pDD6V77E8YdTZ24L9l/WURwAcEz8xGSp7Gi9mhtZIIB
eGBAKwiwr3UW7ABhBZb49aATeBZs3SNOcLBEFkyjj5fBISAw4gRPo4cABXKl
QATR2DwfntCfIAWILAQSB7NpE+x6NNFp1GNclZQWroNKU8NmlKbOq8kBNb04
cWl9YVND6dTcmII4fUNp4tK6vPnV6WAfQFGeFlqVHVmbH5ObYAk3QJkJlrLC
uJLChMqKNBbbG8ZY9nCNH308nePLlQRDKBMnOKAANQBPAKxSLVWqITkhUpBS
kYQZFe2QwQK+IESrUwjELFwFAVpp7ACNiVTpSSaPAaNSsVQgkQl0RhWHT5ch
PAhmiyTA7Sv4wiDwu6GhxvzcxJqyjDAjXF0QlRKJFaRqppVFFmcZ0hKVYQ4Z
EHFwfQtkeo71f3NCyN8ichSbD06fNifs9JEpn16o/+xKzZVLBdc/yztyOuzc
xzHbP5Rf+i7pyz/yPjyjn7M4ZMZsZFqdeka9nc/2eP8tj8SoAIq60ttxfN+O
fAnXg+E3ihcc6DvBj8uQMoK5HA7PP8iLwfMFVyoZxgLXSaGULhAxhCIWLpfK
CQktZAJw/n88vjhEfXvvyYHW7jODfTf62oEn/5gaOLtilgXleERqOeFa+NUd
eQwe12PFiuiRgWNU//79m8PC1G+oEX+HXmEgpQZCAOxNhlOZHU3MKo9uKA9f
1ZC2eUn+2sb0XWvLfvlyN9X3LTXws3vRjcE212DHyGDXyEDv0MDgoHv+ous/
gf0vnaD+ZfT4L5MMgO10AwtibOettrvnfvl48429886srj6yqOxgY8mFdXNP
rZ19fseSVXMK7t4+6Rr6hqI+e/Tnlv6+3YMD24f7d2xaby0u4uXmo3lFpqRU
bWamLS7BYDDghArTG0xqgxlT6xQG438Ca1YoXjH7Cti/VFVlM2kcFrXdrLS5
nTBAVWUFrxGqD9XJlBCN6+/H8PIMGC0hhPb4MJkef89njDfDW0YIqqYVNi6a
2rRixqol01KdOhljYnahKjpRlJaJgQIufVpd5KIFGSmpqFj8tlYfCIAtLIvM
KQj7P4SdBXgUV9/2BycQd1l3d/fd7Mbd3d1dkUASggUSAgSCEyQQ3F0LpTgU
aGkLtEBxCMR9vrOhz/u8zyfvx/W/htkNyZWQ+Z37vmfOOf/gSLWbn0jnz9cG
sZKWx9Q8XJ39tKno07aov1Y57g7FXcq0uJAMbdA7bAknLPCCyNMYEpzOIAgM
0vkGKAVSIgAWHL+7X3ACsP3+QAe8A4zxd50FHxJKiFicNRJlDnwp+HQgXlIl
QyAh88UkR8RsBhslllDYTBQWZYFDW7pr+aW5Ce5yppSJBvEq2k+VnxQ0tyAB
VEFCQE1BwtLqjKrM8NKUoLk5UQ1lKaAywg0AWKCw1dnRmZGeuQkBYrpLTLB+
4Zyc6opMg6uAzkAZBVRAQhMdcBRntogE/LxEThLLiOB7E0rIQGplCrZMweUL
gDfmCkAWF4vlcjmXy6fRGFw+j8GlgQGTLaSLFDyuiE1mEJlsmkwhxuIQWp1C
IuXS6VgGAwMMNhiVlUou+L0D/Y2OBd4m3dtTUF4cFh0uiAnnpifJkuMEeq1j
dCRPr0fpXLHe/ix3X2RWKfnExaT9+4J27fS89lP25esZ5y4nn7uaduBs/MI1
8tr1eq9Y09OXK37/o23xIu/UNGZWoTwykWfwJPG41rNmQjER1MHek/DY2b9+
3+Ktt7czg5ysLCg4hrM9AU+gInEoMNQQmAgqBwOKxESSGCgwCoHRhsGmUBl4
FM7K4MnpHrjXPXTt2/DZnqGzMHwHHroGD5+DR87MyRW4Ckx8lQSQVDy1AoOG
xmVPb24O/fJhGzx+4OC2ML0EkvMRUh5NwiW7qbhxQbr0KPeCRK+agrBlVTHr
Fqe1t+RvXpmxZlHszrW5j37cBPc+gPteDHX/Odz7ZqLzHfC3YwDY3r4h4/K7
8f+2ePZ704F/dfoYn2gNAuR4zHiHqnds5NPY0J/jg78Of/rx7wf7bh5YcnJ1
ydGlOceXFXXU5V3Z3nj32KbGyoStLcUjvTdGhy9/+9Y5NNIxPr5rcHD76jWG
nHxGSpogKU0bl6hPSPDw8BKqVDylRqpUaVSu7iqDt1CtFbtqxXqlyFUqNkgk
epnMTQGUFNSEwmqN8xXdXZUeeqWHTuWuU7qrQen9DEIlTwbiARVh5WQKSuer
1vrpgbZOsZjCkTPpXHx6dszceXlLG8oWVGVE+akkFKctu/OWNEcsWRHRsDxs
bo13bX3w/Hl+MdFMrc4RXCe+fozQCGlopMo7QKr15KncGWyRrX+WsuzM/Ly7
DdUft1QNdQgvZ9sdCTe/lDTjWJT9nkjLOSoIDdngTXhslEJA9vNXAkkFevr9
zpJQZkTgv24OA1qB7AKHDI7fvTFfQAAKC+wikDPgq9l8HBpvTWejSDQnF7Q5
MMmAWRrFiU5xMqi5wBW7SpkiGgIAG+wujfJRZ8b4lGdFFSQHLyxKri1Ozov1
BXo6Py8GWOV5udGJAaqUYG1Rov+8vLjkMEN2nJ+Ugy5IjwDA5mXHAGB5fKJU
zuQKyXiqC5mJ5ojJCi1dpiKLpAS+CCsQk4BD/q6tXB6Dx2eBPwBVqUQJ4KTT
wJsCKpvIEBJoHByRjgZSK1MKRFIO0F+BkCkWM3k8ik4jcNUKZBKqTssGeZzH
IdCpSD4PExmuSYhRF+d76dS2BTmK5Fh6qL9LsJ9Dw0LvpXUBbasTzh6v/fOP
Ld+62l7+Me+3n/KHPq7qHdnYA+98/rHlzI1iz5jZLE/IlAnJQ+3v3dv0+tdD
9dXh2Zm61CJ9aJpMH8iX66k40rTiUreR0VPDg/v7evbkZ/GQ9iDDTqcSaI4O
CCIZhyI4Ion2WKozkYUERWAgiUwMg0cBIw+Tx6BzyUSqs1+QeHDs8bfBH770
HvvWD/LpzdH+K/DAaVAV2QItb4aHBBtoEIf4aP29RAqZ1ZrV0d8+74JH9u9Y
6yumQXy6vUzI1iuFgd7qlGifzDifrFiv0nTflrr0xnmx65amdm4sbV+dvbYh
5kh7xYsHe+HeJ0ZxhN/DIx/Hhr6Mjw3+M6HpX8D+w+z/Aayxebtxefyoca/p
sa6JreBfwgMPPz8/+eRc69Vt8842FZxYmr+vIfdQU/kPHas21mU1zU/85dbO
we4L/X3HPn3eMg7v6xvasWadZ0ExJy1TkJgsT0jUxce7u3uIwEirVMsUSrVS
56Zw9RSoNDI3vdRN/W+F/Zclluh1E1OeXI3R1VgahZtKblCoPNQgvWo8lGwx
A012tnScjaMhtZ4qEo9k4WJh5jhLqGQx+cTIGO/CoqT5c7LzM8K8dVwW1qp/
9Nz7roNvPuz/2ntyZPTK6NjV3t4LHz+eHOi/fu/+jg2bygpLg0Ii5WoDlSNF
sQSOYom9WygtZ0t61onSsifLV8FH4/5YjOgMnNnpZ30y2mlfNGl9mHUgwZlv
p5FSQ/RijZoJgAXqCdjkSwgqVzaIsYBZoLPfXbHRCf/rXjE4UanZGKwNsGYy
BQsYM2DJWEIiimhnaTtNqeUBXpxdzDgsrIdeolfxtFKGp5qv4BC81fwwL+PN
tmCDJDc+CJC4rDqnpiAxOdA1N8antiipJj++JDk43k+VFKgtTQlZUJg4sU2T
v0FBb1laXT8/38MgAmabxcYCv0qhY3AUBI1DAAqr1DEkShJPjOWKMEDrxXLj
smKpgqvSSsAYKxABRrliqcSIKo3FZIMBjcSTGX8u8PMyOGjw70HypVCdlCoW
oJLDRqoVVA7LiUQwk4iQIo6jqxTDxM5wMIWYeMhdbpObJIjwc2pa5H32UNGl
46V//7IWHjox9GFn918bXz1s7Hq26cbJ+bua4p4cWwT3Xu0bujAA/3TowgLX
QFuO28zwUiHW2ySvOfDx420/X1tbVaBOSOJElyi9s2W6KIkmWKjyIqxojRuG
D37pXT0Gt69t9cahIXMTiERC2NjPRhLNbJCT0WRrLMURz3ABhaO5EBhoKofC
ErKoLAqZiSfTncOjNTD8e/fA5Y9fD3T3HoVHfxzpu/xvYAUzDSI0+HUEe2n9
vCVqtdOKFRHfvnTCw4c2rvRk4SE21UajFPl5aSODPNISgrJTgnJSAkuzg+oq
Y9cuyWxfW7yztWhbS0772py9GwoObCt//euRwc93jKyNvhnq/3t4+Ov3lnb/
P2DHv7cBGRsZHx0dHhnvmZgF9Gps6FHP24uvbu28t3/xpZaiYw0ZB5fmbl2Q
enz9ggOr5y4ti+7cWP3575MwfK2razcMnxiBD+zaG1tcIUxKZSQkChMSVCDD
urlPKOwEsAqtQa7z4Mk1Cg8P48Mad5XUTQFonSjj8x3jA1mDm3FdgF4zUSoZ
YFkvV7nJlQaJwVdj9MMYexsnC4GMI1LxTW1NZlnPAAjLNDyeiAJMZkysb0Z6
aFwkGA5IBBfT+7+sfvKs7dHT1t//3NzTd2J49Pzg0HkYvtnff6m798rg8C0Y
/mMcfvb6w/WL13fs3r8sKlzgH8bIWByWsjE+9VD2yg+b5r9ZozmRwDmdSDud
6LIjSNqZSitRTyFOJiBne4hoUhFR58437hZOsTX2dZWRgLx+v0v8Xzedvj+E
/ccbU5y5fCKFhuAIiJ6+KqGUBuIkg49XaLg4kgPwqwZ3KY3iQsDZaRQcH73U
Q8WTs/G+WmGwu1zJJnjKWZnRftmxAc0LSubnJ8R4KTLDPRcWJBUnBaWFGhL8
1aDKUkPrS1KSg12L08KAzdjXvnrR/HwGyZFGcmaxcCwOnkhGUBlYoYTJB4lV
yxTJjWML+M5lKuZEsUGx+QS+mMrk4mlMHJtHZrBJNCZ4h8ISI2gCa7bIQaRE
ccUuFIYNm+ukVpOpVAsm3ZrPsxfz7SnE6QYNZl5V+MKqsBU1scsqQ9sWJ+3b
UHBoe3Hfu2Nw99nx7hNjXYd6Xm/7+9HK9ibvyiTE8hJGbTZ+TgppTpqybUFy
/8Mz8Id7g4NP3vXeraqPhWZCWMEM/1ypaw6v9fTcC1cbd2/KKsjmZxSJfAv5
mlyRJEYkDRd6xQs27c/rhdvffavrH2s5fS6ZzTL2SyIT7e2dpjvhIXNHCEOx
AhmWQP8HWODW8DQckUFEE1AYvDOBbA9yHAz/1jd4sav74MDgibHR68MDV8YH
z8FDZ6oLgLyYeShI3lqxQSXSqoCpsJkzx+Pjhz3wyPGNzf5CKiRkO3kYFKGB
HuHBHsmx/rnp4RWFcfVz0yrzQ9Y2FuxYX7lxZc7Gpqz9Wyr2by3b1JRyYs/c
Rzc2932+MbFz1Ieh4U9Dw73fO/X8G1j4P4CduDk8kWIneviMGmNt3xD8aQj+
a2jkycDX611Pjzw7u/ZGW+XxhrSDy3O2LEzZ01h6ZuuSTXV5axakPbq+DR67
PTJ8pnfwwMD4oas355ZUiqJjcFmZ0rQUVXSUyuDOU6v5aq0CWOIJYL34Cu13
YOUeasCszKD8Lq9yg36CVoNE5yoG3hhkIlc5oFVukMl0QomGL3cVOWFtLexm
o4kuYiUfR0FNngmZ285iCShKjdC4JFZMdfeSApsaGKCSCAl4pNkPN5c+e9X+
9Pnm2w+af/1tPaj791f9+mvbh48HX77p/Ov1/nddp3tHbgzC94bgn0fgJ2Pj
j/58der5l/M33h7Ydm/l9mfrV//WnHY62213hGhboP0yBXmVF75EBuEhe1tI
RLDXazlB4a7uPhJwzQNsgch+n9cETsA74AjUVqqigQIfnejUTMXgbMVSupef
miciExnGPOWEsQTHgBCDTi/C4u0AsAwakox3kPBIHnKejIHXCehuEqaUgvKU
sHJjgioyopvnFy/IT47xUmWEeczPiUsLNkS5S1MCXdOC9ZUZEUvKM7OivOfm
JgC0d25YWZITzyS78Nl4hYwlFFIpNDRgUKbkiWQMACaNhaaxkMCcgwKmHYw8
OLIVleXAk6DYQuCcrYh0Cwx5Jigqx9weBVm7QHYIyBkLWTtBM0yhWRaQMwJi
sWbyubOlYkuN0lYhNc9MlezrqDy2b+4v19v6/jwKD92Fv119dnvzg6ur1jdG
p0USE4IRefGkukJxlJtJrGFGU7l4TaWkJp29rDzo2uF1cP9fgy/vwGPvTp7c
onfjQNMhB9IMyAriBeE3nKzrPLVw/kLvpDR69jyVtoAmKeZzEgXMMJZvrmLH
hfIueMPb/vldQ4se/17tZjA1nw1hMeYotBmWOhUwi8TNxhBsCBQHwCyBhgBO
A0tGYkloNM4FjXPA4izDw+Uw/Ovw0KX+viNjo6eHh64ODV4ZGzoHD56uLBB7
KKx9tMwAd5VWAfwwky+wTcsQv3q1Ex49s6klVMGbJBdhfL3V4aGe4aEeCbF+
GakhFcXxS+vzFy/MaFyU1boif2tr2da1RVtacttbC/dvL93Skniys/L5kw54
9FcYfjM2+qF/oGtkYkeK4f++0eK/gB03Np8d/gfYic3dxoyvB4eMq4HeDMO/
jQ3eH3l34eNP7Y/aF55blrW/MX13Y862Rdkn2uqPrV+8siKto7X67XMgsrdf
v93RM3T474/bqhfIwyKcSouUedma8DCJ3o0LgNW4KlQAWq1B4eotUOomZvtr
gSsGZfS9ILG6uyndPSQ6vZFWrQ4AK9UpjSvWDUrghAGtoEBoQuDsZ1lON252
ymdY2JrNMpvugrLji+hycPlJjI8kVFqOVs/38pZLpFQa3WVXZ+GNu6sePG67
dW/Vr79t+O2PDY8fr/ntt7Ynv7aC+u3Fllfv97z/dvxj36mu4Qt94z+Oww/7
+m+Oww/G4IdvRq78Nnz28ejZGwNHD75r3/Zh29xnLZHnS13XR9l5IazsIDMI
YjGdvk9qAgIK6vs94e8PesDL7w90gOaC94HU4kh2xim1Ujoww8ZHKkommmRv
6TAD0Kp2E1k7maAw1hqdgM8loBAWBIwtFe8Q6ePqpxG7SdhqLkVGRbuLGEmB
7mWp0Y3V+Q2lmSlBbgVxQQ0laZlhHgDY7AivvGif6ozIZRVZJUkhdUVppelR
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
AgqsZPNgjljK1Opdrl3feP5iWf4cfvOG2T8fXF+/prB4XkxMtDoqUpmUaCyc
G15Vkd64tmhLS+nW5pLtG5btbl2+b3PlnrbSDY0ZJeV+8+br58/XlC8zXuxc
gQ0fvXGx+tn9TR+7D2MT1zDswdjYqzHbJjBfppr+P2AnRj4D+/YLsNhw5/C7
X7oeHOq6d3Lk1R3s4zvsU9fA+xd9vY+7e+9/Gnm084e6gryItHjf3Lhgo5Qd
OsMj0hKYlBaZnBaTmBITEx/h42tGZOKKyvJtHVtXr6nJysuOTYwJDA/0CfLW
mbVmPyMwoxjhqbQIgoooVDyR5OzkbOfkYo/DOzhMswOymOIyWQjKuekanpyH
qGCF2vYlBnj8vgAL8iwfaFcnQ7QKiVZumRkREGHymWGYEeMdFGX28JN5BihC
47xTcsKTskNj0/yDog2egVKtN1/nI/Ccjpp0am+Nh0YqU8sRjadSqLbN9LpJ
8e5B3MTGWWVnv807XzPz+Sbzoxr+nVK74zOn7c9ya0l2TJODqpji7izl01Ax
G5a4IxqRSM4FZaocZaNSBhsmksXOVKkLjUdwdoF4Airwi1BCpLlDRCq0pDxi
BLs+NHEZw27d+3Nf0fwZLnhIqaDT3RyY7gRgWDqLyBXQ+CKGbVcEIR2AKZXx
vgArUwpBJxgBANSgUyLhCoQsBocmkAvdpe58JduFYcdHSHX1C96+uaKWE8h4
yEPPV2uAmqVaL7SowrK+Y8Gh03V7T3zd1DGnrjV1/Zb01p3ZVXVBm3dm7D08
98yFqnt/Nr/5e3f/4JE3734cHLJtJNjd/eu+/V/HxKpxIL6TvpKCEUPI0mgQ
PpsKcykcmp2Xzr3z+JbWb4thxlcSpgPCJihhqk5FVquYMkQpRw1EIlGioLTv
Kbj0z3UqvTP4HwGXiQiFBLupvgZZw6o5q6tS1n+bnRynELNwKJuaEhEcMd2Q
YTH76qmL5gTVVWWkRBojApWLF8WnpRljQgS/7CzH+n/HPv1j9Pm24dfNmHXb
4NCGDwMNL3vqnvesv/2ktmVrDFkBSRfKtOvCjXUzxMUa+QKN11Ifz/neuhyj
Jt1gyvYJnhPklawq/Tajx3rlTc+xgY+nBl8dm3gDwvuJC6fKtVIXD608Jipa
LJO4cQgcMY0r4gglINxAv12ou3S1Mm82t74u4+jhprZNZd+szMnK9ANVcWKC
ITcnsLwkub62oK1pGTAsAHZHc9nOjaVtDYW7dy9u2563ojp03nxdYYGivSXp
xcP2j3/v/9R9aLj/5MToVQz7cxx7M4Z9sv735sT/A7D/tdmT7TpixXpHsbcj
2JOx8TvY6IWxvlODb86Mdd3Cht5h1n5sqKev69nw6F8v3l6fwF696bpauiRF
LaUkB3vkJIQlp4TGpYVZUiNik8KjE8LjE6NDwoI0OnVwcGBefm5sfIzZ2xMI
V2NU60walV4BAORL2DQmCZELRTAXT8BRXYnTXBydpjnYO9vZO0+FcJOm4qeA
RxE1yYBnJQo+eG5BbgWMgzCr0MrkOjmskohVqEglE6pkWQXJoXF+vqEe4ZaA
yMQAvzDj9BBtRIJv8qywxKyQ6BTfwCi90Q9Wm7laH67ZBzUr1SaJxiBVGUE+
hLk6TwUPocu9RBwv98jy2MrTDalHyvJetpn+uRK+v5z4e9GkHensHQWCpdEQ
H0dww7MoRIUUVqltq4c4IiaXS5PADFTKchcRnPgO9uwpJKaDozMkA4OzEA8j
eCYP4kug0+cbrdjVMeyyFbv805GVSrWjIw5CpBRXN3tgWEAiaLZimO8GmAWe
BUoFgga2BTcAWOBcYG0mm6w1oDwuk8GkkmkkEPOpPDeujG1PhrRmwe+XD96/
d8LZAXIjQ55GWCSi+wf5rNmw8uj5Ld/tX7K6Nbt2c2Z9e1bd5tS1m5M3dKRt
25u381BBc3vCzycW3X3Y+uzV94PWE4NWINmrr18fXlDsS6JAeDwkU9ANHiiX
R4dFPDqNzGO5chkuqfF+50/tWpAbQnaAJAwI5dhrRQyDnI2KcUzGVB5bZNQH
EMmk5Az/Xy9+U7BMMckOQlA6i+Y2FZoMgviivPSNdUWLi/wb6tJRGHKEIIRD
10rgDEt46fyElFj56nJLVXF0fnJASVHyqpXZmTON+SmGYx1lGMib3cexl99j
H7Zae5sHBtd/GFr3rKume7S9d3TXpWsrmHoIUkDUhXKfpjivNSHapR76hR4B
JcGWVUmJq9Ity5NSl6eE5nmXN2T1jl191X1ksP/08Mtj2EAn9nHvqV+KeW6Q
XCLc1NxSWllG45KZsCuTy6DSnehs6PRvNddufl1YBNetTjtxtPXHXbWtTcuK
F8aBAJuSbJqV7V+2LGltTf6mxkXfNS7a2rhk16aKH1oq2jfMP3NmbeeVho0t
6YVFmvw8WWWZ16Uzq2xn9GCgWjg/Znut8wDD/h7HBkY/Tzh9nnT6svn//wFs
3xdgrRN3bMseBzux4duY9Tk23I31d2OfPmDWnifPrk5gb9/23Ni1b82CwqjY
UM1sS/D8WZbcvKS03PiUbEt8WlRkXHi0JXJGaLBCJff2NicmWvwCfNValc6g
lisREEWBIll8mps7mUR1lsoEPD7LETeFQiXgnOwcneym4qYAw06eNgUYlipw
hXVioUYEgphtWhjhiSQcwMjnT54kHClPqlNJdCqxVv2faerz8A==
       "], {{0, 160.}, {315., 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{315., 160.},
     PlotRange->{{0, 315.}, {0, 160.}}], "\[Rule]", "\<\"n01440764\"\>"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJx0vIdXW1ma9uuyy6mcAZOTsoSyRAbbVT013T3TMx0qO2JMzjmDCbYxGSEB
QkhIiJxBKOdMdiZjV8d11/0z7nt0XIy/mvut9dRZW0cHIZd+PM/77r2PMI8K
vkk/eeLEiZJzcPgmueKr4uLkqm+vwoPv80uyMvLTUv8jvzQtI6049tEpODkM
/+3Af8h4aL1a/uLx8GatyFEqNBcOWouHzMUifb5QnSMzl4w5Kkds5SOOinF3
9YirUmIp7VflDxkqJuy1s+7HiysNyvUGzWqDerVO46rSrdQY1xoMq/UKe/Wc
qUzhqNW8eDaxUie2l/cZCwX6fJ4mq2Uh+cn0vaapu61LyZ2qtC5tZrsqrUXx
CI5Ce8HoRtXYRsXYapnYktulSGpdvNOtfsg3POrSP+zSJ/VYUnqdaQJHarvh
zjPVd8+0P3Qa7neq7kodOcNrBX229A5dUrc+pVed2jefMjJXoFyqc2u6d03y
v1nn/mVT/T9W3T/shr+tO3dcprc2zTu7es+u2rEt7prm9ywz+8bpfdPkoX5i
Vz2yvSh7Myd5Mz30ak60vsBzLLTa5p6b5puNs89VU01zsrqxwYpJyWN5f+VQ
d6mkq0TaUSp6XtBTk/6kNOn+/X8nswJIrCBWQgQ9hsZI4FBjuPTEOEZiIuNG
PPNmAuNGNJxkJDLZN9icL9lRv42m3qBjI/GgiEQG6zeRrK9iaDe4EQlRIGpC
LCgiPg5EiYsjxsbiYxKwMfG4aETEqERE3DgQNS6REhNLjI4ixHLIiVzSDTYu
gR4eG4FPZGLiaNhoOogYwyREM3AcejgzIoRGgiOWw8SwGcFMqj+d7E+LCGDS
QEFsRmgkOzyai4mJBMEgLIoTzGGGcFmoYAzXBLLoQSxqAB3vTwnzJ4eCgilh
oCBCsD824Oy1M59d+uzExROfXTl54sqJE5dOnPA6eTb40mW8/0VcAOgKMdiL
EtZjzu+3F/fZijo1mR2K1B5lxoAub9BQMGQsAvykpuJBXT48lFlLpbZSsbFY
YqyQW2qmXY0L608Va02K1frllccIfit1y46KJVuFwl4J+C1YK5fsNYq1Bt1+
98haHV9X0K3O7tHmti2lPB77sUz8x7rRH57O3mtTpnZqMkB8Y67YXTK+VTO+
WTm5USl3FfcZM3ma5F5DWr8lHSReyZWs5w9t5InWsvn2ZCAQ1GV88Hzh+35D
isie1WNKQfETqFIEs8mAn2Kx1qXuemeQfDBN/8Oy/C+z5u82/c+r1m2n8Y1V
jeK3bV3YMc7smqePrDOA3752DPDbU47uLA0DfptTfatzXfb5Futss2GmWTv5
ZGm0YVZaOz5YDfiNCKtkPeVSXpmsswzw49WkN5U8ePDgtySmP5EZyIgj06Kp
9Hg24Afg0RMSgD3WrUTmzRjWjUjmDRaKH/frSMAPH00EURLojC8jmV9G029G
UhOjQbTEOBA1IR7FjxQXR4iLx8UmAHvYqDhCZAKIFBkPiohNAPxIMdHEOC4x
nk1IYGLjaYAfLoEB+IVFUjFRNHwUHfDDcxkYFhXwC2N58ItkhXEYIRw6cIVi
htIFgsExh+hDFMLja4LZtGAWKZiOC6JiQKFUbEhEeBApJBAf5B3icyXoyuXg
K9fCvK6EeV0KvXwN5+1LDfalhftQMT5U3HUa1o9BHN54LN+sH1qpBnfqWErn
LWcKtfkSQ/GAMhfUp8wBifSFw7YK0JCpfMhUJTFWyi21sytP5lcbpm2VM4Dc
So1q/fGcpXRcUzBhKJ61Vsw5qmbtVdPO2um1pgFTacdSdvtiRqciq20htWnq
fv34T2CDXaqMPlOeyFYktBX1WwvB/cSOIpE1V+IoAPWbs/vMGWJnnny9aGyr
dGgtHzTozupzpPVYkgG8dt3tds2d9sWferUpcGWPMa3HnN5nzRrQZwoX08aW
ipWKx25N51uj5L15+q+WxX9a1Ch+4H7v7Nodp/bAqdm1L+1b5g9scz875gG/
Pc0o6FAzAQS+nhlaHetxz3Ta5lqtsy26qeblkQawvpmhmklJ7YS4bnSgdqS3
Wi6okndXDbYUd1dnNBbfR/HD0/1pMUQKl0yNZVJj2QAeLTGBcTOB/eUNzlfx
nFvR7Fsczk0O+xaL/RsO7SaDFEclxkaQ4xnUG2zGrSggkHYDPDCGDtzeiIef
BVETEsjx8aSERHwcYn2YyFg8N5YQGQfskaOAPSAQMUlSfCQhjoWNRdgDYePB
A6mh3AhQuAdCXCQDFMIgh7OpOC4LG8UGYaLZwBguLjoskgkoBjAofjQSWCL4
W3gUCxfLhfPHCuUi4MFTgUzkNcNY5FA6MYRGCKXiQyIwQcTQAHwwHIHDIHJo
KBUTQscG08JCWVhsdEQIhxLMjoCfDWLBgLa43zG30zr5omnYVQ3ZOmQuHbaU
y60VQ7oiibYQjlJT6ZijGjJ01FktNVfIzHWDumqpqXbK/WTG3TRqLp8wly2u
1i26a8cMRUPKbJk6d8xUPAYoWsvHbVV8RR5fXdSnK+3Tl3Qr89oW0nmq3AFL
yaCtbMhZLl+tHt2oka1ViV1l/bZ8vimbp00VGDJ6jZl8fTrfkDpgyx7ZKJ5+
UyVyZQsdmXxzSpf+frfhAc+Y1KkD8/xRaEgXmTL7LZkCc0afPVvsLpLai4a0
+ZPKErW6fkXfvW0eem+b+btt8V8O3T9cEL72/VXz/orhcM3wfkV34FIeOJZ+
diuObLMH5ql9/fiBbvxIO7m7PPJqWuIe63HNdNvnO6xzHdrJ5iVZ46ykbnao
YXa4aUJcPzbweKy/drS3Tt5TLXpe0lmTUV+cdO/B74kMPyzVlxKJI7AJETEM
SiybdSseMhTw4/7mBvc3CZFfxXJuRaH4Mb9kAX4Qu+R4GimOTklggvVB/tJv
ggciP+LRDfqNRFpiIiUhgXLjJjEhEcUPx4kBAhH2ohPJ0ZC/CKiUxGh8LBMT
Q/WwR0OsLyYiJBL53MM8BOKjIIJZGA4tnEsH6wO6EKKiEKMDwRioAPB8qUQQ
cAg0ogSCsDEcABW9BtiDZzGRDHhZMFIgMDSCGEzBBpMQAkPI2FAKJpyOxzIJ
YUxCCBMXwiaEccmhXDBMRhCTDscQNnNi68nwSp3EUSV1VI+66sZdj8cctWPW
asVG8+xKI9R4o/aacWcdaNRRO2Kvm1xtGbE3jzqap1efA4Gjlpoxa+Wsu3bK
WiHXF4jVOYi0eSJtHsS33F4JoI46n85stM5uto06m0SmSomtemytYdhVK3NW
SV0VQODIerVspQLw4xkye4wZPEN6l+5Rh+YhiGdIFTtzwP2kK/kSV06/JY2n
S+IbkmHQa0rpUt+DKnHAmAXQdmgedRvB/XIGzXkSTd64okiprAP83lmlR/ap
vzsW/uFQ/8Ol/+u65WDVfLBqPFo3An77zuV9++IH19KeaRLwOzJNHRond9Vj
rxelL6ZF61N9K3MC50K3bb5bN9mqGH46L22clz1dGmmZFDeOixrHBhrG+hpk
vBphc2lbVUZd8YO7939HoPuGU3xIHAyOiaFE0wA/5pcf8eP826/w4zBusum3
2LSbLEhewA8MEAo/cD/GrRjGrbhf8EtAPZCSGB9x8wbpRgI+Ng4TFf0pfuB+
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
9l3HzNuOXnNNn6mm31Ddqy/tVRfyFTnd8xndMyl9S1ki6Hk1BSJVXu9iduds
GgDWNZ3eNZYqmMwemMkfmMvrm80RzOX0L+YNKAsFS3m8xay22dSWuUc8VbbI
XCI0F/fosnqNmX22DAhcviEV2APTE5qz+01ZQkOmQJPaq82QWAtGXWVyR4nY
lDegz+Qpk3iaJIElTbSaJ39bMX3YuHTYot3rmDBWzmvq9Lq2DYd0b3X+cE11
sKKF5AUBfj9vmuEh0vY6F/acszv2qX3HzLZ17LVOuqUa3FgeXFeIoOlwz/VD
7Oom+KjvgWCg8uC3ONw+PfR8dKBpqO9xX09lS3NeZXlSVs73v/1jnE/Y5evY
a1hWGOBHiCGFRxFxMVTSDTaIciMSCETxY92KZX8JzUicBzAI2WhAjhLPIcex
SbFgg1zUBuEp9Fk4g8CTwIEYJSKDSA9+0UjHERuLY7PxHA4xmotMOwNgcayP
+MXTkUEMHfwQH8uEVybGsPHQq7JpkInABkog4BfApPkzKYjFkcN9SWHXiaE+
hBBvfLAXLgh0FRNwJdz/WPDwGjYQCPQhE70pJARCAuG6R754vJ/n6E/CB1KI
wTSk4whioaIGM+nBNJo/mQxXeuNw0PaOrzfKHTVQiQ2ZykcdtaAxZ133Qmav
Or97KWv6xbNuda7qvWB2p126Ud+lLeIby4SmcqjrBKo8yFz+fHr39EPRUuaQ
KndYWwQaUhWKFYVDymKZunRYWTKiLhvTVoxqyofVxVI1XFAi05UOG8v71QW9
yjyhrkhoLOrTF/RC22IpAtIE+kcdy/fB8ZrnfgRng2wdtOXJXcVDtnyRKbdf
nwUaMOZIzPlSe4HcnT/kyhlwZg2s5gxuFgy9LBnZqhxfrZkw1czrGgz6zjWb
ZHd16f2m8WgdmW8B9wPr+3nT9H5dd7SiPMbv0D2zYxtH8QP21pYGQO7FAUhe
/aTgGD8kfOWdUP6BZmWtY6Ing73Vgu7y5ubs8vJ7qZl/+uo/Y64Ef3Et9FII
NTCEEQr4gfthY8iEBAa0A+RELhD4MVW/jON8FY/6Gyo0cwE/YgwTNUBP+Ye4
JQw8+LHgRaClBbpApFiEN1JUFAjDZELth04jI6UduF8skr+EGyykC45l4mIY
8LKkaCb0AjgOncCmwxHnWXQLZSPLZ4EMGrS3kLa/wg8lEIHNQ+DlMD8QDFD8
rgN7HvwghX3weB887joO50vA+hFxgF8A5WPzAqZ6nYa/HoFDykUK0ZeI88aF
X8OEiu3lE1uNo6t14D8ye4XcWSUyFvXr8ocdSFvasZwxutVQM36725j/VJn2
TJXeocvrtZSKrKX9hsJ+TY5IlytW5wwuZw5r8sZ0RVP6MtCktnxKVzVnerxk
a5zQlkzqikGj2sIRTdGwulCmKZTqisAnuxbSepayhywV0IA8nXrYPJcyaCnt
WLzftXwXhEyq6FKh1wDGxJbcIVvh6Er5yGqV0JTfuvCwZT6pX5cz4i5beFs9
vlUwuJKBLAe70wWurD57LnRAo/rKWV2Twdizapdtry1/eGH5sOU4WrdCzwuF
34cNINDwYU0N4Qv47btmD9wz27bxVwbZhnpwTTmwuixc8eBnm+03TvehTYd2
pFMj71gebluUtSyPtM/LW8cGG4X8ss6OwqfP0otKf0xK+0PC1+yLAecuB33h
R/DxpwRgI/GYaAI2joKPpwOBxEQW+SYHyd+vYj2TMIkMTzsMBZ6nxosD0sAA
waPg6CGQA7kM+lgfJiKrafhEhORf4QfWBwYYzqKHsGhIqkZSkWIPiskvIyk3
OGCb8JrkGBYlmknkMPAsGp5JxSGiY1j0MCZ0u9RAOhVhA9oNCgaEQohyCEIf
ApAoiiBkAIlMxFwl4q7isSBvHNYHjwH2QAh7ZFzAL82LHw2HrLVRwv1pOHhx
eB14BWBY6qoC/MbWHkMHOrH2eMRVLdQXCLR582+edyozG2ceyNbrKsd+LJT9
pXj0uw5jXrs2s99aJHGUDZgLRPq8YVPBmKlwRJe3YEWWetWOOpWtQWkGNapt
zTpX85gid2Q5CyRXZsmUOTJ1rlxbINMXDqrzexYzhJrCEWet0FgC+LXMZ8B7
GHEWS23ZIn1qr+bhoClzxFU46ioB3wP8wPF6NJn9xrzRteq5N08mNh8PWgum
toplqxm9tiSeNYnvSul1Zwmd+QPmQslyEeBntvRuuMZ21tQ/v7T/9eXKhy03
tL0HK7r36wbA7+d1zYF7ft81d7gCx2nA77VxeFMjXleJgEDAz7kotED+zvQD
ftrxbt0oQqBS3g4EKuRtCyMtY4P1vd3FrS3Z9U0pecXf3E3+d1Yi+bzv6UtB
X/gQvH0I10O52PAoPDaOhE+govhBBEP+0r6EVEV6CvT4KX5AHRggyEMg+9N2
GPAj32STbiE5Di9FiQer5EJ3SUb630ggEEAKYiC9QzA7IjSKiommE+IY0Hpj
uVQsOwLHomAYyLRwCBmPoZGxdAqWRsXQkQothB4RTKNCUAbRiEE0fCAVBwqI
wIJQGoPpBPT8p2T6kMOu4MMu4zFXcBgYXMOHo/j5ETEgfxL8OD6Ajg9gEED+
TII/A+tDDvEhgpH6XQrzvhDsNWAvGXSWiazFYnvp2HrtkKNMoMsRmgqkzvKn
M/efzD3otxfXzt4tHf/u8eKDdlPOk6UkvikbWZw15Q5os2SGnBF9jkyVIVdk
TqsKFnVli7qqBVXlzGLZzGLFtKJsAsEPnk2XKzPkmpxRff64sXjEVCw3l4zY
KiHlh+3VkOPQI0MxKXVUT6yWSy1Z/MW7LVPfds7f6delQqMh1GXIXaUCTfpz
eD/GPOVBh+P/FS9sP+/RpQ1YHwmMd9r1P7SZbnc5Hva40viWDKC0bzZ7Rtto
s4terEzvbOjev3T+9fXm315uvN+wHa0Zfl4z/H3LCPiB9e06ZgC/PefUtn30
lUm6pRdvaMRrKpFbMeBYAPZ69dN8FD/DOA/RRJdmrEMhbwH85IOPeZ35z5rT
axuScor+9P2DrwjskNNen10JuehH9r1O9AlmhwKBYdF4XAIVXOsYP6pnQY15
K5H79U1U4IQQxBCyqPv9QiALbYdRfYofUkl68CPHRILAAAlcLrifx8dIAQxS
IBsgJIexiKEMfDCyGosLpeJDKbgQIi4IjwkjE8IiiOERlDAqJZwWEUpHOoUQ
GiWERgih44JpWFToXgJkOwEDDwrzrKDBAL0GaPSh4L0j8N5kHMiHBHUjFkwv
kIL3HLEIsQxCIJMYwMT5MbF+dMxVrO+VMK8LQVfP+V8443sBWs5uTUbHcprA
kCN1QlGXz1NnDFgLedrMbl3WgLOky5hdO3unQZH0RJWSLf6Pmqkf2zWpfdY8
gT4d2s9+ddqAMrV39r5wLnlYkT2tK1kwVM5qqyYUZSPzJfL5gglNwZgme1id
KddkgUmOGgs87BXLrWWz6/UTK3VQQLbOp/Vo8/sMpd3KrH5tZp/6kUD5sE+b
IrPnTW2Uj66UQviK7flSZ8mQq0TiLB5aqZCtVQltRR2aRz26++2q75pV3zzT
ftdqvt1iuvN06cfGiR96JtOnNY1O59CrtTnA78Mr19/ebIHAA99vWN5vmP66
ZT5a0+7YZrdtUxC+u45JwO+1WfbCINnUDa6pha6lPvs8Xz/VpZvs1I116Mc7
oQ2BUtA4LTDMCKD1mBtpHR5s6G7Pb3qSWvM4Kavgv7+5ezOEcv3k5RPeYdeC
I4J8SX6hrPBgNjaEg/PUfh78ErkRN2IAP9otZDkj5ve/if7dV5H/fovzbzeg
9kMKPKQ7YP6fBKI2yAX84BWgnEPDF51jIURx8JFs9Ag9JhRygUwy4OdLx/lS
sWEschiDhOwHoBOxTDIiOgWsL5iEAw8MoZBCI8ge6lCRUPw+JRAVnAHqwllE
DJuE5ZDhCONQJimIRQpgkRExgHlCoEchDOQpZDMMy3MBE+fLwHhTQ70pwRdC
rnwRdOGM39lTPp9/5nVyyFHKU6cJdNkjqxXDq+Xty8lN0z88V9zv1qdBESVy
FQtdRQJnQY89r02f2aR42LiU9Gw5qVX1qFMLxGZAW4oUZpa8IVP+iL1saqV2
xv14wl4rN1XJ9JVSfbncWDzlqJywlYu1uSJ1tsxSPGwpHdDlyZ0VUxuP5StV
fE1ulyoLikmoQvm6HIkd2fQCbEscBXNv66de1Upc+YOO3Nmd+uGNUoE1s0OX
3Kp+0KK632VI6bUhDXK3IRkKvx7noybNX+oU//1U8d3TmR/HjBVL5ha3W777
Sv3zWwfgd7Dl2ttwvX+1fvRy5eiF6/2m/WjdCAS+X10+Wl38sDZ/4Jp8Z5G9
NIjWNX3u5R77Qqd5ptU2126bbjNNgjqMk93QBavH+MpRwfwwT9r3dEBQz+dV
NTVllpTfTsn8/Z++T7jgc+q897mLvpeuhXgHEILCaFgcl0KAHOSQCdEMqMEo
idEe9uKYv0lkf30TBseC80AmXED2zLGgV0KhiJyBniUxGmyTEI+sX4CwcWxc
LBsfxyHEc0HIfGAsGxvDCouENjbCnwn4EaDUD6ARQxjkUCYFFAyhTCfBQ2Sr
FZeOzL14Tn7c/RIJMc0AzOA9h9NxxwqjIQqlYoMp4UFkDFgohDiRSwNBpgdz
iAGRhMAoYkgUKTSaAr02CFoe6I9gEMQlouBdJgddIgVfIQVcCL9yPvj8536f
n/I9ddr/tMRa0L38qHXhQZcypWM5qXHqe8CvXZ0kdOaC+p35fY48ni233Zjx
XJvyVPXwqfLRc01apyGj25TFM2X0GJHdKX2mLCjDhhzFw+5KmatCbK0QmcsG
zVVSa7XEVDLprgEspaZioG7IXDzsKJfaSiHcxbYSobmwz5gPR4h+satc5CgZ
tBcP2guRF7TnQw87tFrCN6ULzBndxtR27cN2fRLfli5054D6XJlCZ3a7OqVT
mzKwkju4lcNzJXU7Hwy408WW7Bl7ndrRubo6uvtS+/61DfA7fOHee+E6fLV+
8Boh8HDLfrRpOlzXHq6pAD/ofHftI29MQ1s64ZqG71rusi20WWaeuxfbXHNt
9pk2y3SHeZIH+ClH+MDe9FDPUH+zsKexs6OioQHwu/sw7Xdf/yfr/LWT57zO
f+Fz8Wqgly8mIJSCAcMhcJDSCx9FR0q1xI8LcPTfJDC/vkH/Mh7VMX4oe3BE
TRKEnkEFvOHiOcAeJhYhEIEwnnMseBgewwyNQggER/KnE4MY5GAm5dN1NBiE
AH7IfgM6NCnoefQysEoMm4hjfRSWScCA49HxgB+WSfQM4AwJ/jnkSBYI/kUh
XGJgFD4omhQcQw6JpYTGRSArffHU0FhqSExEYCTJl4W7Rg29RAo8j/M9j/E+
G3zhTMDpz/2Avc/PBZ0VW/L79Vk8ZUrbYlLz7N2nsz+1LycJzEj/2GPO5Ftz
wf0AvyfKpJrZH2vnfqpfuA8EdujTQa3qh8+VD9rVyTxtar8xZ8CcJzYXiYwF
/dpCIfS2xsphe22vKgdydtxZNWQs6lNDT5EP7AGBwB5fm41s+TPmD6IcWgoH
naViR4lspUziLBQ7CgZdhWDCzUt3OjQPnyz+1LTwY7PqTo81DdjrdWR2Wx51
ge9ZcuHdilbzBjayOu33uh33xSvZMkfhnLPe4OKtrY2921QdvDAfvnSg+B29
WTt8u/r+tevohe1o03i0oTlcW36/trgPtZ91+LVRAviB+60o+XZFNxC4quhY
Xex0zXfa57qtSBHIVwzzZoY6Jwa7AL9+XkPL8+K6ujTA7/aDL9lxmDOXT5y5
eva894XL/ld9wvyCiKHhdCKy8eMX/ICljwb4VTzj3xJ/hR88hcwteyhFTRIF
EllHi+V8XPXwuBwmmgmCAQg9efxUeBQD2deEbKtD1mdBx+to0ISi67aYSAbg
F8ahoc+iCmdT8JERxwLfRkKWicQ3jkPFsCjhzAgMi4rM20DcR7LBMMOiKKHR
5LCYCNT0UMEYzDA4khjIwfsywq9Rgi7grp8JvXoy8OJJvzMnwfr8T58JOnc+
9AK0k9BUSu1FQkN2jyq1W5Uq0CFu1q3PgBpPYMkdflEtWS8H3yuf+KZi8tuK
ie/r5u4+VTxsWrz3ePrHxzPfP1tEtql0qVN7NOl92uxeTTZfld2rzhcZymSW
asAP2XllLZMYCsH9JKYimb0M8BNZiqDB6TcVAHhwFOhz+ca8PksBVHdjm9Uj
6+VDrqJ+Wy6UAY2z34Mbo4HborkHBtimewCDNv39HnOqZKVUaM/rd2fxHMlP
tN88N3wvdKQP2wsnTTU6Rxfg92ZTub1p2N+y7W86dyBw360dvnMevnEcvjIf
bOmPNlWH64tHq3P7zokdmxzc75VxcEs/sKHtX/FAuKboXl3qWlnsdi70WGcF
KH7Tko6xgTYUv2dPCyurUwtL7/75h/gw0pXTl06cvnIGxc8r5HoAPhjSCgwQ
PjtcJI0Uy0GdDaHrS8QAP8Xv2PoInstQn0SBRNlD8UPZA8ZQoRweP0TZC+FQ
0ZleAAxlDPBD50BQ/OAhaoPwLKCI7kNAxKVBqXAseAjgedijAnthDAq0yaBw
Jg0EjXZ41Mc5bWRLfwwSuOHREZDCQWy8Pwt7nRqKBC7G53TIlZP+F074nf3M
/8zJgLNngr44H375EvaaQJUmMefLrCVCfW6PMh36DmgbgSW+MbdTl9lrLZC/
rJNt1XToMxsX7j5Zuv94/h5UgE+Wkx8v3Kme/A70ZPEOxF+b4iGg2w9dsz5P
qM0XagrFhnKpuWLEASqX28vgVwzbSmEsg5wF5Ix5I6tVY+s1A+YCaHP6THnQ
73iO+VCCytfKAL8BRz40Fy3L9/qsWc+V94BAAK9Ve//p8k9PFD92mZOH1gv5
pkyeIb3fmSlwp7ZZ7nTbH0jXCyZWK+Xqcq21a2NjavulZu+l+fC16+DVyjYE
7rbraNt++NZ6+Ep/8EJ9uKE4WJvbX53edY5v2+WvzUMvjeIXBiBQtKYVran7
3Apgr9O90PURv0nBkrxreqhzRNQm6W8W8OqfPikoq0jOzv/+3//AvhZwEvAD
94PwBfyuBfv4YQOh5QT8wEOgUiJ6djp9JPBmDBD4q8IPxQ/dDUX4hVX0DDr+
3/ihAt6Ohfoe9AIQvih+IEAODV8UP3QBFx4imcv5uA8B8MN4jBp4I0TSiVEM
YhSLFM2GI4aFzBAiyNHpoTQaCAaAH7LfLwb5QWAPGA7lRgR7eg0/ahg0Gpdx
PmdDL38e8MVn/udO+p2D4+fQd4RevoD1ukS4foXo26fJEBlyRMgmvaweRRoQ
2KvJgk4ETImnz4bmFwgUWPLbdRlt2lSeOZdvKeBZC7rMeVABggECky2qpC5D
WpsKmtAMYGkIuVkJ2TUtA/Zs1VNrdWOuSgAPxQ+OA4Y8viqjW5UOjfawuwKA
b11Khr5baCno0WV1a9KEFoAwF2o/yUpxnzWn15IJTQckLxAI1gdqWvqhZvpP
DYvfduiSWpYfAKKilRzpi7zelZReZ4rYmS0BtlXlRmfv61dL+29NR2+dH3bW
Puxs7L92Hm07DrctB28MB680+1vLe+sLe2vTeytTwN5bqwzYA/C29OJ13eCq
ZgAxwOVu11Knc7HLNt9tmuFrxnsAv6mhdsBvgN/E66xtaCwoLHnwIOW/om4Q
Tl8+8dlFBL8L1y8BfleDvK+H+wdTsMf4ETxQoVZGSkQIPC7wjvsOtMZDeUCp
Q30P9Uyk9vslYf9/8UPZg+YX2AOBv3nWdhEDRAlEyzx08wAqdDfLxyqRjvTI
yLtl0/BcBiGSiW4bwHNZiDyT2xgmM5zBwLJYWA6bGB2FbvkD9uC3wOv7RmC8
SaHXCIGXMNfPBl865X/+xHUI3DOfB5wD0zsX7gVBfIUUCIl8lRw0oM0SajJF
utxBQ77YWAiV26CpEAqzQUspZCJPn9OhzezQZnQbsiGI+53FInc5qN9R0mPJ
g/IPmGzXpXTqUzsgqQ1ZIksh4Ce1lIHk1qoxR7XUUgJeN2gqgCMI2IOAFqgz
wWxFxnzgvEOR0r70CCwXxsBkpyoFMIZiEgoA6Dug/BPacwA/xPo0SR2GhyCw
vorxPxTL/710+HfAHrifZD1f9jKf70ruMt8XGFN6llIndLXW1YF3b5V7b4z7
b+wIfnub+29dB8DeO/3+G/X+q+XdzcXdtdmdlckd99iOYwTwe2WSIhMvBumG
fmhNK15RC9fVvatKHuBnme3UT3Utj3bMStvHJK3Dotaerrq2lqr6hvzsvDt/
+eFLMivgxNkTJ7448fnl0xC+F30vX0LzlxgG5R+UTxgOlH8fMw4hMCGSfAPp
atGQRYU+BNKON4Wi+H0k9pcxulfZs+Puo5Atx7+cAQyAuuN2A01YtNFAT6LN
CDyFbuS7TsaiZohEM5UQ5GmWkWAFx2MzgDEQPhLZU0qMjiZERWE5HAybjeNy
4aFn01cUCMdlhTKo/hScFy7ocpjfhWCvL4Kvng24cNrv/Gm/s+cCv7gQcgna
XmAP2pCrEWFetDA49irT+IqUAW3OmKMS+tMRRxUCj7VSZquSOaskjgroCJCm
wF0mWa2AY7+tFNRnLRFYC4HALmOmB8JHUCjyDJn95nxkNcRYIDYWy5C9plW9
qizgDUgDLCWWIuAQjpC/05uPgUbgjQ/8m/L7DLkwAAKBPVCnKpmvTxe7i0TO
Amh7Rc48gTUTml9gr9OYDBHcuPh95eQfyuS/77Vkg8RreeKNXJ41iWd+OGjL
kRoKp42NjvWht2+U2y9177ZMCHg76ztv7fvvzHvvNHtvVTsvFdubczurM9vu
iW3X6L573EOg/LVJ/sI0vGWUr+tlQCCSwupex2K3caZDPd6+ONw6KWmRi5ql
oubOtqqnz8rqGgrSs2//9o9xYeTrJ06fAAJPXjx1zusLyN8LvpevBHr54UOg
/Pvf+BHiEQM8LgV/ReBx+KKF3/9Ai+4oQHdVfUIgiuUnu+jpaE8BRAFvaLzC
yWMsUUSBQHRzC7qVFMHVQ2AwjRJCjwCcPKKDcFzOr/DDc6NJ0XHonkPPSXYw
jXqdgL0cFvBFkPcZv0ugswGXzgVe/CL44sXQy5cxly/jvC7i/S6TQ65Rw73p
WC8aBpkBRlQybCmVWytklsohU6XYVAESaItE5rKJrcapl41iV5nQViRdreyz
FIP4xoJuQ063KafHAsesdl1ahz5VYM2Gyg2Iap9PlllL5zefjDorgTShKVfm
KuVrMyT2ImhPRlfKx9cqkUUTYw66fwC6nkFzHnRAcEHrUhIYILAntOSA+41s
VUrXIIKz2rUPAT+eJRWdeBGvFwys5gis6eOvqoDPfkfW4HpOp+let+GB3FU4
aa9WOTsc67JXL5d2Xhr33tgPt1f2dta239l33hkAv/136v03qoPXioNNJHx3
V6d23ZPbzvE3trGXZvmmYXhdK1vTydZ1Uij/kGlAda95oUc53jYjbR6TPBsb
ahPw6ro6a6rrcgtKHj3M+J4Rgz91EUneU5dOgvudvXYeDBDwg/z1xQUHkTEQ
Z4AfzmNTH9FKjIq49T+TKihX6BjdMI8KJQp+BOUHFYrcrwwNiEKBRNFCkUM3
Jx93FuguU3gKmcOJYaM1Ieg4ozFQKLIQ8JCdKh6F0GmAH9AVxmSEQOHHYIQj
exu4nq3+MWEMNjwMYzIDKOQrYaFnfL0/87p44uq5074XzwdevRzu44X39SEi
8iX7X48IukoKuUIJvxqB8aLhvOn4geVMsTZ32FSM3KyhLx3Ulop15RJjpUhb
0asq6tMgBIrMJXxdDl+fLbIWw7hbmdOuSIdc5hlzoSYEAxxwFwtsOSDkdiFt
euvCw35dLhgp9LkSe4nYVjjsLhu0FsAA2mqxJR/ttYFAnjKlZfbus6mf2hce
AITDzhKg1NP8Vg6vgsci+0iBLtAzxR0IXyj8oOcFdZtThCvZ4tV8+WYZPAst
sMCR3mm436G6269Nl+mLtW7eyubou1eq/TeWQ2g39tf39je2d5x7O5aDHd0h
6J3m8I1q/8Xi/sY8QuD/4De6ZRjZMID7jazrh53LvY5lnmWRp5/tWp5sn5U3
j4qfDg009XTVtLVXVdXmZBYkfXvvD1h6yInzCH4nL36G4gfud9HvClL+YYMg
f6GgCmNB+UdH8UOC1RO+x+Ad14THEB7r2O5QeDC/MIySdtzGAj/H4YvOt8DF
aKMBA9wvZef/dkj0SjS+0dsw4X0i+/Sg10Dyl4UqnMUE0tDYxUdGwhHD4obQ
mOgGqmuY8PMB/qe8r570vgQ6H+h1KdTHCxdwnRTkSw4E9vwoQUg/EhEO4Pkw
CNeZRF8WqW8+RazOGTGVjJjLpfpykQbwQ25Pk5nrJaYaoba0W5nXMvfo2eyD
lsWHXcp0ibGseyGzW5GBTBrbipsVyc+WkwTOgl5XPs8zT8g357Sr0qCZ9Uyt
5IOhjayXj25UTL6skbqKZO5ikRVZQRMaMruXH7bO3O6YvwfAIOsmljyRKRuu
H9usnnhRDZ1vly4VOgvofEGN8z8gBmhOgeR9prwNx353lmyzGN0R3bx8u113
X2B5hNwEp82ctFSb1vrXX0ztvQPSHEf7q+8PNw/eb+7su/f3HEd7lqMd89G2
4fC1+uDl8sHm0v763I5rats5+dY++do6/sI8tmUa3zRMbBpH3Kp+21KXYbZD
O92hnOqYHWuRi5/099Z1dlQ2t5aXV2clpf/w1X/Ee4dePXHmxMnLJ0988dmp
S59D+EL3ccnT/PpgAiF/AylYqOrDPYSg8EAHAfn7KXufEvgr9zvGD9iABIcO
mgQXQ/6ClUGeQm7SiKFMCrKt3QMP/CJUx3Sh+B2z/amLHpeOiDzfh4CLYaDh
7rFTFrJflIPsDAznArfQlUNnxAlhMQJpNJB/RIQ3gXAxLORsoP9pf5+zgT7n
g32v4AK9iEG+EWH+tHBE9FA4BtAxfgy8P5MUyKYEcSJCImkDS+lDgJ++ZMRY
MayvkGgqxOrKQU2VzNgwbGkQ66u6l3Japh+1LiR3qzIE6qy+pRzBXPagrnh6
vWF0raZLm/lU8aBVn9aqT6lfvP1MncwzZ0Or0qZMRTbP67N7jdnytTLZSsns
2/ohZ+HUyxo4Dq+UAHs9qkd9mrRBY7bUmj9sLwRJ7QXgkxJncb85G713EtS8
dOfx1DeAX4cuWWDPAAJbtfdBnaaHfEtah+Zhtz6lWfFTm/aeZDVn0JYFbdTS
yjPrpmjr9ezBjun9nuv9wcb7Dy/232/uHqwc7LsO9hyHO9aDd9CSaPdeLO9v
LEH/u+2a2XZOv3NMvbVNvbJOvbRMbpmntixj6waxW9NnXuJpZtuXJtum5M+G
BxuEfY/b28qanhUXl6d9f/+P9NiIM15nAL/Pr54BD0TxQ1sPcD/v8AAwQF9C
aEAENtRjRB8/dM+k8f/N/T759P+P/sKzNIZstSLDZUAmmBgw5qnZ0LUzxLig
0fAsqMGZY65Qej9O7qGLxZ9Ukse/6OOt6J69qTjPXMovoc/8Rci9RaFsZiCd
6ksBa6UH0Kl+EWQvEvYaPvwaEdmZfz0C50/DBTAIyLIvhxjMIgSy8HCEcRCL
hIDHoYZG0aFhH9bkSTW5UnWBVFsyrK+U6qpEy5WCxdL+ZcjfGohg/nIBX5nb
bwQfK5Xby3sm00ULecDqpLtufLVmwF7cacho1jyqmf+hcOQPlTPfPtM+fKJM
api/82ThwbOFpGeL96E1gDYWIIQjpCoY4Mha2YAxa3SldHqjSmYr4C0mdcze
FRuyZzarhxzFIluBwJDRrUkB9+sxZoC5PVfcBevjmdKO3e/p8k9Niu8b5r6F
shBa405dUpfx4dBa/oAlQ6jJXnA8cWxKXr1e2N+1fth3A35H718Cftv7qwf7
Kwe77oNtO4Ty7kv97qZ6b02xu7aw454Dbbtm3znn3thnXltnX1pnXoATWmQb
xkGHuk890zYlaxoaqBH1Vff3P25uKa5pyM0uSv7v738bTg05cfEEgHf62tlf
uR+0Hl5h/mCAPrhgP3I42BRaYiEfqGfG+NPC79PkPWbv07RF3e9X+KHVGrqe
G4osnEUAe3AE9sAS/3d3/PF1PLM6aJuDTjOiAvaw0VRcDA0fSwchBEbTkZP/
E9bo5kCKXwTxOhmP3JKJ3iHCpiAzP5E0ZNI7knYMWFg0DZkM5FLgGBaJTA3B
Beg/H15zxlYxYSqV64pHDeWT5roJS5NMVz+gqBzS10t0dSJtlUhXNqAvHjAU
CqFpNRTKNWVTuqoJY/WwsVRiKukz5bVq0moXbtcqbhdN/LFs5pt61b26xTs1
sz82zN+rn/npyfxdniEdwBuw5vYaM8EGAT+Q3FU84i4ZhTLPXTrmLBmxF8ks
+WJTTr8xR+ouBVZFtrxufRoypWzLHnTlyzZLB1cKAD9gr2npB4RA5Y+NC9/y
PFsOAD+e+ZHQkSk0Z0pNxcrVFtcL6es3iwd7Nkjeo4ONw/cvd95vvNlf2T9Y
P9xbO3jn3Htt2Xlh2NnQ7Kwrd1eX9hAt7K4s7rgX3jkW3tjmUPw2TbJ106BN
3bc83TI6WNffU8rvKuHxKp88KyiuSEnO/Onf/vilP9bvxIXPTlz6/OSVM59d
OHlc+0HrcTng2rVQP8DPGwyQFBbkmeb9OBMC//9jWP+38D3uOFAdT0Gj4QsE
Qv4is4geIJHFLw9vx5sKUPb8KbjjRd7j1Q30BdF+5NPOGplaTOQCeCh7yEbB
j2KhTggQHnc6KH7IJisqso0Z8hSQQ5eh4RgWzQiPYX76EFAMg8I1hvlp6MMb
mLVXTprLxvSlY4aqCdPjcXOj3NAo0zXOuLtkxsYBTbXEUA1dcK8ml7ec3ruc
OW9+PKEqly0XA7GDhqIOZWrdzO3Sib80aZPK574rnfmmfPZbeFg980PD4oP6
udutqkfgfkgf4SEQUnXQlsfXpUGZBwYIsQuOp9l5pnzbJLcVdi8lQesxaC8E
Sgft+dB3IJMq7oLhjdKx11VAIIQvxO5z9V1k+UN3r1n5E5SFTfPftanv8a2p
PaYUwG9m7bHptWDl1cjbd8qjA8eHw3Uo/I4+vNr9sPn2YPXw6MX7/a3D7bX9
187dF6bdTf3uumZ/XXWwvgzaX1MAh9vupTeOecAPCV+jdEUvtCgFypnWSWmj
qLeC11HU2lpQ35iTmXf7xwd/TPxdnHeI12eXTgF7Jy6cPHnx1HHn+wVa/oX6
QfiC+wF+gb+seSFtQjQT2bLyC2O/ishP8UPZQCdnIFs9m+TpeC7jl2lhZGEC
/d6qYCoxKIIAgkEgBe9HxiKb5yPwaGNy3DijDQsM0CBGbRYGgB82OuJT4WKo
KIpgiZgo5Ds6kC914UagE9feZMwVYig6keLHJobEMMLj2WFxLBiExXLC47iY
+EgYhESzQKExXGwcMjtNiEa21uCj6CCZJl+qzoPwlSgLBpXFYmWZRFMl1tZO
uVoHVBW8hXyxoWLYWiPSI1vrZcai4cXcXmmSYCQJiJ20V/OXMxombj+evtOk
SC6b+K5g+E/Z4v/MGPhd6ei39QsPgEwIUKE1Y/xFRY8+pd+S2bZ8r0vzsH7y
Lx3L96X2vPnXtYAfxC7kb78yBbqPbm0ypC3yDRu6pF5blmStQLxe0O/K7lvJ
6V/N5bsz2y3JLcYHoKfanxoU38NlgB8k74Azq0uV1KfJWFxvMr7oWX0tf7ur
ODqyfvjgfv/z+tHfNnb/tvbmyAljBMg91/47694r096Wbm9TfbChRLSpAEEW
v11ZeOWc3bLNbFgmVk3DTt2gSdmrmufNTbYOS+p53SVPn+fW1GcmZfz5z7d/
G/MbztXgy59dOfn5tXMnziLfJ/b51c8hhc94nTvr88XFgCtXwq774AOvExD3
86NiUTtC8YPW4+Py2S9gIHT90lwcOxv6tRjoKjDGMzeCtDAcGlwMV6JBDBfD
yY+OF4FHdrmTCb7IDZIEz9RfxPHeA3S2GQYocuhNl+i8DVhceCQljEsK5XwU
PESzGNhDB4AiABnGJUN150UKvUwIAV0lhfjScSGREegNJsj2g1jk9jrk3nbE
/RBhYiKxqM/HIRsakfIyij6wnNO7kNG7mDmkKxqzVsutVVJjpcRYAZpafbL0
smXEVi1Q5Ij1RXJrhWgpc3g+Y2jy4dhitnwpp286Vaoukhkqno0lt8xmZHf/
Z83Ywwz+H1K7f/+g4+vcwW+al9OeLv7Qovi2S3uXp7/fNP+XsuGvayb+q11z
r0OFiKdJ6tOlDhoyBrVp/YqHXQu3mxU/dhjvd9sfddmSeI6UvvWM3o3MrpWU
FseD5/b7bSuPujbSW1cfNVhu15t/emq7125J6rE9ErqyJK5caF4mbOVL7ibj
etfW9ujb/bnd95qDv1n2/m7d/bv93T/se/9w7B+Z9vd0e9tq0NG29v2O7gMc
3yAt8OEr5dFr1f5L5butpdfr8y9W57dW5uz6EbNaqlWIFPP86akOiayps6f8
SWtead2j7x/9/uZ/RdESiN7YK595nTiBfpGd14mT1z877X/6TMCZM/7nzgdd
uBzu5U3w88L7+9MwyHooHZngRcs/ZHWMDaU48sU7GDRVI5kkLnI7BoHNBH1c
6ooEG+Qga1txkXBlaBQVCir4rNH+EaINn8BFbhUHw4lhB3PpvnTSVRLmMh5z
GRfqQyIAgQG0CKjZoHWFNhbk+VYrJjo9iOTyL19+BUd4e0FMYiiHghodEBjE
xMM7h77Vjwp/PmHQvQYykU7WmxxwGet7ITzgbLDf+VC/q8RAn4gQ74hAX3pQ
MDfMjxHozwwJ4mBDuETP92vR0O+E8XyxledvwVMBTjpqoIoDumTmslF7FTAG
FR2kqsxaDr3t4otnEkNxy8QD3kK6zFAiUeZMa3PHFtKm1XnzhrIJbcmoprxj
OOVhZeKPJbH/ncsq7P3hUevv7zd//dOTm5l9f25aSGmY+nPj1B+eLfy5dfm7
xrk/V47/vmH+z92mZIEltdeaBp3CgClNqE0Vqh4Jl5N7VUmtyz+06n/oMN5t
M91uN9/rsN1rsdx7avqx2XavyfrTM/v91rWHgF+T826T8z4MgEy+K2XAnSld
yZdZCkf0RYvWBst698vd0XcHs3s/qw7/od/7p3nnX+btf1l3/mnd+6A/OFDv
7i7v7ywf7ane72oOt5H5Z2QCEPRqee+l4u3m4sv1uc2V6Q3XjMsyZdWN6xRS
xVz/5GT3gKSxpau05mlWTuW9P93/t/j/4JDj8dewV075nPzM+xSwd+LaiRPe
J074fvaZ38nPfE+d8j99NvjChfBrV3B+vhGhgQwC0hLSiGgUwgdxjF846ntc
BrBHZNOJLCYiDoIf4SN+UYAfUk0lsMLjmaGx9OBoRBB22ESuJ93YcAzg0Hzo
lGsRxCtk/DUS3odMhP7Un0qBRhU88Fgoe+iEIfxRAG+gEDb54xl0iyCTCG84
gI4F/K4RAuCfcBnnA7qC976IuXou5OLn/hfPB/ueCbh+NtDnYvh1eOoS9soV
wlWfCG/QdaqvHy0ogBEGAKPlIlIxIt8YQ0DXo0GKV8+hhwX2ALwxV82osxrA
GzJDk1s5tVY/u9k0oCt4Nnq3ay4VLpiwVcgVmdK55JHFjHFVwaSudNJUI5zP
K+f9pU50r0L4E19d9ng8tUx6L1f4TcXI/frppB5dWpcaAvc+T5cEpgfm1qq5
K7Cm882AXzrg129IEaiT+pYfiLUpMij2jA+7DHe79Pd55gc9FuRrJJ9rfnqq
+R5crtl055nxbovtfrvzUZvrYbsrpXM1pdud0mlPEjhSwf0kxjzxcvassda+
xX+9P75zNH/4V837fxoO/mnZ/5cF8Nv9l23vZ9P+e/3+gfbgQHu0rz3c0e6/
Ue2+Wj54rUT0CnG/7ReKNxsLL1dnt9yzG9Z5l35SD/jNCCfGuvuE9U9bikpr
U5Pzv/vd94lRX9OJsdhr2Kunrp8GIQRe+T/w8+xtO3s68MLFcB8vYqBvBAaE
Zh8yOcylBbCInpsyEENA8pRNQ25DY9FIHAbJ44GoAaLuh4vlekp65CsLwmOg
mEc2O+HiOYTESNLNaBAhMRoMMJBF94kgAXtXiTjfCLKfRwAh2CD0qugXF3xc
8PW8HygJkBvQaDi0NkDP+5DDvEmhHgX7kEOu4v0vYa7D39H50Cugs8GXPg84
d9L3izMB3qd8vU75Xj0TeOVs0JUzQV+cDT7/RfiFy3iEQy+Srw85+Dol9DpS
heJ9SMi9IT4U7PUIGGBBE65a8Lre5ex+TR74HrpbAAQn4eGwrUKozW+bSRYo
s+HKmZXaSVPRnKV03lIxYSgZWoaPO79/Mb9zMpM3n/dkNLVjsaAegngxt11V
OGCv6dbmd6lT25butizdafPMHj9bvP106Tayc095p1V1t1N5j6e6z1c96Nck
DxnShy2ZUltWv+Fhr+6h0JIismXwjUkdqrutqp+gs+g0Ie1Gq/Fehzm50wZK
abcnd68kd9geQP4OufOGLAVQxyrsTS/2pe8OJ/c+LL7/u+7nfxrf/8sKBIL1
7f/Ltvs3y/5fLQfvzYdHpoN9w/62du+teveV8sM73fu3WtDRG83ha/XOy+Xt
jcU3qwublnmXdlI/P7Q42Ts+3NkreFzflFdQ8fB22n9/+adY5ldUfAzuGs77
c99zoJM+ZxADvH7ipP+pUwHIpkpg75T/+ZN+586HXIOP7xoBPsowXwou0DMD
g6xKgMMwiajbQO+AfOEtA5GHPTrgh0UW/ZG5X883SrGBVdQwQZC/QCAUV0Ag
8UYU+VYM5ct40s1YbGxUMIfpz6D60igQu2B9wB6ksDcR61E4CP0SAy9iCAAG
bwmFDR6i32wA7/MKLvASxt8jXxDkLPwFfRHqdS7kMrB3JugiosDLgN9pf5/P
/a6dDrh8OuDS6cDzZ4LOnQs9fwFz8aJnkRe49SIGeb4YIRy5FY6C3O0L8qUi
A+gdWmeTnk/ea599CGPk1l19vsRU1KvK6lGkC7W58BDGImPBqLNSbi0bUmdN
WUrmHFVT1opRc7lUWzKgLOxXFrVPZzXKkp6OpdQNP+hcyu/RFE1sNossla0L
yc2z95vn73UoH/EMmaAuQ5png9aD54q7rYs/dSzf7dUlDxhShbrkPuV9IBAG
kMIDhpQha9agJV2gfdihvNNrSAH/7FTf79De7zYkA43InLMlqXczHQjsd2fI
VgtGnKWTlnLjZsfuX6d2D2YOPyz/9e/6v/7L9OGf1iMwwH+Y9/6JFIG7f3ce
/M2+996yv2/a3dHvvdHuvdb8dcf04Z3h/WudRxqwwd2NpbcrS5v6WadiXDs5
OC/vGZV08Hvqautzs4vvf/Pg9/H/EUm7EYGPwXvhfU/5XQArOOFz7sT1/4+v
94xqK83WdXEkmCiQhIQEImdjnLPLLrucczaYnIMBk2yyyUHkJILICBRRQEhC
SCCRM8ZEAzblquru3b336b3HueOO+/POpeVy9/lzxnjHGstCyK7i4Z1zft/8
5tqvhd2LNvSCPyAWgdfZg9MGZ9AQaI4SCD6D1p5EDyfQ910zdyerw87W7s6A
H3oa19ZD0+T550IN1CnAHsHTDhUQSDrmjAryQEgCwf2AQKdLZ+DG9iyS6kOc
Jbg5oWt0iPk4fu9vAa8Di8M6U0A4FysQWBxCIDpGw4EM/05jOwtDGwJE1UNW
ZjokE8TciIYQcOE/dj9BD/DTIRnrkfGHLIlw1SUjcB6iGAF1oEMUAxQ/iNrw
af+OH5gesIeG4HJBMJUXUNoXWClC2APemuSx7aqkFmV8rTiicTCmQ53cMpLQ
qkpsH01uksc0S6Pp0sgqXmAlN0DTxpxMlyNdzfUDyOAguiKlQZYEKuKEdU5k
Nw2/r5fHayYYRNcrYhvUCY2jCbTR+DpVTL0qulIeDHVuldS/XhFCGwqqFHkX
sR5D/G2WBTcMBDVJg9pVbxgTcS0jURCdy4U+yGwraSC8v1YR2qAKb1BFAoQ1
U0EVkwE1o8HwSstwLEuVqpgtW1jvWP/M3t4R7e4O/vqb8su34a1fFZu/Dq3t
KtZ+G1/7bXJtd3xlR72yplxZGdz4pPi8MrSzPATgbc6Lt+cHdhYkW/OitSne
soo7K2apWB2i9npmU1lbfWE5NfVdalhw1Kvbz38+cdXT+byzzSkH+D8MoWe/
ucEerO4e3AHADwQ3YH0/8EOMgmikZ4nV7EaRgUAIcz92/C00S3ZkN0cgEPAD
AXvWR1yBRvKf6Rn5KHJ4nHLShXzCiXTc0eKYA+qBEL7xh+3+rEFOOFw4BYIb
G6Q1+hiUGyQPVyAQIi8IbTFFPxBN7UBIbqapLwBCBEjgUxOU4R7t3DOyNdcl
Y/QsTQEw+CUC6uAKZgivA1eANBgmsApGB/WImbM5xhGSQBPE+uxxpo4WiLsi
c4rgbTYYR4qpE7ItguJXJgqpHEDMjT4M8LwF3tqUCb0TaSBkuvhwQvd4CjJU
XBFHVyfSh9/2TqUxJt9VCoILerwq+MGl3KCCHp8KQQSVG1LKC6/tj4WSuUXx
vogVzJzJY0xmNyrf1ckTKyEK90eWDkSUS6MqZJHl0vDGsbd1I1EAUp0yBGEJ
4qzMr0z4qkke1qKMbJSFQz3SoYrrW4S/Lqla7F8m8K2TBTeORDeOIDM3kONv
qjeQQ5ap/crG/SD4Vg0GNctj+iayRxaqp5foG5vcL9vib1+Hfv11+Ouucuur
cuPL4OpXxfrvU6u/Ta/8Orm8Pbq8Nry8MrSxpvqyof7yaXhrUfZ5dmB7VvJl
XrY9J16f5C8P82aFbFVvp4Be11tf2lyVX1L4Pj4p2Cf0yc8PLrpfdHM47WRz
ygnSGx1LjDbJdD/RENK8vfiDwB5Qh1oE6hgon9oWGPATMBYQkGCp2Z5Ad8c0
hxwdNQaIHK+wPuKMnFV0t0dOdrvZEg/bIgQec7Q64QxXC09kA8vyuBMIOcl4
2B6dXmV/Fqrjo1Ch2J894XThtOtP5yBjpBzzQGbXuzoipocuPKJHID0cUPBI
R+xR/CBJQzNAlD00KKMOCQEU7BHeAFckmDpYwD3elaLpJ3QDnjXpIhmpjt3I
pk54IzsssAfpLrwNgRnpKoS0E1kqRHM/FL8Cjm+pMBjwA9LA92gDUUAdYyyF
oX7XIIluksUAkxB8K4Qhmn23+A+MF7WDEXXy6CpJeO1gdDHHL7vrRVV/RJMi
vpQXWsDwqxFFtyiSi5mBPRPZLcMpTcoUmuJdleRtmSi6bCCmVpHQPP6+ZfJ9
5SDSzVIjD0PxaxqNaBoLa1KHV4n9G+URdZKQcr4v3LAX0jonEkp43uXiAGTS
i2b7uHk0FgT0VgwFlgy/rhz3r1aHVMuDO4cThz5WLGy2L652b2wKvmxJv31V
/rar+vpl+PMXxca2fOXLEILfH7MrmjXApVXl8opyc129uzmxu6r6uqTYmRv8
Oi/7dVG+uzC4PYmMwFoQcdSMTmFTLaO2tLEivzAv6c1b/xeBjy7cPut0DmHP
+pSLmYvlIQr+EIWgQzYDWwDkIN8D9iBH0rMyRh0D8NuHBwiR+AtGAR4IJgPs
/ThDAeD9wA85nHvEiXwYGThAcKFoNu6tgRCypwPe3RrnRgERPGyBPTBDzU6W
Mwhd34AY7XDupMfVS2fv37ry/JHj2ZNQtlh6uoPpfe/r02zFIg9EQMoNaxBa
2wInABW8/me7MvI7AjdYzWQMIA3ephmQi9xr2LOBN2u6vDwhi0ALFvgcIBDj
CP+NkGYQoGyBb/9zLBtivxB2f0ReULU0AtQgf9OhTmJOpfWOvafL3kBsbZVp
4qzsTavybetwfONQTO1gFIgqCirtDy4fCAUV9vkBjaB8tk+tJLKEG1jTH9kk
fwt1ChQsEJTLuKEV4re57DAoRrJZQWntXi1jqbKvNYy5zEbV247ppKbxuHp1
eMd8QtdiYtMEMjy8aTS6cya5bTKBNhwFbxB9LuB8yqpWhNPUb+Bao4xoGI1p
GI+tVUXVj75pnnlbPx3ROBfZPBXTMhbHHE2Tz1cubHRtbgu+bsu+fh7a2ZBv
rQ9+3pRDrbH1ZXjz2+in3QnAb/232eXtsY+ryvU11dfPE79tTW0vKnc/Kn//
OPKXjyPf5oe2Jwc21cK1YcGcgDXa09XXWNteUVhbmp2fmxwS/frms6vHrx1z
vuhKOQVB0B7rTtG3BfZw2iQkTTpkZfpDmlAFWRNEKwxcdUjwIg5N6SEEW7g5
QHZnc9gNoi3F7bsBguOBgDr4KWtk9e/Culri3KzMD1sTj9iCB4KIR+xABM0w
AaSK8XSyOu4ORQrazI/uGqP7KRDl0UIDfA9N9oA3YzuCxqPIBHdrpDcAWWmx
++GBKGMgdBlQsxLojC4foS36kFWCr34fCajhWUPpv8BGPu37xDZ7zR6xE3oI
BQgEDmmKmJoB5JRHjSgUeOsYetspj2uTvmkUhtH4ITRhGLzYKIuuEoZQef5F
PL9crk822/sDyyuH8xpuspmv8rk+ZaLg+qE39bKoZmUcuGW1KKyCH1rFD4OI
3DSSThXFgoqFUbnMwJrBuJ757K6Z9IaROPCxupGICnkAbTS8fiy8TO5TLHvd
/TGl+2MafTqBNhbTuZjC+5wHV6osCClY5CGVirAaVRSoajgCVDsa2b3yjvHp
HWPhHWMihT+RN7JIW1jrWV3n73yWI+ytKjZXIbwq1j8rNnaG176OgPtt/nV+
44/ZT1tI8EWt74/PUzvzit3F4d8Xlb/DzbRsa6x/QylYk/Pn+JyRnk4urZpe
UVBFzcrKTvCPePnzo0vuVzzszzuRT9gTj9oBfob2FnpW5iDADJD7cUXZA0Hi
BPeQn+tT8MAeXMEDzZ2tKW4uNm6utppqF2wQ3A8cT1MXQDkAzgPxDhJFkpkz
EetiAQL28O4UwI/gYQMGCDI/jAyvQOeooBCSPF00iSKyrY/u3KG7eFbHXFCo
UPw0mR4STDVrI2T46wBvDTYIe6jQVWhwS02KiNz8OLCJnloC9iCxREsnFFTN
2+xR/ND1nH/HD11ygRAMgjwQ2KvqD60WhjSIIzoGY7sG49r6o5r6QuHaKops
l7zpGnrbMhgDcJb2BRT3+edwfNJ6XrzrfJzW8/wD51WBwLdMGlKvjK4dimwd
SwAhp9ikkWX8ICrHH4Jy90xegzqjYSSdPp7ZrEqth+A7ktQ9k948mkAfiyuX
BeYJXpRIX1PlvnmSFwVSb/bmh/aF9/VjMSC46V5Op43H5vb7IAQqwwA5uJYq
QitGIqpHowG/5uk3yIKzOrZblSyaLJxcaV3Z5G9sDGytDyHsrYysr45sbIxs
bqu2vo59/m1i6y9T23+d3vw2+Wlz+OMn+eaK8uu6+tuqGtj7tjjyx8LIH7PK
b1PyndGBjSHBiow/1cca7G5j0ioayvNKSzKSM6KeBd4/c+e0809ulPPICWvC
cXu8h42Jk6WhLcnIhgT+BpjBVUMdOB4GAi4Iig5NbYhFrQ/1QKyDpYW9naUj
MmvF2v17FIaYq7EXCLJW6D4Cxplg6mKOdSGAkMY5d0twKhC6E4GC9OPHjeyq
aFBBO/2+H9LUDJa0P3MEvAvN9zS+ZPPjQxDInYlQJoDfoh8I+oEf2dMJTRrR
1WPgTeN4zpqy+v84yY4iCn8L+i+Br6JCCUQg1ARfdO1Fs/ASglgfP7heEEoX
RTTzw2jMgOpOb8ZATGd/dKckBoBskb6pE4ZW8IPK+0OK+oMzWF4p3U8zmC/z
Bb4lkoBKeWjtcHiZOABwgvQMMsMWVZzmOFtYi/pdx0xO+0xu6+SHztlc9sfC
9sk0ZPyUKr5RFQvxtETsm817WjDwCsDLk74sUfq3LCZVj0VSh0Iq1eEN0/G0
6dhKZXiB1Ld8KBRer1VHlyuCSweDq1XhgGXD+JtKmX+NJLBOHN4mSxyYgpq3
9/O2ZBvxveHPn0Y2V1Sba6ObW+Pbu9O7f5nb/Y+57T8mPv+uXttSLHzsX1oU
rX+UfVkegqzv65x8d2YIwNudkO2oEPaWB9jzQuZEH3Ogs7mzrrS2/ENeYXL0
++Dbr697XPdwuupufdGJdMbe4jQyZcLMzQpdXtBF0j8zDX6Yfxf6yg/3+46f
HZlgY0WysSHZ25EdNc/F0NQFmpAKtmaNcyebuSLswRXnSsS7WeBcSZDbo4H4
eyenG5pxUTTkfA+X8CFozP1+TOmsJzpaEG6sT7hYHXNCyw3iYYRADcOW3931
X5ZI1qzJ/Im0plPiR7cVyh46zgjt4UE3jr/38xxz+cHkjy+hDokuNKHxF9Qo
i6wSBJYwXha2PSlpe1rd7dXY40tnBXQi27vBTdzABl5gDcevjOldxvVFjmEq
YorEIXl8v2JxcPlgWMVQaMVgEATQItFrgLBSFlgpDe6YTG6feNc0Et89nUkf
T2uZyoCKo0IW3axObhlLrpFFlgoDkGPp8lDqgF+R5DVV4Z8v804TPsoUPy9V
ot2kvhXKIDC3GnVYzUh47Wh4pSKkYTK6dTaBPh3bOBHTOBENV2Tw+GAITRLa
JInuGUodmq5ZXudtfQbfG95ZG9tZm9handxcn9rYmvr8dXbrj/kvf53b+X30
8+7Qyqp4fo77ca7v85J49+MgFBpfJiXgeJ9HRADeukyw3M+Z5XaPMTtUXIag
s7G1nlpRlpmWE+cf+/Lyi4suv7i73Tpid9XN6pIL5YIr+bQzGCC6cmtAIepb
EQ5ZmuuScBonNEWBBAPcb24EVwAPXUkzsjU3d6Qgk6bs7Ym2NnhrCs7GEuug
QQiQcKdg3a3M3Eimbgh+pi44rAseCASPQgMxwiG6A3sYybXAytCKALCBTwAD
BAbQvmW70x7ge8h4mQtHNbP+jtiddqccdyID5BC4gT0N0oTDVkQPlGGrP8tb
MrIu7UBBOkidwLvAx1D3cyG6I3NKgUbUEv+dMdR1odj5V2fjn202SL/Wn2eQ
0dyvThxaww+sYvlU9njXM32bOYGdfaHdgnBWfzRDGNHGD6X3Bdey/SqguBAE
QYXSOpVSP5pUOxLXOJ5In0oCBoC6KkVQmcyvciiwQqpZABl92zKeABbXOv6u
dSqNpk6iisOz2a8LuH7Vg5FgjyUCH2Sah9i3fBBpYK4ZD8+Reb1l3Yxn3i6U
eBWJvUtlftXDIVCVNIxF0qdi2ufiG8ejoELhbWaJdwsEmx8YC0mtk8ijFmgy
JDvtkMVzlNmj803rm/1ft0aAvW8bc7sb8ztrcxtr06vr058+T63sTK3tjn/5
Xb21M/DxI3d+qndllvPlk+SPT/I/luR/zA7+OikF3/usFG0MCj+JuXPcXsBv
iN3J7axvoRVTy9PiM8Ofht4/++SMyw039/vHHW8esbnqZgtR+JwLmJXmR4+s
2Rrbkg2tLRACNeChMfcAwXgf3hAI1ACJrKEBfkRnG5djR5zc3IFArJWlMcnc
wBJxRUM7cyNHgpEj3tgZBzJxMgNhHBGZOGBNHPBQWpo6ESBigvuh+EFBihKo
iZvf99GQyvSYCxAI+Gk4dEdGtJ33dDjrYXsK6gjwQDsk+LqRIaADeyRPG3T1
D8UPLX7Rkc6G1ppJzg42mvUTqDicUAJ/BOUf4+7BFQFLVCiBP6SZe+kO5fkP
AuuEwfWiELo4vEMS1SN5wxx4A+D1CiP75Yl9srdsaSxjIJouDK3vC2waCEdK
4JH4GiXyCMKmiaSW6WQIf8iYKWVwtRJp+6waCqlRhpXLQivl4fXKmCp5NG00
oVAUVNIfUiYJK+D5lokCG5RvagZDqSLkiUVALILfZESBwjdN9BQgLB/yr1IE
1imD64dDmsciO2biuubiO2ffMuYTuufiuSupki95fWvpLeNRLeoI5mxilyqu
R5XMG82STZTNLHdubw9+2x7bXZ/6trGwu76ws7awsTq3sjH9aXv609dpwG97
V/F5Q7A4y5gdb1+ZZn5bkfx9Tfm3ZcU/oOadGfp1VPZlZGBbObAuFS3yuWNs
hoTZwuqqozdRi8tTo1ICbwf8cuLRcbe7R1zvH7O/6QH42Vxxtz7vSjpqj4Q/
J2TNFuwCkkDwQMQALbDfRTIFAlED1JTAJoY2eIKT9ZGTJ92OHLN1dibYWJuQ
CYdIGmKtTPVszHTtTA0dzYycsCh+xg4mxvYYY3szY3scKoAQnBAtGX4sjJA9
v1cKQCD8OkAahrof2r5ic9L1zyZSMEaAwR6QA99DU0rNiQxr1EVNHUnoni86
2d7IxtLEjmLqYIfI3h6Z5OzoqNlHtkWbKDQJnuMPh0RLEjRGo3Ciq9w/BoCg
B+FblbFNgxH1wuA6nh+NG9DGD+4VR3NlMRxpLEsaDex19IfReIHlLK9Krl+t
NCyP55vd55Mn9KfKQiAfow4GFEuR2RdVw0FUqW+tKqJOHZnL98rj+1TIw0sG
QvIFAQn0+8WioM6Z91WSUPC9huEI2kgYfTy6YSyiQhFQpvCtHAumjgWWT4W2
rifVTkQ0TETWq8NqR0KaJqK7FpO65pKax94wF9NaVDHNwzEd44lN8hgqxw+q
Ic5klnK9dnS9eXK1bXal+9MGf2dHvvt5ZHtF9XVt8sva9PbazOeNuc2t+c3d
pe0/Vn79y9LO5tDmkmBhtHtW0bY6zv7to+zvK8P/sTT0HwuK3yZl2yPCTUXf
urxveYA1w+scZjaLexpZXTX05sLi8vfhyT43vH86+fCo5wNPl7se9teBPRe7
y652F1xIx2wJkIw5W6F7qYAfuB9Qp01Ejt5A1gcpH1wBP4DwgDnmIMEU+DR3
tHE97ulyxM3G1cHCgYK1sTCiQFGM1aOY6VqbaqYB4KH0QNM/1PqMwRhtzQFd
VJplEwtABa6ADSR1KF2Q4AGK4GOWx1zsz3o6nDsK7AGfEHDtTrrYn3J1OnvY
8Yw73Fgfc7Q8Ykd0+47cv685I7nfn8fPUZw0a9eOGHtbIxv4FaOAH+Ickdmn
BBekqdUcefiCPUog+KRmg+/7IWL0YxFb1sTcHy0H9NHYyn6/Eo5XGc+rkvO6
vPd5Ncu7RRTUJYvqVbwpZ7yoYr8qYTxPbboB7/nQ8yih41YK53HhoH+JMqBI
HlA9EUGbjYH7PKR28C6C14cCC2V+2ULvDwKvfJFfuTSiShpZI4+C0rhaFlQu
9ikdeFUufVUieVYie16m9Koa86+ZDameDSmd9C8a9S0dD6qajqQvJzE20ztW
UhumE+vH4ukTKbWDCU3KFLoio3kwgzleot5hrP2vwa3/Ue/8Y3Lz97GNryPr
20MfV/sX5nnLi7ytNemnBcGXDeW3nUkoPdZWJre2Fr/ubuzurOwujm+NS1eU
gg2V6Ou4FGqN36cGwff+Pq/4bUq8o+Z+VrM21KxPiu5pceMIr07UW9NKy2uk
5VTXpofHv7hw94jHVfujt92P3PVw/sXF+oID5YydzSkH62P2RBcrU1uCpsH4
e1cJRC5DGwIke2BoAB4EX6BOj0zQI1toEwg6RJKRlSXWxhxvizV3wIOw9kSM
Dd6IgoPMEHVIiNFAo5EtXrOEi+w7mNlZm9rawM8d7Ah5rIa9FZKbOVmZ2BNB
GCcLrBsJf9gSahYg1hjCtyMZ62FneUIz+eeog+URG2tPO4fjjk7HnZxPuCKP
nDuJzHKxPeqOnu3VAGaPdCNonp6AsbdGKdK0rNhonu5hjy6hIA/7cLSG/IHo
QkEmoLohM1Qt3BzQg+qmdpammmcxoBEcfk00soCIAL+YkJzAl+BfXg9F64Af
VfgaqR8HAiu4XqW9zyuBxp5nJYynmY03s1vvZnfcz2y/W8B6ls168qHvaabw
WbboRSrvUVLv/Q+iVwBhpuBFet+zd6yHCYy78GIK60kG/3nhYGD1aHTlUFS5
NLxiMIw2HNU8FkUbhij8soD/oHkqhDYBb/AtG3ldMuyVJ3+ZKXnyXvgwmfcw
S+JdMR5N/5hGX0irVieUy+IqJAm0wXTefI36C3v+r9K1/1Jt/ffk6l9VU+sD
67uzq5szy6vqpeWh2VnBqLprXN05O8FYWezbWpN93VRtr49urk2CB25vLn/d
WP62OL0zNrwxJN1QDOyMSHfHZL9PDf3H/PC3yf7dcf72GGdNxVhStE5K6lSC
CjmvrJ9V2dtBbWrIzswOffjqwvHLth5X7Nyv2dtdsHK8bOdyxcXporPtSVtL
DytLNytLVxsissKA7C9oNkxJmg1TsCkcugYI//P1rSAtJOkQiXokS2OKlamd
Gc7eGOdohnPEYh1wGBusoRVWn2yKDpAHz9QI+6fwGIjR1tbGFIqhtRXqPwgk
DmRwNojCYJVomWzmCraJM3HB69nhDV0scYetoY5GYrSzBdGJQHa2sDuMPHDT
6RgQ6OF8wtPuGHKM1/Kwu8VhqCbQHTr7H10K6K6upgD5DiFy44xMeCYgj5BG
8EOGoLp+JxCE08CJdtHA/wRgD0wb8W1rCwgNaD4JnwnsFfJflQi8afLQZmVE
Tb8/lfm8iPEkp+VuSv21jKab4HsfOu8Xc1/m9jzOZT1Fdh+GI6BozRN4pzAe
ZvNelkgCINpmcp6ns55mcV/kD/iVyZGluTJlRKUqulYdU62MqhmJbBx7A/hB
Ulcl86kc9K6Sv65U+NQMB9aqg6vVIVRFQI7YO73vxfveF1kc3xJxZL0quWUi
s3umgPexUrrePLzNmP+rZPO/1dv/M7Xzz+mt/5xa/nVk4pNkeXNyeW3y48ro
0sfhudmBMTVbreweH+6eUvVMqVnzE6KVxaH1j6MrS2OfPo5vLk9tzag31YOr
Q+JVhWhDIYRSd3dC8tf5od1J0ZcpwfZU38poz4y8WdVfpeCXDfaVszqL2um5
NFpGWlbwrccnnU/jHc4QHC5aOl22db5i7/KTM+DneNrB/pid3RHk4aEkd1vN
roE1upShKVQhQzM3tDXTt4YQjKz7wa+/NhHSQoIRhfh/xw+cEwQeiNILCaSR
FcnY0tKITDa0BEGwJhpbI6PmNct0SApnccTK4iiF6EnGuRMwrubIUEd7gqED
wcSRiHEgmtrjsbZmIAtHC7Iz2doNGVVq7+lu43nYyuMwsEc+grQoaOaT/8sJ
0WcYfXfaPyFEdtOcKOZOlhZOVsgpZlc7ZDCvmz26a4NOJkdjLlKROZBRAjUP
oyH/eEJNHvf5B+bjPPazigH/hqGwWkkgROFi1vO87kcpjdfhJqf7IbBXNxQK
kTe79ylV4F8uDKgWhxVyX6e0PkzrfJTH8cpivcjmvMrheZcMBNWPxdFnkhsm
4oG9MmVYpSqyaiSsaiQEypNisVc+72ml1Ldt8g0UrS1j0Q0qiMthZdKQQlFg
DmSVLP+mkfRWdXbPRDF/sWZwvXXiN+7KP4d2/7+p3f936sv/nln7m3rm88D4
J+HUqmRmXT6zIp9cGJqeV84tjMzNK6anBkZH+oYHexQDXarB3iFxp2qQNT8p
+TSvmJsenJ6ULs0MrU3LNiakW1ODX+cUu8hwe+nurBQq351pwefpvrVJ1pK6
e0reNNxfI+VTRdxSZndhfV1KSVlcYtrrXx56Op7EevxMufL85E3/y6fvH3W4
YGt7kuJ61tHjvKvzcQcrVyskjzpsg5aTOFciztUc70YwdyeaOJgiE06sEQFL
mu44Y8DM1A7z7/iZ2uIg+BpYmukSMaA/l27QbhNTqIsNyUSQMYmkuUEqZQ2o
WH1LpL2E6GFpe9re4YKz9RlbvAfByMn0kANe117jgQ7mGGcCUqo44vH2OJwd
HmRuT8I7ktER9Oj2GSpI3tBMDwwQjcJgWSg2KIEIhBr3Q84vg/c6WVu42H4n
8LADuluNQPjnFh7akPCjkPmRUubyXmQyHwOBhbyXZf2+FSLfUr43lfeqmPMi
u/thnSy4XOxHU4ZD/l8iel3I8yrs8Spn+zWII6uFIbldL/N7vWoGwuvk0R96
X2b0vPjA8UbWA4fCK5WRgF/N2JtSZWDewKsc4bN80Ys8/rNczuNSkXeLKrpr
MrllJL5uILqcH14peNOoSO2ZKRZ+rFPvsGa/9X/6u3Lzv8cgwm791/jG38dW
/1Bt/HVi/S+Ty19HgbqJJcnYglg916+a7p9eUi4sj378NL68PLG4ODozNaRW
ihQDHJW8b2iANSzjTo0PzE1Lx8f4Y6O86Um+StY1OcRYnuBvLw1+WZRuTAvR
E76bs/yVCfbsSMeEomV0sGFooEbIK2H15HO4ZQ3N6R/yQ14GXj5+xerUDbvn
kb9EZfuEZLy6F3L16C8udidJDicoLqfsHY/aWLmSyR5WwIC5Owmow7nh8e7m
5ocJBA8i1hWHcTIFCKF6BQLRTphDZCNTOxMUP7wTDu9kjrU3x9gSjK3x2ubG
iDTr1YAfZINIEkgxN7LAg0wsgEBzYzLOgGxqQMboWyKzpAysjLAuePIxS+tT
NuRjJIwLRs/WAMUPPNDAHg/4gSGbu5AIziScA8HMDm9ijaSaiIXakpEcz8Ue
jebAGGpxSCeVLRnYQ4Mm3KMeiAp55Icd2dze0tyRgsyx1xAI4KGPYEBu0H06
D3QfB9nL+zFJFV2ToULwFXoX9L3M570AAov6XhXzvSAWl4p8wA9bxmLo4zHd
88mctayWqbc0ZWSzNLpVEt2lTOwcTmiSRLUOx/OWcgRr+Tksr1wesBdYoYB6
NqJIFlggCYS0sFwdnCF49I51u1Dysk4VWj8cWj8Y1iCLrhdHN8uSetU5orkq
5Xrb9O99a/9LufP/TEFU/fLPxd1/Lu/85+Lm32bX/zK9/HV8bnN4/vPIwmf1
4tb40ubY/JpqelkxviBTzUhA4wuKmSX17MLo9Nzo+MSIfFAs4LP5XEYfp5PP
7xqQ9AwO9QwquxXqrtGJHrmkcUROnxvv3VwWf12TbS6JPk2xPk70rs5xF8YZ
48N0laJxRNEok9Xy+CXdPdl1jcm0lrRcauhz//OX7jl6RV9LpgYnFAfG5vsF
vn96z//y2VseLqet7I4QHTwsHY9aW3qQAT/CYQtwPAAP744zP4wHEY/AvTki
NwLGEYdM2LY0MqQYY2yNUfzMnfEEF6K5kwUOigUHkj4ZQjBWzxKV6Z/uZwbI
mZDMTUkEDBmPIWONyaZGZHBRAyOKMTJCytrAwFbf2NbA0P6Qvq2urrWuto2J
to0pCEppfVtTQ3ssxtEc50QECLGOELXN0ZQS0MI4UqAghcQA0gM0PUMf3Abg
GVCIcAWhBoiGThNNcYEcn7cj4x2sgEDwQIBQ8zQQCpTDyMNBNNt/P/ADD0SX
pn9sw5XLApH1N1kg+uBIELXfB+6r5cGtk3HNkLBNxLZOx7fNJXYsJNcpIhrE
YbVcf2SHThbVLI1sHYnrnEhqVseUCP3LZcF1o29oU28r1JE5Up8MkVeW+GXZ
WNAH8eNMwaPKkaCW6VhkxIE6iTWVLV2uHtvuWPmb+Ms/1V//ewIsbvmbcmFH
ufOPle3/WF/7dWlhc2pufWJ5Z27l18VPuwtLO7MLW9OzGxPTK6MTy8rRRfnI
vAzEELfx5D2ikT7xcL9EJZUqB/vEoi5Wbw+nl9XXy+xr72TXtTHLOnnU3v4y
3kCpdLBaJqtWDTfMzXStfuSsLLGX53qXZhhTY61jI03Dinr4qlhSwRUWd3Ny
Whnp+WWhOWUhWSX+semPguJvvPnwJLnUNyb3ZVz+6zc53sHvnzwLvf7zoxPH
LzsePmXjfMLa6giZ5GkJsjhCJh6xAN9DqbPwJBE9SBaar+LdLCAQA4EAjImN
EdbOCO+EJboSLNxIJDcroqs1/PjQJ1ihzQnoLgligGRToM6MbI4jmWOt8GaW
WIwlxoRsYkQ2xNpijCgGh8jaOqR9eqT9h6z261MO6FlrH7TS16EYgw6QDfZb
HALpAqi2ZlBKG9shCzj6NjgDW7yRnYWJA9nUyQpZ9Ibq25aoaR9FGsOgeNe8
CJkbETVAVAiiNiQzW0tks8aODFEY4jgI+fVxRH6JzJ2t/uzmQsBDE8gfSKN7
Q1B61AyF0EYi6iBPkyHbFpUaIGuUYZ2L7yrlwRVDwVSpf77QC1K4D+ynlXy/
wu6nVOZLmiSUPhzZPBwJJpnWda9E7Fsi8SuU+eUOvE7lP0vmPf4gfV0+EZ4n
98oZeF4oe109HFI9GFrVH9Y9mq7aal79u3DzH/Ltf6i3/za2/k29vK36uAXm
Nrm6u7zx++f13zY/fV399PXT2re15d1Ps5szizsLc5+np9cnJlbVI4tDA5P9
AnUfT8VmDzNEkzz5wuDIsnpyfW5mc3ns05JsanxwckQxMyJS8Zs5VVR6agk9
vrQlrqQporIhorwqENTQ+Kaz6x2zN43FTGczswb6S/rFJaL+Yi4/r5OV1dT1
vr4tsaY1oYr+Ni7jwZvUu1kV/u9LvMJSbkVl3U+p8E0o9orNf/Em60Vk6rPA
uAcPXl8687OTvSeBcpREPmpleYwCVyANkAMbhAyQcJgMERnqApInkhYCAHpW
xvqW/8LPwg15BpzlYWsoXkCAH+jfT1uAIFACe3hLvLmVubkVHkfBmlkCkEbG
ZH2MlYGRpa4h+aCRpbaJtbapra6xrbahja4OWQ94AwF4WriDWtgD+4jIK0hj
vJUpyh6yyWJPQIW2kqLLOJpi4fuJD4Q9W+K/s4eEYyidbMga/KwQAh1IWHsL
M6TAQQZb4ZEuGivNIjYFSg90JwilDmnOJ+FAUFCA46GPjywQeOXzX4Ef0sai
gbdSeWClIqRY6pcjeJnFe5bJfQpZYj7rcc2Ab70soJDzJKP7DuRyhaJX+cKX
mdzHWYJn6fwnSez7oDTRs/T+5+/5j6nDAWVDAQiZfT5UQVD7SJp6u3Xnf4Y2
/ibf+qvqy1+nkH3YPxY2f51b2ZpdXJ9Z2vq08uvnj7ubU+tLo5+mx1amx9dn
x9am+qel8iWFZE7GUXMFk8LRrdGp3anhdQVnspc90cOb4g5+Usx8W179r92N
f/6x/r9+X/3H14U/Vue+zU5+HRbMtNXwMiqYb1v7U/OrvYoqXhWWvywqfVVI
fVlQ9Dy/8Fl+4fPSch9qhU9ppW9JlW9xlX9hlV9epW9ulW9K4dOE7LvRqb+E
vrsSmvJzZMb1Nzm3Y3PvJ5e8iM19/CbzcXjKg4DYO94R128+OWp/1Ix0GKIt
AahDDRCMDqgD5CyOWJM8bSyPOpA9IR6BGyBN7MY2UGLoGFvpYR1MIfiaQ26m
yf0gJiLsWeLQvZKDRCNI/wA/+JKFPdkYb2xpb2ntRHE56mjrStmjq6WP17Z2
s6C4E0yt9fSJ+7C2enj7Q8aW+w3I+/bh9oLNGtiYHLTQO0BEjnzqUUz3EfQP
koxA2mRj+KOBLc7QDv/jMBFcDayx8EfNkhH+O/moDWp2tFEZUEhQhhtZWmAs
iSYUC4w10dSWADKxxZvYYjF2OCS42xM1ZbsZfCO8X5dkjqIL3w4E6lhgob7I
5zyHTA8Nvj+G+aQyH2bzX+T3e+cKX8FNnsircMCnsN+rdOBVifB55aAPfSKi
cTS0QPgsg/0guw9ZDyyQvi4ZCsyT+HwQvYLgW6gIpCpDK4ZCa5RRrWPJfR8L
1F/pH//B2/5vxe5/j/7xP7M7f5lc21avbI5+/jL/5dunL99WNnZXR+bHxtcW
pndWZr58mtxaGv40yRkVNQnbhNNi/rSIPyPgz/T1TfP65njSVYnqyzB7ltEz
2cEY72ZPc0UfZZJ1tXhFLVhSMieErCl+3xyXO93eMJCf0xaW1RJAZYQW1r0o
rnleVPk0v+xRXvGD7IK7H3JvZ+XcyS2A+/uZBffS8++n5d1Lybv7Lu9uUt6d
uKzr0WmXw5LPByWdDXl3PiztUkTG5YjMq8nUx28L7icWPH2b+yT03R2/mF8e
B5w5f8eJdMQM64qIdJRsfdKWcsIOHI9w2Mr2lKvNSZcf3SaalRlrnBPJiGJo
amNgZo8B/IiuFhaulmjwhaISY2txyAqnadky0iGZIF0KFJyFg6WhubGFDdHB
3Z7iRDYhGLqfcErOjG3qqm5j1qXlxZ6/dsTEYt9BYy0jghbZGeoajDZRWwuz
dz/uoA7ZEAQlzwELQyAQFUCoa4UgBwI4QVAZGdiY/okfDiUQdT8g599kaUwh
G1uRTK3IKH4YG3OMDcIe/FohKzyOBAjxyCaOJVaTOpL1yAjAaD+GNtHsIMG0
RvOI8BpJYM1gcK1mkCOwVzYYCF4H1KHsgfsBe8UDvoBfnSq4RPKieOB5rSqA
NhpaPuRbLPEuG/QvlQUgHcjq2JKBoAzmy9Te57kCv1JpeI30Tdvwe+HHsqnf
ez7/j+zX/63a+rtq9VfFx8/yjS9jO9/mvn77uL37cXNncWNraXVneWZ7afGP
zcmdpR4lr6C1vLC9rFfFGf91RrQ4wJ7i8Ga5sjWJcInXOdrCne+d/OvI1H+O
qP8yqNiVDn2RKb4qh76qBjYUgk9SurK1a6KTNdPeOlJJ5SZl0P2T65+l1T8p
oj0tqXlYUnW/sPxOfsnt7ILr2bnXMnN+ySm4lZV/IzX3WvKHq4mZV+IzL8dp
FJVyPvz96dDkk0HJJ4LfnQQFJh33Szwe9P60f+JJ4DAu/25o6i8BCVf843/2
iv752E17mzMk/GEM0RNvfYoCRSjgB/Wm1THHH7uxaFsm8vApD1vkyYO2hlCA
YB3MIPez8rBBnsLmgTy/DwgEw9EYoCFI28L4EAljAvkeGWtKxtq42Zrb4E3J
mPC4oOXPs4trE7IRHoNd39hakvQ+6OgJir6xlhnpgBlFX49wcD9mz37sAR2i
PnJGEjn0ZLjXXF8Lp7cHq7sPfwjKcD0SUoaDoCDSszLUHFj7vkykadv+3if2
Z+6H7LkATuB+GArFjEIxtbEytbEA6wP8gD1jGwxUVXADSGsabjHge7ok4kEC
OB4ewDtgjtmPN9mHM2aMxtEVEbWSwFppEE0ZDkkgJH6aRxj4QfAtGwoCVQ6H
Ir1PI+Hl8gCqzLtC4QPXXMGzov5XSFPKaHSlHOm9rxmMrpXFUPlheQz/QmZQ
rfhtx0jWwBJSYqz+R//WP4e2/oEc9974NrL16/jml8n1z5PLq2PzH9VzSyoo
XeeWx2bXJtTrE20yRi69sLy3WrQonfnLvHJrmDHa3SJvrhVV0gaqOkYam+VV
VPaHGnExe6516AtHstkjWO7uW+rmLjHYC4zu6c628ea20YaeWXrPdH2jPLeM
G1fQHZxBf/m++k5R3QNq9d3iyttF5TcLSq8XFF/LK7yWW3C1uPRWXvH1zPwr
73MuJmade5t5BhSbdeZNxqno9JOgqPSTkWknQlKO+ie6v45zeRXr9CTczvut
Z2j6Bd+EM89jTnjHn/NNvHrL/8TR23ak48ZY90NETzPycSLpqAVEYfJRWxKy
JGiL7ul/7xF1sQT8MNb6hlb6GFsTcD/Aj3zYDgwQysYf+O03N9iH10eOiuAN
9mJ0sDYEXZwB3oZIdCA5H3MqrMhb3/n4cXVy5+vH2bkhDreJ0V1dU535/NkV
gsVBHSMtI6KuiaW+Lv7gAdxBXQsoT0wQ5IhG+wgGe3F6yFFxcz0gUyM9iNGa
o+KHQKhb6pCMQZrzAmbofhmAB5FU38pCHwpwijXgh7G2RN3PxNoMwAMhg8TJ
BhqzRbe5ATncfjx2P94UBW8v1gjUoYiqE/kXs54XsZEQXC7xLxR6Z3GepvQ+
AAME3ysQvwZnQx4TKQ+mSnyyOI/L5H41wyHIICCRX5UktHIgvIQbWNEXWSeK
a5Wl9Qzn8UZLxNM1I8ttU597Zz6zF74IVn4d+LQjXdgYWFyVrW6qP+9MrW1O
LHwcmZ5VzC6OLKyOTy4Ni4bYLez6wta8Fildvjo4sTsqX5P0jnbQpbXN0qrq
voJydnY5J6uSl1XOSSthJpdxUmpFmbT+D7WCjCpeagUvrYyXVspNK2S9y+tJ
qBSm14gzqgRJRT3hxT2hFeywki6/nPoHVNq98trbpdU3qRW/FJX+XFh8Ob/w
Ul7BRWrZtULqlQ8FF9JyzyR9OBGfeQz0NutYQvaJxJyTSbmnEvNPg+JyT0Rm
eASnuEfnnPZNdPNL9gxKP/Mq/ujDSLfH0UceRXreCj58+jHF7qKhxQkdwlE9
4lFD0jGc1UmS1QmK1XFbgBCSQHM3ipkTCQITxClTOxPAD4pWUzsM4Ed2p0Dk
xTogwwDN7MmAH/zQwfr24g6h0jLSNrLE7zHWxVjhyE4UR0+n2HfRPdx2YX/P
/MLIzJRM2Nci4tL7uU1VJe/Dgx46OOPwlvoGuAN62AO6eB1tPMCmWXJEj+4S
DOCP8KKO+SEdgq62+UEdC52D/xJyWgrFT2O/GEjYIG37gZ8BmWhgQfrXGjjZ
VJ9kpEfS1yXpHrI8BDeabzfR2B2Cn4ZABD9wP9QA22RhdRAlWS9K2C8qRL7I
CozEv0DkncZ6hOZ+IDBDKH7RFcKqoZCKwZBqRWTDSByAl9/rU8oKbZG+549T
ReOVitnGqU+9C2t9c8u8yXnm+CxzdKZXOd4pH2lTjbPmFyUra6pPK+rFpZGp
afn8omppZXzmo0oxIebKurv4za19tQPzfMmyQLYs7JtmNIkrSrozirvTqrjZ
9cK8elFObV9mFTellp/a0J9ZL0yt4SY18N/V85JqOUnVnMRKbnw55y2VGVPU
G13OjavgxJT2hBR1+FUwgmnciFpmUHnri/rWJ3X0+7UNdytrrlPLrxQVX8wv
OJebd6ai8lppxeWisos5xWczC0+lFZ5MLTiRUnDiff7J94WnUopOp1PPZZad
Sy098674dHz+idSKy1G5J8NzT0Xknw/MOOWTdtI37ezzpGOPY4/cDHG48NLy
+H1z12tYylkDwtFD5keMIRybH8YTPIiaJUESlCRYFwLOGQf4Qe6H1L8OZgQX
Irrwgnf6/vhmtGkBsnf0oNwerD74xn6skZbJIXAbnC3JiGBy9vKZxHcxFVUF
dTWFzM76cQV/ViXmddQ0lX/oaSmNjnrledIGPPCQ2T5jkuEB04Naxgf0SMiG
C4qfNh7BD8jUwR04aLYPyNEm6aL4aQxQH5mqQf7eJAb4adYAyWjwNaZY6ZkT
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
5sflf/ik4u33in7/ZtZv/9sf/uFbf/+N1376ldurRfzwldurRfzoiwvogFby
3Vdf+cYrr3zzi+Pvf+WrP/ral3rth1995c8An6+CzvIq6Czfe+WVb98KGOYX
c/xrf/6z7/7wn37ys3/5uxF1MUKUA2OkjYoKV7R1C4rKZU01I9g7qyldMN5+
1AorqRll1w2TG6GgsqMKqnsffFj06z9k/neQWn/x/j/+PvM3HWPNA3j4umJl
ijVM1C4QdJPzctS6dXTVPDCvgowBr1Nj1ozDeA2CoO2jmKAUYy9R3sQwdAlt
ULlzQG5HM6Qd04TC2bVSrqo3dLboPBzRxeHyQBfAT+xuBJK46vjGMqm1WmWp
UeqqlMpKnbLWqK7Xq+rkqmq5tlZuqJfp6yS6WpmhXmNvNno6pLpK4H5aU53O
WKfVVapVZWp5iUIOOKyRy6olkjKRqIjPz+XyMgF+bE4awE8kzpVI8wXCHL4g
WyQqkMnKxMpKkbVFYG8VOdvl7i65q0NsawHgMZUVPE0tS1FJE5dR+KVkfgWJ
W0FglSxv5y3Ss3CszDVeLkB0k59D4WdvC7MZ4lymGKy3x1R+JlWYy5AXMeQl
DHG+SFEgkmeL5XlSbZHCVKl2Nmg9rTp/p9jWxDM3cAz1bH0dU1vH0NRy9c1i
ewfPXMe11nJNteB2rrGFb+pg69op8haSuHlN2IDj1cyxKqYYxWPUHDQpHbF2
D4m/h8KnYVbTBonpmPUMQCaSmIFYzYDgHnTN32ua/Khm+I/VQx+UY97Lgbzx
ccMvP6j87dsFv3636Lfvl97a4Nv5b/zq3i9+9uu/fuWvvjgx+J1XXvnhV177
yZ/d6sff/upP/vyL68t86ys/vi3Lr/7w1df+Clji177xk6/969v/8vaD37+f
8fYf7v77Gx/96pdv//Mv//B/v3Xnt8VN+VXdFR0DLdCJPsw8atxQPG2unNFX
z6qrsMJiGDltiJ274ehaMNThnW1r3h68HbKs71uUQ6fZvaObHR0TxZ2TJeX9
aWXQjLyOezWo4lnW2DAJ0bvU3IdvJhln6a65FR1ywzawrO8e4dfOSLvWLUM0
x/CmEbZp6GHaINv6FoKwmCyv4pvbJNZegaF3W9a+QC6ZJhavsWp9p7OOoxHD
DlwV6pL52uTeZpWvWetvlttrNI46tbVWrilTKMq06hqTodFkalHo6hSmRoW1
GUhmbZLbmjXuNpO/W2lp0NoajY5mg7VRo69Ra8q1mgqdttpsareYO8FqNDZr
gFvKSgCEbE46QE4iLZAriqWyQsCeUJgPgiIIkNvKcpqummVuENhbJM42gJ/Q
2AAIBPixlTUMaTVdUrMtqSfxa/CM0oWt3EVa9tJ2xsp25iojc52VReFk03jZ
TEE2SwhaTCadl0nlZlD52UxJAUdWypOXiOSFQmmeQJYnVhXLTVUaVzNgTxvs
kjhbhA6AfZvU0yXzdkvcnUJHB9gIEk+L2NskdDeBX4GUovYhZE4YV9/L0kEY
mh6qqpOsbAe7GyeunuEVY5l5Y6RM7GYW0Dg5AxwPbaQPbqSh1tPha+l9K/c7
5u82zXzSMnuvYfpuEertey2/fr/iV2/m/uKtvF++U/ibt3J/+1bu736X8euf
v/vffvDPP/rm3337lR9/7ZUff+MrP/n2qz/+9is/+rNXwFT91iu3Tvjj1777
j9/7+9f/4Xd3f/Og/E5hc+7ADHRle3ZLuLrOXsJRJiZwqPElxMLG6AR+YG5j
hECf2+AsbnCWkYq0GXvFvKUWKy8dFZTdXrJcUkuwdElOZ8gx1LS5eUxdN2/q
JliQC0rYOLNjQQDb1GBRq01wfNMkAzFOhS/yR6eZ6N6FGgSxiWKeYLgnV3X9
BF3ntLhimFm4pGjbtCAYDiTNAuE4ehQhqMLfI7A2bCtLJfZWsal1W15PkzZt
8BsWqRUzlCLL7rgxidJE+xSBDrm7Re5oUDjqlPZanatBa69RGiqkqhKlttxs
a3Z6Oh2+HpW9VePpNgT6gDT+brWvSx/oMYZ6zKFeS7DX4u82OFuAB6p11QZD
ndncrFY1aDVNRkMbIBDQqwP0qisk8hKZsgwcgLsBKdRVoK2IpGV8RTlFXrKp
LqPpqpiGWo6xjqOv5mpreJoavrqWp6rjKBt56haepp2haCULG9bYFavsYgIj
F0/LxlMziNvpZFYmnZvNFuQweVkMbiadk8Xk5YBmBCo56ObAt9UG4OcVUk2p
SF3G15YJ9FU8UzUIukJns9DVAiRyt4Mo8kUa6eA6mqXBViCQh0E2Vvph2vCg
2jsotiC5RhjHAGUboSxTP93Uu2W4/RTxqrx2gVm4QC+Y386foWVPbWVjKZkj
m+lDm4DAB7C1+70r9zqX73Xjs9pXMquwn+T2v53W/If3S1//Y/Gt3sz5ze+z
f/tG1m//7ZNf/Pk/fvfVv/7aK3/56is/+NqrP/3zr//ND7719z/+zj/99P96
919+ee9Xf8h794OSDz4oev+9wnc+KHjnk6J3y9tzB2Z7l7ewuC3s0sbIFA45
sQRd2hgis+e2BAsMKYElB1pr576LVmcOSrNBAVlQt2z7h+iB4U0Pkhodwvv6
pyyto7r6MXXjqLxhkFOD2Koi6jCrCgxitW58u4dqnF8WDM1zBlg2HNuOm+dB
sPTmKXY92QhhOaGzgsIhWjrZ1E219NNtELa9S+zp1EQgxmiPMdyh9jYZgp0S
SzNNXs1Qt9CUnWv8piVWpf1wyryH0ScQ2lCv1tehdjWrgOMZK3S2ap2lSqkv
V+jKDNZ6T7gnkkKE9gbMkX7LDsq5PwRkS6EtOwggexIVOBrx7aFdcbg10GNy
tpjszRZ7i8PRpde1GA0dZlOX1QLUaTa36owNt/aoq1Zpq8CB3tQIbgEzHeAH
DIquq6Yaa+imWrqhZltXQVeVgcnLVlYypZUMSRWwPoaska1so8vbyKLmdW4N
mMJrjAIcOQtHuk8g39/czqAxsxjsLCYnm8HOYPNy+aJCoaRUKC2TqWo1wMDt
rcCi9Y5mjb1RbmuU2hqkrmap94vc623hORsYthq2rZbvbZb4OwS+Fr63EYjr
buTaW4TObrkHCQKM0IRgaPqA6EC31z7rpeg6iepmorxulV9B5FescktwnKIl
VsECM3+WkTvFzB0kpw1spsPXMyDETCgpr49U2LqUWT16P6P1nQ/L//2Dsjc+
rnz7veI3Pyh9527VJx+Xf/x2/nuvp7/1q7tv/S79vXfy7n9clpdeV5bbWnG/
NiOzOSO3PS+7NSu9/sH96o8fVH6UVvXRHzNfb+gvHl3smyLA54mohfUBHAmz
yZxgCBeYkgWOfBmILVvqFX+A0WaiRBk9lLuDnNI5Rfu0tG1YUIuR1k0Y2+Y8
PUBjuiY4vwRCL+jfKl6Q9s5wuza1IwLvCs+1ssRDwZfrxsidRAl6VQwlSm4v
dSQNDDGMbaObHy8JCiXBAa6rn+Polvh6VaEefbjDEm137HQGjxHWaJfYUsc1
1PNNnTRV+6asDexc3+Nl++m4KTVgjEHNEYg10GVyNmnN1VpjhclWa3U2WN2N
Dn97IAmNnwzGzka9xyO+s8ngxUzwYtp3NuE9xfofToYeT8UvZ6MPJwIHGN8O
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
GKwx+cp0rhJQfOiKArq6hmvtE7jHOa4Zvm9ZGiML/WskLXZNgaEZsEwTlqJC
k0SwTTGcLEH+f0y9V3BU6b7lSQHy3htk8OU4BRQUVEHhEfIpk0rvvffee++t
0ihlUkp575BA2KKqqDpljj99z+l7z9zpfpieh4mZjomJfpv5BPfenogVX2zt
JIUgf1rrv1Jb+5vY0CWXNJll09rTyKvfzn/74+L+QebJbvK7VzOgEfzwdPK7
3bHnq7Ffns/96dvVv/+08/eft/70dv0P3y2DTvHXXzb+6Q+7f/vj7t//9Phv
f9r+6x+2//y79T/9uvbn323+8eetP/y0+fsfV8Fc97tvF37/Ove7F9O/Ps9+
v5t6swWoC2zPuDezrvWsczZlHgsr9GqEzUaKR8QT48aZSdvctHtjOXHwePpg
J/vqae71QTY3aZaJIHj0VRL+CxLxKhz1GRx7CU28iqNcJ9C+Gj+Q+1cYnnla
4rF08sCQ2FVH1mSxTWVqR+9fEpkyROs0EfDpXSaZJkdMU7DgBnf0sXT0sdy/
zLVOUsxjBOsY0ZYheaYZvhwjuMCMrnASG7yxx8KJJ5Lx55LJbyS57xRzr5Rj
G9xAhuAdxcXGWcD90gvS9W+8cweW6AJ/clu28kw//1i6uCMBsTs5y5xY5E9u
KicfG5a+CbzH7/Hr1P7T+FhCYtMhVbxOMf02h/BF160KNuVi2I1an1E/WfG8
2ko+W02vTQTnE06vkRl20/0epN70tUz3od593pv6OD55MT562e/6jdd2dTwO
2d+Q/PyN/08/pf/8a/qX30Y3NiTJFNxs/9ruu/P0jeynP1vT86jUEi2zwZ3f
l2291r34reXHP7j+8Bf3n//m/ss/Of/pn51//1fHf/ovlj/+q+GXfyh+/Gfx
278LfvmH4Nd/5v/0N85v/4n9C/jwX0Q//k3w5o/st3/lv/2r8Js/cZ/+RN96
g197gV1/idt4hd99Q956RVx5Sll+zt78QfPkT769P8c2fomu/Zyc+z62+P3o
xs+Z1bfJmae+6X338stAbt86sa3NrGkyG/rkoi6aU02sOtYPEtOLztExrT8g
XFn0bCz6Xu2ltxd8u/O+rWnX/kLg5Vrk9Vb8m+3RN7vJ75+k3j7L/PLN9O+/
n/nTj3N//O3c797O/PJd9tfvp3/9Iffjm+wP30z98Crz/Yv0myfxV9uh5+ue
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
7sKQX/UNXensvfTVrbMffVrferKsvqmwoupYfvGRysZjpfWH1AEV1Bze/zmv
Gvx1BQV1hxto/scd/443HAewHW8qPNrwb3p/lzaEBgHE9DLlKbl0VK5Mq61z
dseSwzpvtc6bLXMmsPo2XZG9gHPFKs/wlZMc2RRdN8t3b2liT+yRPZtvRW+f
VXiXDI45pS0nd86rnItK66zEMCPUT/NM8wJDjm3PcVVRgi6E908KA1OiyILa
P68EgI0992ZeeGM7Ft+Syj0rc89Ig4vq6Ko+tmGMbZpjG6bEpm1qy7Ww47O6
qSoNXK2GK1QjDH5H5/BH9hh7clnP590KOlETo6yxIP09gREbOe5lBZ0UlWKQ
wvkaxbgqcg0o48gO5vmTj44MKc+ln7OTOxzzKFxjG5SreqwmuELySCa4o1N3
kKifYukfj1DPYUSXgiuc3Bsn+CItk0J1nGadYPtnub4pqn+KFJ+jxGaJyUXK
2DozvcEMzRNNGaguOaBNI0yTVJZzwLsodS/JMZpujLafZIZ1cu4MKyB9wr77
jI4bhLuXEDfO9V1svne+5nprzeWmhist9Z83NV1rbrvZWnu5uupCWcv1Ru2o
cubF5PK388H5oH8mML2Xm92bj83HYnOB2JxvdCEQmfOE5j2Te4ns00xo0Rtc
8BhHNRwz/WrXxdK2wqqTZeWtxYUNx0tbi4tbiwpPFBY05+c35eU1Hs9vOJ7f
ePR4/RGgosYPSk8cL246Wth4BByAIe3U6cpPPqy9eKHp4mdNn11qvnCp6aML
dSfPlTe05Nc151fUHC0sPVJc+kFlVVFNbXllTXFR1dGC6g+K646XNRaUNBbk
1xwFKqwvyKs5fqwm/2h13tHafKAP6vMAbEeb3qmx5D82s4bK0BgdmReQqsdM
moxZN2G1z/v8GxFlWmeasbpXfOGdWPJgLP18PLgVNs8a+TGmbIJnnFNaFzWm
nMqcVTlnzYEVlyNnsk0bTBMa/ZjSMKEE5/VTCkWGr50RWJalrmW5PsXQREjW
FMc1xreP821TosCaPv3Mk3nhi+1YfYtaT07pnVWFlvTRVVNs3TK6bU/vulLb
jvi8PjgmVRlQai1CIhsUyQah+Ks9qM8iCxoAM4tzw2ODJcLkmI8QcxFCNpzP
hPHZiAE3VaGEEFlf05WPPLOCzHObY02kymLR1s8nvhWnn4pl/n6G8r7E0G/3
4gGEYvkDsfoekvIhjHYeK77McT4KrgtijzWJPYczp9ImmIYUwzHO9ExQfROk
cJY0Ok+N5gijS/TxLTDHMs0ZpDwEEQcHFQkS2TqkTDF14wKkFjIs70Lqhrp4
9x8y7z9gPXzI6uxgd99jdt8kP7iMvHlh8OqJr1rbvz7ZcLWx+mJV07XGxi/q
az6rALrUe8E2YV7+biHzeCy+Gg3MBQCHCy/mE4vR8JR7dDaQWg5H5ryRRf/Y
1ujYTsKX86jDSpqG+smdCyDdSlsqKtuqylorD/eDPl1ZfKqqsL3svYragEqK
WgCTBYDMkrZiMIMd0lh3tLSpoP1U7emTtc3N5VU1ecDfquqOVzXmVzTmldXn
VdYXVtYXl9cWV9eU1dZVVldXlpQVFlXlF9XmVzSX1rZXVbdVlzSU5NcebhJ3
vLYACIB3pO6dGgqAPmgsfE/d8eay9/oKffNz6NWLg5fvEO+NyGEIFbJfAHnE
7Ojl9QxLB9BaBM6AxhsxBBMWHKD0MIafwEtQZBmONMURRpniMEs1KjFn1Pqk
HKxAurTCOKlyzpt8K1bXqlkJ8FtXgTTXZTjKMFkboTnHhY4psX1aEgTj31Nv
+sAX3rR45rWeGXVgVuuf0wUXDKFl0+imY2LPn9pwWKJsjmKAL4Wo9Sga6yFH
1Ptw8COcuDO4pOdYoCTGdZMB4nUi3RaY2wS360ZMygGTdkQh7eVJOumSDqUf
58iJDDN884os9trk2qRH9tieZYZ7lmVO0sQWuNgMk5lHmPIHbM1DovQrsvpr
vrvfOEmKP9GlntlC69bAktk2KdFGqboo0Z2hBbP0IHg0Rw1O4cI5SmqNO7rC
tWSwUv8A1w3hBdEsP4bmQlGdSJRuACJ+OCTrhsr7hmW9wABHVIMwFXREOQwR
Qx5xO+/T73ezHnbR71+B/KbxSnXNZ2W1FyvrLlU1X21o/Lzu+tBV85hh4bu5
8IrfOmUOrwUjy4Hc9kR0yufPOMMz3thCcHQ1Gl0K2cbMrimXYdQkskuu990q
aakua6uvaGuqPNWU31KR11p2vKX82ImS9zp+oiSv5fB+pB/UH8trzCs+tMdi
YIyFTQXlJ4rPfHTq9JnWxhO1JVUFheVHS2sLKpqLK0+UFNcVVDQUVzWUVdaV
19RWAPbKSouPHz9aUJpfVFlU2VBZ21Zf1VpTWFv8QflxoOO1RYebItUUvNul
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
SHxtFmZaxmoX4KY5tGuabI5j5O5+nqWDqb9N099iWu7y3J3eJZpvhWqYQigz
g7osTJzsEY522dYwY98J/U8o4LmaeYRpnahaRElmhjUrSNF0nyTXp14a1i6M
WNeImhwu+4Nz8Xej4Q1bbNuTfBIA7M29TS79nJ79Ljr+wp16bPLNi4xJgi6M
MMWQtlGMNQzT+uBc8whe0U/VQelGKJR3u49+DSa4gxTf5zkQIGf5ThRgTOwh
8R04rg0ntBNEJjQweYWLJHZgxS6CIkhXRVkgguGSTpx2UDnKMYyL+W6S0Ecy
psWaUT7XQ8Kohx7Rvr6LvfaIdHuI3YMSQnEiGFNL4ugow6Selk9q6k6VnbzQ
WHuytOXD+jOftp3+pP3chbMfXv7o1IWzdaebihqr8urLCxrL8xvK8htLAV3F
J4pKWopKmvMKm48fbTx2FKxNeUDHmwqB3uF3uC9bUVNFYUMlgLawtjK/ujwP
tOPqkoLaEhDNeQ0lxxpKjzaUf1BfcaS+8khdxZHa8sMVDIH1ZccbywDARU3l
RScqitprCtqrC9pqwZrfWmOdt/o2fK5VLy8shOmQLQ/bL6MvcaJM+SRfOsZg
BIakaaRxFmOYgTuXUOYcVDU+JE1A5GmIdmrENofxrpIBeMpEn25i2DQNV41D
pOkeTQ4KGopxBW3fI9kOCIEfuYG3bN0OWrOFDXwrGv+jZfKPdvsuW5HDKmfx
2jmiZByumyO4t7nmVZJxg6BeRmiWEMYV7OGVD/FuUbxbNwF1LuIB294tKvjk
jm2C+ynZ9ZRsWEb4lkiOKbQpPWIeg9knEc4ZtHceF1g93CI2/pjumAcGOBLZ
JTtXEcbZgeBjfOyA5NyAKbLdmtyAY5NoWsUoZgbUS4OqRYh+fciyA3c9xkWe
c3VzmNEXquxbT3DdMLrrHnsamHgRzH0bX/zx8CrQyVfesX1LZFXhnGKDYUAX
ROr8CKMPofWhBFYUWTPEMIKJDs93YhimYaYZyrUjpH7Cu6kPC+Y9gRPPsaI5
VqwI4GfAKCw4lYOicBBlbpDCh96ojrGBBxJ1Q1wXzjIptkxKjRmBPi0Q+Yma
BJvtwCAkPUOchyP8XsAenDcEZUC6MB0PYHcu3b9Qc7qk+nQh0NHKIxWtx+tP
Vdadqmk829j6aVvzJ+0155pKT9aWtNdUnK0rO11T3F5e1FZS0lZc0lZY3JJf
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
hpjKgMpAmY04z1uQp2be5nXCWzIAfpDfUlM8v6HAedGBF+8FEk001UjAgECl
W4lUk6QaBAggXoth9SjeQIBA8FPQtOwEWkYqv0onJgQ23N3XMdL1RrpuaoE0
XuZAACtnmfp5oTRLF0aZ+rTSmNRKvQIoHngu4AcrHNfOLIVTfbB6EmlzYCC5
xQfCWI+bmEpSM3FhpSjMZZWFHGipzWTluQwE0FM/iHQZ+EwITaT60tR650xv
VNSpAtbshS5zriWWsthEmFwqC9fGzFaZ3siTd/tUi0tZ+0LbO9c2VvLCiNvc
KhobaXrCwod0YsrMnAsab3X1W23/C2vlSkVOOamloHAhL14qKjfq8rWKWguz
51J0zkamzMTuGnN+4VaRB7S23PQZL38lSpyygr3nof4LOIBH0Olxcs2uvJKD
4sEj5IqJzU9AQqM9Jj7lFq4Uu51aC0Ziy8lcivIvZekrSepCXn5tTp7rkLmc
3BiRmS7a18dH9szKn5y5E1NXfh0urMOZhR9qKYS0Xe/I7E4sQ7+4O/Ei31EX
3Y0N1d3tfNbYEjp3zmRLa+wZtT2vcZZUjpLKXpLbSzIYfZLrLMnjfVugplfH
eMooF8AzExoTrrVTJnfa6snYvFm7N2eF7wN4g/oBgXT9o085P/z+8z/9q8d/
+ncH33/I+fhT9k9PdMdCB0fuE4Ljg+Qa4iJXWqcLyXUhpSYigQ/tlCxY0eB9
Z3oWwns+dVQg9LChREQanmjLGeu4yEEo2YpnW1S+ky50M7ACfmQ1jpYQAqzz
zoihuoIYQo/IDBLpUbK8ztcuSuWLPDBcOKcar/Iw5WsqtYxVL9KNi2JlkS1P
iu1lo7Po1Md1qk5SrUS6Q8GAI9cvnPm1EekIPRUGMVFQEM8W6txG56+dgBhm
ZpLMSFiby4tDfmepaJ4qyAHP3ziODXjEVBjtgZ4oStfGOBj3gFu8MU3+JTr4
OphcKwN9NrVRDb7xU1v5bgvxlQ4stbZVjl6b1l+5z3/ubm9lrXNp50rRvpZX
rySgXfW3qvbPDKVreflSCexF+7Tkkp87k6bXIqAutRHhK176QhpfcOCg9EpT
uFXV3+vLr5WJMy65067dm3QgYtQ5r/xWWX2ngmN0QUfmtNBoH9b0pSBzKcms
FeE2B555ciEGFQ33j6PD4+iE3vmZJXUhxVYibCkODPmBoZBYG9KXrtjYEO7q
85tAauHGhrb8JgT45U9DoZrBU1DdX8gGwQw6qTOtdlA6L2VxYKY7CNW6kGx3
kYUfrFOqRsTqmFCDiwzwJTmFvai0FRTWglSNs2DMlMhACiWBXR6zJnSOFBRq
lzNtNaKau32DGiAwVNopIfwskFmR++iZ5Cd/9eS//cGPfuePP/q9v/jsz360
/4Nj9R78OG10t9UKtE6LcCA3qnxSlVeuCkpMmMyT213mGWvv9lFT47A9peO7
mFzHiS4u85VN0Koyk1imjQN1xV4WBg7SjQRRQePF6H0ZAXKgRKS6FNUhqU4y
0SVTY7K0yZTOc/lNonKd7n2oNF7nUqex4nkC8Kud5WurfG1eac4bzWmzOqzm
B7niKF+ZlqqzMqzEUI32pLGuxJ6jlS8c+ESRXGggs3nLJ4EKPT0SJzucxkKR
77CbY3F5wM9OxKEmgxhLiKnYXT6OdNlAYKDNQMaC/JUBeBv9S6jyxkKeKbJX
2taXrtJrffODufnGlN9KM3N+aSkoznjp3nFlzs1PoWWzC2tOHoB5KcnfiuJL
WnrDo0558ckJPmMWLqX3m0hhLV7Ls1fS8ms1ueWDS3a+tuZu5dAXcreS/Btp
/pU4ecWjLrnpWyEcp24EuZci/IwF9TY8PwyMnsc3DHh895bfSh1pCYNNDtLj
h9rMcI+BTtiREbP5hRVf7jZ9hYZce4Ph6fLwjaH6LkKtneGutngWyKwAP0v5
Ailto0Ag0rJ4i2pgT48KQFjMhNRCKMAiPUmzPa6/s2Cl2i8BH5R6ILCJtKhc
GRFKQhxphK3E+NqEUJcUaRN8LXl34/EIHWxX5GPIgjxDHPqFxpf3uO8310UU
MDbSADLoy1tAZo2YQOw5fiL8B8h+v/KdB7/ynV/6ne/95p9+/F/3ZJ+rQiJj
XGqICxUhmtj7QhFkqv0yXVBrQtQOcrfjOlg2RGpmpGFHmu5ow2PAVSCAekyO
dn2pWSQ1iuZ7iWJnp3u5dgpkEPCDHAg1AVYQLmgldxAmdxy2dxAmenFqgqUW
ZG5NFi+SoHu5SzKzidduMuUzqrhKVdeF5qpen9Yqg1q5Xy6OCuVZobYs11cV
WIMVnr/EIfpKe/a48yYYavF8dbY1uw8vUKDOAPWjhrz+taG2kPY3yvJUVDxV
x3r8NCA6V7uL9EiLn13pw21+fCgJd/mxoRD8F6hr/sxVemtO36jIc2nuRlm8
VkJLLW6ltQt5fsFDG3tk97CyEQ7faKERxMdH1JpZupWCY6bW/NSKl1xwgL32
e0PpRpE+41deKUDliq8V1fea1KUQ1vm/BQA/73AvON3PvxWXvpDFt/TY+rjw
TlJ8L4Xj8GIf1vRLfuoln7hgpl8Jsq+F8RWz8cZOrTTxsRi60u5S5RkfClR8
yYXeEZ7QYnNuaMK11WnuDhdbGervY6WrcLSjL52Hs6c+cmRr3uDVi1hxE4Hs
B+Z7v3dUExFoIqLdBEX6kEwbkOiCUjOiAvO92/RiCddcjoxBj0sBP56PJgic
iCNMSZQljpzoEnxx4FAaooPzKkJcRWjHqsjNNeE6V8YWKLiBOiuhN6JQQGQQ
//RRnip4wrO8eMj+2z/8299+8K0HD373wW9899d/+89/6xHrU5VPbCE0dvLu
9GD4xBwXawMqc8TkwCwOwmAn1M6k2pfVBYoWZ0pP9hGk4beQ2mDFUVonimuM
6Pnyw0S+tztPAqVj1zuaJFgkGCU0BRisEserGFHDIRzuCmyHyoxJchChJmhp
mwTFA8/NrrH6bbZ5Xcwtk+kJWTktttfN2qRc6pUqgwp0kMI4W5kXq4sScGhC
nqb6anfqyEK8WH1NDN6H6reuUIsL/tt4ZStd6kItWmEtq12ondlH+IBDLaWl
K3Nqqc2v4ZdIGm8q1l+muxdhsq3y5tjUTLv7Ly9/7h38qz91Kyt9oUFPedhK
gMw44SEjsRKWb9Xgp8iAHmzux4cMasGHgAdr+pRPrQTgublTUbxLi3WP82th
8UKaWnML1+LhN5bWV3qw19oXmvn/5R/9L1futTw0O7Y0HiaumNHVXvKamXvD
j2+PYuuD8OqFrvoj/+zz0PJ5bHsYv6RF1/u++efBxTN0C15M9/UOAwM6/F5k
X6rISxG6ZcUvGL750+Qt29L6FIUKfKtDZ/L62xCwR0091MRXu8DBcAurUPMK
q2yjnVsyOXJB7wAtgjwGCV/mFYhdArGdA+ypPRyFkyl3MzQhnhWXurMaX8ng
r5gg7bvLBmdZb6DkgjCT5T3ieo9B9GRBED2GMsxRhTlSL1PopAkcx8og35U2
hCvO3V7WoiXWcMOBLsIzR/li8wuhaV9qZXznb3/vwa88+NU//PUHv/rgl7/9
a0+YL+QOhZfyhHPe3eVFTiY8GUvYYI/a3HGHm3C6CNtuHw6qs6Aa+NXwZSxo
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
       "], {{0, 160.}, {213., 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{213., 160.},
     PlotRange->{{0, 213.}, {0, 160.}}], "\[Rule]", "\<\"n01440764\"\>"}], 
   ",", 
   RowBox[{
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJzsvQV0HFe2LnzX/+667935352ZTBJbFjZDNaOYZVnM0KIWNIiZGS1mybIs
sGRbZqbE4QlzMpmZTJIJs0EWq7m7/l3Vkq1kMhfWe8lM5r+1dk7K3dXdVec7
e+9v77PPETGrOEb9//zTP/1T+f+CJiaz2resLLM29tfwj/ii8tzsIpUyuKhC
la0qc8n6H/Di/NZ/2Dn693RYUFSPojoUNaKoCf8n9p/FiFp0qBlEg1o2MEE1
uMCFBvwC1GJCTQYztKh5S8wG7HP3/mkVeH/FgC6hKHyFFv8teAV7y4T/pGH7
563v6fEXLfBD6/jv6lCTEXtlp5hRiwX7v25bLH/rPvx7Pizb3Way9vzWq3jX
WwxYD1vudSSAYYCuXdtY1+i0JovZYh0L0OUWVG8wYScm1GhA9TozvA+tQY/q
jCiOFrpuQVcN6IrWvK4x6nXYYMC+z7RD9Khxw6hZW8d/Cx9LcBtm89ZguCdm
7Beto2NrOPwNu+9nedxXP8sO2QbBrN2WDdSwatKAaFAD/rpRj4sB0zqTCf8I
9P+aUbdhNmhQE3zknpWwYmSwmDeNeuwC1GhVYh12jfUX7xmTv5Dt+4TBZrGq
9H8ff/Uw44pkVU9MlS3buBi3TeZOgetuae7eMa6soxodasBFa8TUVKdHN82o
1rJtOE2mNa12WbN+e9u242LWmnVrus2lzY1l+EUTNjAMWtSwiRpWUN1tdP2W
YUWHft8k77Qwlq17Nm7ftu6/8f13DyPuXtdxD6nB+9x8zyXeE90O92gC7NAN
C7phAtU0rxhNS2bjEmpYQnV3UN0ialhE4Z+mZdR0FzUuo8a76Nq3gBuquYPL
XVQPF8Prq6j2jkl/W29Y1FqWtOj6JrqxgW5sYuNka2jpvnsbum33bdkC18oN
NPjl/338tcOIg7uMtxpcobCe3MTx3rhPqjBraAFmA47TsIoa7m6BaEUQ07xv
0S/f1b33yq0XH/3T5SMvz488Pd7x2FDr4/2NLwy2vTrU/vpY51uT/e8vHPzq
2qnVF2/ofv8iuvgxuvYlqruFmu9gYrltRm+bLKsW3AhbbYgVX+vNbG6xMMzJ
4/RAh4Fr+W/9/fcPK76rKKaSYGaN97pUg58AsliHgzs14qZUu47p4Not9NZn
6Advrz1345258Qs1BZPy2K5gr84Al1ZPYZMLu0XK7HBBuj14A16CHhGtl0/t
4pE7OOQOOHFmD/pJhkO8pmRh58uz3zzUf+vpC+Y/vYx++yd09QtUdxfVajFc
cUW10nu4kzXUsrkDYovVZluM25T9v4+/dhjx/gNwNUacJum2LSGGrBlHFuPB
66h2BdUsArLm5x7/Yu7g9ZLc0bCADndxhzOv24XX58odlLJHnNkTLtwpN+6s
C3vWmTklZkwJqXMi2oKUecKFteDCnpcypyXMQ2LGhBQZlrJ6pax2CbPFhd0f
5H6uIONP0wNrT19Fl+6g62uoZgMbThgp0xlM2nXzpg6jcFuG+v8PtHkD/BV+
mEwms/kHxjBmTv+jA2dTRiPGcLTrJi3YO/29QAljMQYUuK1mGV35xvj6U6+O
d5zIlnVI2X1iTr+IMyhmj4g5YxLOQQn7kBiZEyPzYsYxEWNBSD8hpJ4UkE/z
qaehFRCtclJIhBfhrQUR9ZiIPieiz4iZUxLWhIQ95swelnKGnDndbvzpzIQn
+tuWnn8cXcTVWb+MahcN2iWDGUYgxg3WjeY1/RYZMJi3HMd/5mF/dgfAqtfr
recajQYQh3/Ci1bE/3P4onc2VtctBv09mgqf1WrNayuoFpBdRb/9bPHG+Udq
cgdCXNvdqf3ujCERY0zIHBcyDwoZh4TMaRHjsJh+REgHyHBYMUzP8Iln+YTz
PKw9LXQ8iQucnBYQtrAWkI8LKMcEtCMC2mEhbVYImk6HbxuVsvY7IxVCUq07
ey4v+YMLh9Gv/oDqF3Ffv2bQrmFPh9/nrRXDnVUM5X9gfAFQgGPnKz/4mPDi
Dyo4up2/WjcZNyDQQbERY1xZQtdAZVbRrz769PzR49nJLS7MRrZdF99+QGA/
wLU9IKZMSKiTYuohCW1aQp+R0OYk1HkJ9aiYfExMXBART4gIIDimhAWx41GJ
45yz/bzUHk6OgYgJuBCPighHhMR5IfmwiDwjpEyJKGDM4ZvbGQ8PuFOH/dj1
Yscc5OHmUOnzB/ab3n8N1S2jhg1sHK9swHA04dHvhu4fFl9QVetD3bx586WX
Xvr000/hfH19/XuX/fsPbtkOKk1GvWbxNkafdKvol3/+/PLxo+qUkTDPVh6x
HbE95EI/7cc77cWeE5OmxeRpKcUqs1LqrJQ870yZdybNS4ggRyUEkGNWKCWO
81LHaWeHKRcHaGekDoelDnMSJ6vMi5wOY0KcFRJmhKQpEWlSRAQ57E456EoY
Etl3C+06pU4dHrRWP37DPudXDg0Z3n0bBR+iN5qWNbjqYuzAYv7HxNdo3Ir7
Xnnllf7+/jNnziwtLaG4gbU+7L+jtvcPLEFp0C/ftSzfRvWr6MadleeuX6nJ
6/QVNPEc+0XEKVfGUXdkQUo/KiAf5RLneUTQ03nJtliRxWVOSpyTEr4ns86E
aWenKRcnaGekmByWELZE5DQrdpoREaZEhENiwkGx0wGJE7TDyIMT/D1TUseD
Yochvm0n17ad79gkodW5sGdU8j+fP4XeuoVqDajWaFza1K5uombLPyS+oL8G
gwFQfu+996ampsbGxl5++eXV1dXvXfbXHnwLfRMeEoGfhZDnk9+/Nt3XHepa
wd7VJyUeD+QfcaPPch2m6TazdLvjbPJpHnJGxMI4EphfMQnkuJi0IMHkmJRk
1dx5KSbb+ALiRABxVkwEPbUKqO28EGvnhI6zQkcrvpMiJyu+EyL7k14M0O5x
5KFB6q+H6Q+Nc+wPiMljzkivC7uGR2v0db3YULPyyksYwdbpUB1wbNM/JL7W
hwKMQG1fffVV0N9z58499dRTYK4B5Xt+Ga75HsG2fsqEH6heiy5+jWrvrr32
9KGcpByWTaPQbtKPOeNGHKP96hjf7oobctWVfU6AnOQgZ/nCq86S8zzyBZ7j
BR4B5DyPAAzqDMaaCBg9FoLzxVwwuFdcyAsi8gKffJy3U4jW9hiPcIRPmBcQ
ZgRO00KHQyKHgyJ7kF7iLw8gNkeklFNuzJMuwNyIM1ynAxzCtDvvgJe4w41X
5yYYSo55aXoc/eR9jN6bDP+o+KI4hdZqtVbIVlZWvv3220cfufbSSy988slH
y6srWqPBmgK4n7/FLsV1FqJLvQbdXEUXv3x5rLvRT1zBcxryYs76IrPOjvN8
m0suhPN82zMs27McpwtCxgUJ5xSXc4xBvsQhX+E4glzmEC5xrSQZKDEZmDMe
+ADRos9JQBizEtBExhE+4yhvSxZ4tG2hHuORjvBBCHN8pzm+wyzfHmSab39E
SpsREA+x7CcYuw8xbGZYdjNsxymeEwTUI2LqkDt/MMC10VPUHOh5vb1u/Y0X
Mc5gBL6ltybPd+artyDfmpXYmjH5W2L2XzksP3SgFpNRu/HpJx88/+Jvn335
+fe//HQVm+i5l9/DMoxYjGvcRI3r6OZd47tvzKTGjvlKewT0AxL6cXfOSSnl
NNf+Asf2UaHTdYH9FZ7dRa7dOYHTOTEZ0022/XUB5TqHeAlxvIA4nueQzgpo
p4RY2HsYYhwRckCEjIhYAyJWv4hlDZMHhJxhAWeIzx4VsMb4yEE+6xAfmeYz
ZjiUWQ7xCIdwjOO0wHM8znFYYNnOIXsmaDagsBiv5gPKtlNsO7Dqcy70GRfG
jAd70ks04inq85D0ersOBfmNxIQvPnYdXb0F5MG0eWdJt7yBmlfxfNymNTFt
wYHFMjUGC5Y51/1cIP5r+GLztqhh8e7Nt99957EXn33i9Vd+//WXt0yGZQuM
cuwxzWuL6NI36Oadb3776JQy+eBetwkxc4JLPiZhnJMi5wSkS1zHRwSEM+Rf
X6A/dJFtc4Zlc5y9G2z1CWfyGXf6HNPuFI9y3plz1pV7XMo6JKANc6l9HGob
k9jGo3c4C7q8nHsCvHuD/XtDA0EGggMHgwIHAv36/T173J3bxZwWDr2FSRgQ
IQM86iDbaYTlcJDjBBoKsE5zHOF8gu04xrQbY+45yLUDBz0nJWMs3Z0558WZ
8eZPeghGXPjDrsJRb9exQJ++IJ+vL59Av/wAXbtpwbyy8f27N1fxIW1A7+EL
ZkxvwhLsmp87vubNdcxK4fPvt9ZWf/fnDx5/6YVLjz92GwJb1GhavWv6+lPQ
3K8fudAREVAnZfVJGKMCIoSfJ12RM1L6Ka7TOY7jdRH5hph6VUA8x3WCVxb4
xCMi0qyIfEhCHRDThjy4w17CDjGzmuVYJ6QNhHofUcheHmx/c3r44wsnlp5/
3PLe79CvP0aXv0HXb6Ort9HFb9AvP0bffWvp2Sc+Onf0zcnhlwbaJuUxPaFe
tc7Mcj6hXkRtd2O1uSJtItKoK/OgC21CQhkXOI5y9oyx94B3PuJCPepKAyZ/
xJMz48aZcMFyoWPuglEfSZuHsMHP+ZkDPeidz1D9stawCjHxqhksFJ5i3eot
4B/YdKQJ0+KfB74/fGChLDyK0aLDBi/4IK3Z/MlXX73yxuvTUxMnZyYtX3+O
biz/+fhcu79bHY/ZKWSMSmiHxKR5KQ34zAkJ+SjH/jjLHrR4gWl7mke64MI+
7yk86syZENBHBNR+Fw74vkJnTomHYCAl6pnhzuUXnkC/+gBdxkgalks0rGKW
37SOapaMqzc1i18a7nxlWb6JJTnhdcM6FoXBZZo72Ke++NP628+/emziQH56
sb9U4YwUujAaJORmrl07x35ATJp0Z8660afFxCmBI4TeR52px1yZ826saTdk
0h055MGZ8BFNhHk3+YjqAl1Pt1auvPsGatwAC7ahWdeZzPr708egwNAvpp83
uOh2wQ029W026Ix6g8lssRZCGPVLt1+/evGpiZHzVaX7PaTgHI8HeB3k04+4
MSF6hQDnhDMF8F0QOAGzBdIL5veIkH6QRzsgZI9JBQMSQa+zqNXLZUApf3J+
xvTlJ6gewNpAl29hGmrcNG3eNWmBt2+YUbCEwOtAIEQ3mvAqCwumOAYwkkbj
ukG7ot9cRC0a8/pt88pNbDAY1y13vnrqzLG+YkWJN7fKhVwrIbVISPuFhH6B
ExiN414cCLcXpNQFV/qCOwNs9awHJge92H1e7LEIr2YfQZkr93xTlZVUa+7c
Mhn11ukS7XZ5l/kfgGJbMI3doo/4UMWiIHC8Og2qW0PXF58f6W33cp7y9wCe
0737gQuuvDOu9BNS0jGR04KYAPiecMame4D3TgoYM+7iQz5u3c6iKgTp8PJ6
uqFx6cmn0OUV09KS5vZt/fISFl5tTdJZCz/M+KStRYOaN3HRbNdvafH5WmsJ
Hl66szXHh9HB9eX15cXN1SWzDmN9i2889UhfTUOwS4GA2OyGDPkIRqXMfsTh
iBtrwQ3BBMd3xp0x7UYf96ANejK6AOgI78FAt2ox+2xFseXdd7C4Sbeut0B4
vDWLrbWSrJ87xJatQAg4sl5r0uuhA/UWLA5aBnCfOTjUGeLXJmIDj10Qsa46
865LkPNC0jkR4azQ6ZSIeAI0xRk57IJN880GelczyConh/7IiHemZtF330OX
1tBNA6r/bsUMzkyNoLKWrd8HRdWbLTrLlljrfgy4AluNiVU0Gh3c3ncKq7Dp
SANW3bH2lfa9116bHx9IDC1gEhp51KPBvofcBdOu3FlXBGQGM85gopnjnswh
T/pchOuIO3sQnIivWxWLNp2RjN78HBwEcBENlrPGZri1ePnfz908w6HbNG1N
els73LClvH9+8tpCZWGnv9u4j/S4l+SMiHWRR7vMIkAYe0VEuiqhnZdQF8S0
WQlywJnT58IvRyidwYE39nesvPQyuryGavToug7dMGwpgx7XSet07L0q2R31
b1a69/0E6V8Wy5lx16jHInJozWAGYGiaVjGjvXF3/Y2XH+ts6wjwyyc49LtK
Bp35w1LuqAtnzJ1zwJs/4cM74MefDBSMeTBHJRRAf1LCa6I6tTjzD+dmoutg
+VcM2DSYCYsNLTvK+37Oh5VhWVvNxibWfUbdF6+/OFNdvFCcfSpLdiJy71F3
4XE+7TyXeo1Hu8BwuCFmXBLSzoiRo1L2uIjdJeZW8VhnSoruPvtbLODYWNfc
XrR2i15nRk33WcuWYPWUxu9VPm+Vtn6n/a6q/qBY8C+DO4YxCT+t16GbG3ee
euaR+sYKoajZRTq8128kwKvDTdDnKx0McG4V0UbckRExeZxPnOJRJznUAQah
nu5QwCYcbShGDXfAPOtRw6YFK8jdOex/pgfc+5pGbzWcm5ubWMeaDJ+/9drF
4b5DRdkLuZnnFMlXUqKvRgRc9JGcEyGnEeIjUs4Rkt0czXGKRZl2EQ24iIZD
A9+bn0VvfoN++5X57l34Eguupqsmy6JGZ8RYkhlky+YadwJn3iF49TLmne+1
uFiB/H6x69ZhwkpxMMEK+Da12DwCjKjlTfT9Tz4+d6nK269ELL1eU/1IddlQ
VHCzj3OjM2fQhTXMJ40iDgdZTpNMx2GGQyfiUCckVwe5XDrQgVqW79790sqt
AGOT/m+Byv+9A55iE59YMlnMZhj8RqPmi88vHxgdzlXO5KqOq9PPZ6Vez0x8
Ii32RnTQBT+X4xLkMIPydGjQEYlwxs25VyouYtCe2N+OYnOFGqx+wwLfZlkx
6BdNRmvSQL+zJt0M/tK4o0zauEMM6BZt3mpN3xGsztm4I51o3C6ou2M2L1uz
bfhn8Dpp3CMsaSwffNaTrkgXiN6Yml564saJ8uKxuPAhF8EwlzxEtx+j203Q
7Ufotj1sO4ij06kPVIa5vfPoKXQTo/dY2aXG9HP3v1u1/WaTfnMDmxva3Hjj
woXJkpKpnOxT+TlnVBkX0lMupyY+khp3IznmelzolcjgKam4l8XsEwgauOwX
2zvQzz79/bmzfeWlz1698vEH7+sMemuFmzXJuYpRYogrvyNGLP+rt0ZD92Ii
PJlg3I6StmIl/Q7RbYl5p2it1ZwWbL3DVp0VsDWN2biqx0tizejK5pXRA0pP
nydGRvVvvnW6uHDYRTrGYQwxiKC5owy7ftrububDHTzbcvauImdSc/xe7Ydv
4yG54WdtmXccZgg3ME6l13367LOnm1sPZ+edzs27oM69rFBckcsvpyRfSpFd
SZNdz0i5pgCNTh8MCuoOCvrk1Cn0s8/RO4uo3vDtxx+NjQ4fOb7w8ptv3tVs
AsQbZtOGwYBVW5q0GxbNunkTBF+zgEG8CYHtfZW0ivFeq9++7C9lG9ktuPHR
guoBX51JY9wK5Y3WQsoNgwkIHla/a3xsZr48OqYpMflcVVW/SDKCsAYZ5EE2
cZDj0IPs2s/8TRv7wV43cj7912qO/Ym6QiwfuwoUwqgzaP/W6PwfHmaDZh04
NGrQ6T768MbwyIniiivFVWfSFJfkyuty5aOZIFlXszIvZMjPpCcvZKTV+/tl
u7q+sbCwPaOqW/zmG+jPFY3muddfmzx8eHJm9plnnvn2m6/MWi1eqIWV5IH3
3dCvQ3fhkazZaDb84FISyw5j/l0xb7fYYMBPrJkQq5veKo4F37tuNN+rbId4
aunmbayoTmf83dXr5VFx6SxeF1c8QGN208g9HFI3z2E/5+EOzgP7ub/pEthU
Un9ZxtpT6oq8ujCNpc6gXwwbP/MUltmwtoyaNOjK0u8vXDhdVX+xqOrxwuor
KcobKarHUtVPZGQ/ocx7NDvvXFbmjCy+NzaqISH+1ttvgbJrb9288/XXKG4V
72xurJuxWsp1re7KpcsV+QW1+fnPnLuArqwaVlZx2oYXxwD/MeHF6MDpduK3
c5bur1Hl+5zZjBNsq2A+ZWsNkwXjZ1qzcQ1cv9GwbsK8MaC+dvMWuqFBtbov
nnuxNyG5l+86SOPsp1HaWcRWnm0z98F27gPdvAfaGf/WzbFpYNmUcB1rI/3X
PnrHqL/795x//uFVVt99F+svzSro1u3XX73S0XmmsOxSdtGldPXjivxnsvKe
kqsfT1M9lpVzLSdvQansTYwtjwj64zNPYr7JbFxZvIOX25k/u3XTqjLLm5sa
jU67vvH8Y4/X5OQqIqPrc/L+8PxLdz//Eq+FBz0ybOFosHwH079cOGTagfUP
6LN5W8BXGzDRasEPmM1GfFEb0C18sOm1+EpUsx5YPUQHmk3dO79v9fbvEEqb
EEYjQmpE7BsZD7Ygv+rk/KqL/atuDmixbQH51yo+YQbCJfOyGZs8NKA7lrBZ
dvYguoPe/5V+/pFw3c7+bQl2bjRa80FGvcW6oGNDj2dYwZ59++XToyOnCoqu
FRRfUahv5OVczpLfUGZdkiW+kJN/JTX9emFJbaB/lTzuw3dexhI8Jq0FnKHF
YLFs9TKeItl+QmBYRtPqtzfPH1vISZUnBoX2NjS8/cxvTUtLmHcFiPWgbmbD
xgaGy3YEhEFjDTh/eA2g+Tv9eb9jzd8Jlv/CwmO3B97AZDCbdBZwprr1tQ/f
LQ3xz0aYTXxuD5fVTrXbj+zu4PymgfEvg242taR/buPbqIi/zHOmffj0JdS0
rFn7Frgblro0wRhFN/WmLaSt1sMq2FPsXNH2U+BrvM9XzVtE35r/2V7KsWnA
78Wg/faVF6+1tlzILXgsrxBc7SVF2mVl6jWV/IXSwpMRUW/UNfSGhNZEh737
yjNLK18aTRqTWQfG2LIV0GIrfwFuPTA0a8Rq2o5ejSZwzVODw2qZLDE4+EBX
1wdvvrlx+5Z+dRmrBrEY9bqN9Y1lo0m7Mxqy/McGeqf8B3bKekMwcsDj68x6
Ayj5xs1P33qhbK9fg9Slnkgc5DFHJLQmxq86BL9q4/6ijvI/wFzX8WzUzN2z
5Qr09kdglkyWVXwGxGzNnZrM21khbGEr7howz7Blh34KfNHv4Xt/rT2WZ8Bv
D25KD+DA6L755XOzB0+WFp/Ly7+em3tVkXU2NfGaKuPxXNVFecpVhXI+ObnK
x+eVk0dR7RK2psysg76CHsOmzyz3xWze5jlwhUYLYtDpsZjaZP7Dyy931NRE
Be5VJMlOzs1+8sGf1pbumHSb94wycCKdWXsP379GvX5ArbcH7c6M1nfzmdj3
3asfAy3Gojfd8mc3HikUCCrp9FYmddgFqaP8237+A03Iv7Rz/ncl5V/anAlq
+sOpHId3r58CK71491O8lsO4jmXAsbu0bGW/v4/vT6S/6H37vBNfi8Vi0Bmt
y2ENEMRgk0faz5956kR16UJeztk89UVV1o1c1YWUxEeVgK/6SGz0taKiXB73
Sk8Xqtswrt3BFoSarOBazFsLU7B6U6v1BDt4b50+nGiBgwGF1lkXYRt//9or
ZYV53m7Oyoy0k8fmP/v0Q9Bf+JDeAG571ZrlAIL9nwf3h/H9iwTmlvM04dNk
wMSM4IiX0M3VlybGs+n0ej5SR7NrYT7cSPtFB/ff+l12FTr+U63ApkToEL3n
F6N5cvTup/rNWzAqQPc1Bsy/38cXnstk/Knx3SoM+z4tNVl9hAGfgtFCbKjB
Xr29+Hhv93RG8olc5QlV+kJa4vWcrCtpyY/I065kZpxXKxv9fYezFejNr/DU
gkGzhlVaYskuy3f62WqXdCbzhg63CjuckcVs1K6vmXRgkM36zY0nbzxaVJjv
7eVRXFRw6uTx27e+3eopo16j2dDoNv8v47uTnuELkDRLiyho8cYKunL3UkuT
kkGoQQityJ4myi/a2b9sEz5QwfzXUu6D5UL7XMROIaS8cvkYagGWpQFXYtkm
d1tTh1Z8f2L/u42vZcdjWXODOEPBJmmwVdEYvTHeevW1mYz0OVnMSWXqEXn8
YVnU+YzkqylJV5OSLskzJuLii3y9vn3rVQB3dfEmthpFq7PGOjvx/csoZ9No
BC4N1gx8M+j7FoIGHVaKaTF9+slHV69cSk1JSkmWtTQ3vvjCc5sba+j9vVf+
6/jet8Z/RayJj3vuE0ul6gFf9JsvepLjsol7WjhOXezddeT/VUL551Y323Lh
Q/nMBxol9BSnh/qKMtDNb1HzxvrKHXSbuW//nPmn51eWHVWdO/sf2AUGrQmf
M4fAAfBdXHzmwMRUbOTFdNlCSsx8avTR1JiF+KgrssTrKWknEpLqvb0vDvdh
j7axtKndMOGTPta59u8hC7Kq1f7gLg3wo6CVq8Cp8L4GJcWYGGr+9ssvJkZH
osJCk+LjJsfH3n3nd7q1ta1kxf/Bw/8w3N8fgqb1tRXUpLes3rn1yrNFQqSe
Q+zi2teSf1FC/ZcmD9tS4YO51F828ck5lD0KL+4fn72CGlaNG0tWXmow3vsJ
81a5wt8I33sPjRVWmYAhmLW6dawsQrOOriwZPvzgcH7eifiY32ZnHo0PPZ4W
fU6RPBcVekUmeywjazhwX58scenDP6JYlsqox7/ItGnaie/3ILaCC1GnxmTQ
by0KNuEmdysCsmwrKWau8QTF1x993NXUvM/LOy0u/uyRo/DPrYgJtzX/mday
Yw8Wy87u/UtttwKtwYiD1mjQYvVWhvVPPnhpbCjD9jcQC7ewdtUIHizh/SqP
9b+LWQ/VM+3KmY4x9N1nhlvxarF17LahJ3XblTv3IEZ/Inwt96tZ7j+jtQc0
GL64nYIAVruKatdfnT98VK26npZ0PSHqcnrcQmL46dS4C+nJCxHhpxOT8hjM
D69AAIjlcNdQ45rFdB/OHZ22s/925BIhlMCoDPA4YNNYPGXCy23uLaI3YxkS
E5hlnJ/8+a23qvLyov391cnJNy5d+Pqzj7fmCrGSKAM2NHSbJo0GKywxGu/P
JBqNFoN1Hn6L6FjTmNabgVjIYNyuF9gJMe4u1kxGvMAbPqrTvP1aqYRThTg0
cG0reQ8X8X5dJtxVzbdtYNoVk3cpxBRlgET/+XuoUWPZ1Bj1Jitl+9vje89A
4b+7YcZSSAbjOjals34XXfzmRlf7sfTUa0lxV6JDrqTEnEyMOJ+WcCYp/pxM
1uPtM5WVufT2Gyg+a76GTwZtESn8B7C8kd6CGfsdzwPqCTQJ+DCIyazbcnvW
3bEMWqNmTbe+ol1e3Lxze/3Wt1+9//6nf/z9H1588bUnn/jTSy+/9/LL5w5N
lysUbdWVRycnnn30+pvPP/v+W2/c/uyTzTu3QCwbayDo5jqe99ZgO/EY9dbi
bdP9WlYs0W3A6oy+n98GpwnMTwdBGLbsG102Gtew6S3cXq8tPdG7P5fmUMba
UyW2z6b9okJoU8m1qaburmI7KQWENBfaW1dO4qtNN+/py/ZzW737fcLzox44
AmbjjmzGPXzxXacMm7q7qGUdXbu18cYLR3OUR2QxlxIizkUEXk6MPBcfcSVN
diYh7lh8fIVQ9P650+jybQu2/lNr3U0Op8h4uGXeoQ5gFLQ63cb69uy8ES+L
wwQA3Vy6efOTjz5593dvPf/sU1cunD86f2Rs+GBP90hbc39d3Wxfz7Gh4cmO
9omWtrnensPdvWPNTZOdHYd6u0AOdLZbZayjdbC5AV6ZHew7PjF25dj889cu
//HF57784zu3PvmzWbdmNK5jZZaGNb1hw4TNGWKogTvA5j2NBo1Oq9HqQZe3
Ol+HZQCwegBsmxjLphGv/nj37QovcQ7Tps6ZoiL+olJgW8baXUJ5qEZEyeE7
JXEdDpTnYpWfWKyHp9/uQ2z+HqH9kfHdmmvbwte0hYUJR0YHY9u8hrF97eIf
FmYmE6OPJUSdjQs9C/jGhF2KjbienHQhWdbm7toVGWH59M/ArHSWjVXLpnYb
X4t+Oy+oNxs39ViZjdHKp3EDqdnQLt5e/PzjT3735qtPPnLp2OzcaH9vfVVv
TQVIf13VaEvD5P7W6e6O2e79IGNN9RNNDYcB0Oam/rLS0Zrq4wN9Q3XVXRVF
HcV50A7WVgw1VA3XV0F7oKV+pKlmoKa8u7K4q6wQ3u2tLOmpKR3pajoxO/7y
09c///PvVm9/oV1bNGpWzLoNg2bdvEXdcRhwvCHYts4YaCxb2+zc2YQ4QoOu
LZ5uqlSw7KullFLEpprrUER/uBixLeI5FogIqRyHvABX7UfvYglVM7q6pjWh
34fYss0Efmx88ZzVD+MLBg4btoa76Matq60103ERJxOjTsaHnIsLuRwVcj0y
/Hps3OWUVCWZ+OTwALq+CEq/adpYt2iw3YW2irSweVUM1ntPaDAallbWvvnm
o7fefOuZJx8/deLUxOjhvq6J9sahukqA4EjP/rmu9pmOlqm2psmWhonG2tHa
ypHKsoP1NeM1lUOlxX2F+QPFhaMVZXDeU5Az3Vw/WlsxUlk6UlM+WlXWU5Lf
XZDTVZTbW5TXXZwHLbwyUFo4UFFsvaazLL+9JLelUN1SnN1fX3F8YujFG1c+
fvsN48oiZs8hUjCAXdZhmTSMF5qxSn6smEdvLXVeNRs1oMJmzVevPJXryspj
2DaIKBUM2wLKw2USchZzV77QKYvnKOOSPnzyUSu+K6uanUvSLD8hvqad+Jrv
DzIrviumNRPgq7uFfvaHwzmpx2QxZxIjFxJCziSEXg4PvR4afjUk4nhYRLFI
uPzWy6h+CXyVxrxpxDJL24mRnXM6Wt3azVsfvv32s1evXpybWxgdBlgPtjUf
aKydbK6f7Wg+2tm20N0xUVt5oKbCKnA+Xl0+Wl4yVFLYV5B7sKZytqn+QFX5
QH4u/HO0pGi0vKglM7VNmdqZndVXqOovzOktUPbmqweKs6G1nkPbk6fqys2E
a/Znp3eoMjpzM7vzVZ35yvaczGZ1ZkuOsrkgZ6ix9vTUwXeefw7GHmZXrYGr
YSvXpNOAxd7aL2sde0AduvZNT2a83PE3LUJaGcWmkLq7xIUuZ9moOXuUbLt4
pv3l4R4scDZh/Pm7qw7v4/tjB0ffx9f4HXzX0U0MX/PSx0+en5BHn0iMOh0f
eiR+37G4fVcB330hl/yD+/iSYwW56NLXJsNdParRWjTYTB62JSiGr3YTd0Ar
6++/+c7jly6fnJ6dGxmZ7uub6u4ca2oEYwvITjXVTdZXj1eWjICiFWSPlxaO
FuePFOUNF+ZCaz0ZKsg5WFXapc5szUixXtObq9yfJe9UpA8XZo+V5oyX5g8X
qfpzFX25GX05WT3Z8FZalyq1SynvVqd1q9Ktba8qrU+Z3qtI7VXIe+AtVXpP
jqI3P6evuKA1W92Sk9Ocn9dZUQF3+Ny1aytffIGnujfxlCk2jwZ6uIl5YdMG
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
NBy1byjYs9dX2C6l1HNtKzm7y3m2FQJCmZiaI6IqhBQFD4MYQphsDjGfRyni
U/NZTvfwBQF+BZZZzXLI5VGSiTY5YmZdiNfbxyZePjJ+bazj+WPjN6YHCiJ9
s/e5vXjsYI8iebYy/6Xp8bbEqGcODp1sqX39xGG4z6LwgGfnD54b7OgvUv7u
4omOrKTx4mywqDnerklcRioPAbBi6RQAN4pCBImmkqIZlDgWPYHDjGXTQQDf
GBYNkA1nkCKY5CgmRcaipbIZKVymDPSdS0/k0aNZpGCKXTDdIZxFDGES/Ig2
voQ9+5jEMC4NXomiPpwhJMUhtnspDyd6iJ44OX8vPvo7wddgxjemAK3eXH/i
1NH65NiBlJiDcaGXMhJPycKvFiunM+Ons5KGZLFxjvZjaSl90eHj8WHDYd69
/oIWCaESebCI8at85gOFbJs8noMawMUhBpeUzcUCQ6BhViYGAhE0Lg5WyeUS
CsVMNY+Rxae3xgStvvrUyfbq/FCv8yPt3775267CjBszw8e7Gq4Mdz03O77Q
WCX8f//5bGfL8/NTv7t4KifEj/vAv/722PTb186++/jF3z9ydra58sbBwVgB
A4xqoMPuFC5DLmDL2Mx4NhKLMGKYdBA4iWMx49hIApcdzaQHkwmBBAdooxB6
vJALAU6ep0uBh0uOu0TtLs73cS0K9Mr1d0t3EySIEZmUHcml+lFs/akO4XxG
jIQXzadH0XZludLj+Y6hLPtYd0FPVfGX7//xXs3k3wrfey74nn2GcPzTP/6+
ODkezM5UbtZjdeV/7Gl/pixvKjGyOzRwIlU2rc6KtN9zSJ3VGx8+EBfcG+rR
7S9qd6M3iB1r+LZl3D3F7D35bLtsHiFbSAEtzoW4RkBRg6FmOmTS7fL4FJAc
Likbs9uOKpYDnqkgKBAiBBqZbMr+uHD0vbcmS9QhlD1zjeWG999a6Kj9+Ikr
5/vavnn2scPVJR9eOXequfaTR69URYee7W5758Kp8fKCV08d6StUFEUFvn3h
+KWhzpcWppPE7BCyvdJVpJDyQ5z2ALhxmLChjWUxQaJZDJBQKglgDSI5hdMp
gLVcKla4uyo8nKuCAyr2+ZYHeJUFejZGhXSlxnekxtXGhuQEeigDXBNcuPuY
TqC8cVJusqswXoSkSem53rw0F0aqB28v4uRMtj3U225cu7u9T/a9+rodSxp/
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
ZRpa6Gt6d85+yW9/2zRxtq/9TH/7W5bxj2dtn/gtfZSU5jhMETy4aLkljTij
YC9U5623lS83l3qqdIDvnb2FtZ6G5e760TyJGBvZxEp/0zVWQ02kHvvHyQLJ
Oz7TYmftYmd9I0hM6XGr/W0TBu3aYKchK0mVgB/Uy2+f3WlXCgCgBhFrfaRv
b2p0a3JourqkW6sw11UOGPRj5UWAsjY71dxUt24ceXc9wCEgKrh0Z3u9p71u
yKBWJOIHC5SnrRMX3KZAV1ObhNOtFC71toC/ZaJYB37UOadlsa9rY3SwVSpW
JiVIk+NfWZ7XsWnsjPhkTHRfQ/mZRR+FgGTgUc7O1gtz3vHqcl9vuzI5TpeW
sNTbPqhVLPV0giAmjCcKkuOrdPJClVitEDY0Vl589dy9e3e++uqr77///ttv
v/3ss8/u37//xRdf/PM///P169dv3rwJvvz1r3/9ww8//JX6ffrU5kPb9vs/
/OvZV9+YW99cWFtbX19d9nvG2+pdnc0jeep+PuflwYHZwsKFkpKlqur5mlpL
SSlo0bMVVYHaus3Bwfe21q++9srZ7U3r5PjZ7a1LF1/9+Pwrl8++/NGpc+8e
nHrjYO+V03tvnd7pVktr6VnlGUkyTLQhAVsQj3ywMz9XW9BAizcXisXwo1cW
HaA/t/IoHy96FLhoUcQvP3SMjYgZakxYTVbcjRWfDBPpqjLYKwzAuA6qpWN5
mk9Wlpo4uezIKDWJ+KrHJiViyGFHc6ERO8P9K93tuRGhYPC189jOmgpbddmV
rRUWIuqsbbpeyNGTU15d9dNjYG+sztpaazu00v3psQYeU0GKubq1XstlgcQk
TSadn3fLs5Nz4vFnV2YNIt6izSzMyrAN9E22t+s4HCWLtTs3p+FwaCRiJhZJ
waPe2lzNJWAo8EgzyI/DPcQTvzztsxcyyfa2hj2zcaKyZGl0cKisKAMenZsU
21YJtCuSiXN391ecLsv3338H+AIWH3/8McD6hz/84erVq4ApgPvpp5+C7aNH
jw5hHd7V9q/ke/gnv/3u+52DM77AUmB5ZW1tZXnWNdZaB/hOFOjac2hnOzuX
SkqXy8sXK2vmqmvMRaWuqurZ0ip7QfHG4NDHZ85c3Dt5+eMrH3x85fa9zz58
//on79+49v71Kx9cvfTBJ+988OFrH7771vtvXtxYWRjuN1ZX1AnYFazs/DTS
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
hIyuYmZnR4fFhx/LF7D2V+bP7m2cO723t7dz6szpze2tnd39s+curq5tbG5v
zC/4909uH5za3d7e3Npc397aONjePr25cXFnW81iZaIRTCKOioQCweZiESwc
goaMZmHgOYjorIgT8sRYalQED4ehI2C5BKyBw2wp1gsZ2TJ+jl4tkkq5He2t
oAMfQgHmCogXcDw8v3Gox6ee6i+bq8P/+lMP9uWXXy4uLvv8AcB3fjYA+O4u
zU80103XVjiqy20F+vrkJG9e3kpN9Xpz62pnx87o2Gp/n8mQD/Jvv0bdpddz
U1I/eO31X335zeMvfn3j9ufXbj26evPh1dsPb9x/dPXe/Us3b71z+cqdx19/
eP3uu5dvfXDt3rU7X9y4/cW9u48/evPDz6/cemd9s1su6mCTizAhtbhjnbEh
zZjn65HPD6YjGjDHKmDPdaXA6okhJYjnl0pE3dnYuULeS90Vu3X6XnLMJDtl
mB43wUldrlLVpaAuDDac6qrebS2zqHmXbKPrdcWDPArn+D8Vx6NFUccq00kF
cVg5KkqBjNKh4Qp4dAGJQA07IojF9VcUvX1u7/TOyulT4GDfWt3ePHPx4sXX
39rcOzh78bXN3ZMLq4tr26tbO+unzuxvbK3v7GydOtg/2N05vb15sLbCSU+n
kwhkNDwTEpGLRzLRMCBYQBb4cEksno9DgW360SM5MAjgy8JjVJTMWr1CJ+ZW
l+iLC5RarbS2pgoM3KcKfcrrcB/wfbrzt/IFh43PN+tweoGEZ2fnF3y+g7Wl
qbbGyapSS3nxYl11dXycQ61eKCudr6qxl5c5ausmi4sA3Em9ZkirHSoq5iUk
v3P2pW+//PbG9TsA7uVbD6/c+ezmw68A01ufPb786d13r1y78eirt6/e+fDT
R9ce/frjTz8//+qHt28/vvHxzcuvvv27G7eGtcomcmJ1TEQ14rl6yD90415s
hD7TiHi+Af7LdvyJaugzZZBf1GOPeRXUxQLOqQatS0ZdyOOOMeJswsxZVW5A
z9ttyLcqWbMGiVvPP9la7iuUunXi3ebymgSMGhK8flEUAxeHHSkiorSIaD0K
mg8cMhrBDTtelJ7IRELOzLk/fOXM5sr8zu76wfnTW6dPru7v7Zw571taPf3S
a2vbe/7A/MG5k8sbSzsH20srizt72wcH+5urK4DvS7vbzORkViIpKTKUiUPx
iVjQnxnwKEUSKSPkaPCCLwGbefyIEBtci5uLQgK+nHhimUJYopFVGDQiHj0v
T5GXp7t8+fIhETCCD1v0/1u2YPvXn9w49NuXLl3yev1z80tOly8QWJz3eLYX
Zsdb6kae3P/EXWKYFAk7srIWy8t2O7vNBoO1sspaWWkuypvUKAZUCnN1tTgx
9fWdk1/c/uzhvce37jy+/fmvP3386+sPv7z16Mv7X3595+HjS9dvXbp1/6N7
jwHfSzcB/cefXHvwyaUbdz659esbt95aXrQU59Wl4MqRRxuQz7Wjn+lCPtON
fKET+UIb4sVmeJByLfy5WvjzNYgX2uOim2IjarGhVajjoBqwYa1ESHsCoiUZ
XR+PrIqBVOCjKgnQSiK8hoisJqH00NA8WNjhleUiFLQQBSlEQPMREHVEeAEK
ocUgOdGheVmpW/aZy29e2N1YOv/Sqb0zJxe31rfPnlna2VvdP7jwxntWr3//
7OnNk5tru2tbB1vbJ3eAhNfXV3c21vfWVi7s7dDj4tIQUAYeDUIQ4AuUC6JW
LhLKQ8FFODQHBqGFhTCiIgV4LAMJZ8fgCnIZRRJuoUJk0EqVMi7gq9NpNjY2
/kyGP++6/9PpDPo82L777rtuj292YdnpnQ3y9Xm3FmeN7Y2jZcGb2ziLCqbF
4h4yxa5SrdU3eSoqTMA8P+E7k6cZVMhH8vIl8Sm7Dt8PX37/+f0v7j38Cij3
8t3PPrh1H6j49qOvHnz2NXjz5Xc+eh+o+97jy7fuf3L19s1rd+5d+/Te+x99
/s7b2yP9LfT0ElxEAy6kHXekE/VMF/yfuhHPdyGOdCGPdqCOtmGCn1Zrxoc1
EcJqMCGV6ONliKPFsKMl0KOlsBPliOCnUIuQYQUIgPJEPjwkeN8GTGQROroQ
FWVARxvQUAC3EBFtAJThUYXQaFAFcJgOBlEioHxYhCIhdqal/vW99bcunFpb
Xdg/2Dn78oWTF146+dLFrVNnvIsr7tkAgL6xD3Cub5/a3j21t7UTHMF7W5sn
N9ZWvG4aiZSNRdFxKDIsiotDArJsFAwUHx38WEQuJIoeGcaCQoIL6VGI3Fh8
PienUMIF/rlAF+Srz1NoNKqlpaWngH42359eYDrU72uvveZye73ziyD/+uaB
ffasBbzT3S3DZYVGQ569MM8skw0ycnppNE9h8VJD43RRia2i0lygsxXnTaiV
I2qNIYMyVdP04ze/f/jpo8ePf3P9/hcf3Hp46fZDQPP2gy8+e/T1l198+/Z7
n7x76fL1W/du3vz02kefPL5162uQ2s8erA91dfFoGsiLBugvm/EhnbgjXehn
+wFl+POdsKPtyGNtqGNNqON1qODyngpU8NOFBsSJ4A03kGEGVASAWIyBFGEg
wUvGTyoPDcnHQPUYiA4ZpYaFgy1oyDpYlA4amQcNwi2CQYrg0GIMWhEdIYNH
SzEwAQZZxKTZejvOrC68tL8F/NWFC+fXNzfOArv80gWLw71z6tTWyR0g3uAI
3t/c3d/Z3t3a2d48ubV1fndnrKOdGkOk47E5WBQNDmEhIIfiBaC5GEQOLIoR
Fc6CRvFQSC4WzUAhOHExBXxWgZSbJxfk66QKBQ/wVakUbrf7MNs+tVU/45rR
oXifHh5g59y5c4Cv3T8HyuHzeXzuJb/TOtAJ+I7laYC/Asqd4vHr4xOmJYqN
lraZwmJnZQUQr82gN+l1przCNp60gsn/3d0vP7vx8OHDX33y6cP3bz648uCr
Tz/7+tO7X9z99PFnd7+8ce3Tt99858YnV0B2+uyTDx+9+8ZHoE20VFRlxBhw
oUWw52vRR1pxR5oRz3Ygnx0gnGiFv9CKON6MPN6EPlGHDqnEPFnSgw4vxETm
4aJ1OKgWD9VgEU8KqcYiVXiUEocEpYpBBxfDEDFq4JBxCDUoDFyNggXHLjw6
H/akEOAYQEohEXIkVEXAcuFQ0FFBdO0tNRwE/Gc2V18/fxYE3t2draWlBZfH
fe7l81v726s7qyuby6BAcwYWen97C/jnV04dVGm1mRgsA4dlYdHBpdTQKCDb
YHPGowBoalQYLSI0qGUchoVBAr7chFiDmJMn42plPJ1OIlPydPkKhUI2NTUF
OurhGYmnJxj/Hr4/PmnR+/v7Tq/P4vM7FhasPq971hPwOdwTg6NVxSN5anue
zqlS28TSxviEISZ3uabeZih1VVRYC/VWvdqq09jyi8YV+Spi6o3zb39771f3
7nz50fUH7924D/jefvQNMFH3rn/2+aef/erB4w9ee/XW++/85tbl6+e29yd7
pvIEBmJoMfrFhtgTXQnhncTjLejnW5DPtSJ+CWZuIyr42eE6XFgNPrySEFlK
jC6KhRaQEGoiUkFEiQkIPg4B5MDBoHKxaDYOwyfiuQQsG4fOxaM5eAyXgObG
IHl4hDQOo4jFBKHjkRo0XIOEqmGRSlgEgC5FQaUouAyDFKIQOdERTDhUkhDX
plXZervOb6x+8tYb28uLJuP4+trS3v7W7qkdoNz1zZXV9aWNjbWgf97bPbuz
e3p9XcVkpsIQVCSCg8fysMFpywMhCAnlgJSEgpKjQgFiIGQBAcfEIhkYJC8l
3iDl6aQchZSj1UskKp6mQCFXyvr6+oIPu//3ufnjz1rFcfgtTxs7sGpgrAO+
Jp/PsbJs9np8Af88QG2fMtZXjBVoLVq1XaF0SOX92ZQeMsOmzXMVV3jKyj2l
BotGaVYpTUrNlLIwLyFrc9L1zadfPH70m5v3f/Xx3cfX7n919+E3jx785lf3
vvnNg6//9M13115/9e2dtVcDTk9jUSONWEo8UYz4bw245zpjX+zCP98E/0cg
3h7CiQ78iRrYLwHZSnxYGS7EgA3RYUNUuHAZLkJEgMgT8ZIUkjg1QZyZJqOQ
we9Wx+Hk8XgGgVDPzpXTqcKsDE5qIiuRSCdhqTEIBh5EURgXAxNioFIMFGRe
FRqiwsJBW5YTUCIElAeJlGMxUhxGgEACiyuOJRbl0PvKSnb97hWvc9HneO/t
Vw5OboNYtH9mD0Snze01IN6T+7tn9vZOb23bR0d5qWmp0TAyFCog4EETBkcL
QAwEC+DSYZGU6DAmPBr0anDUAb40LFKQkVSsFGplHIkkV60TSzR8daFCoZK3
trZ+//33PwafDvf7H/99kv6tfH86ecHr22+/XVxcdHi8Ey6XdWXJ6HJ45n0+
n23VY5lurBrN18yoFDMisVMsswslnWnkXjrLX1LlNBTPVZS4CrTuPL1RJDMp
DV1cZbvM8P7p1798+Jt7j7+78flvrj/4+s6DX392/zef3/zi0cd37r77/oHX
OVVX1iFllqehgytm0c/0JR5rw/y3duR/bYH8l6bo/9KGfLaTcLwdH1qLPlZB
CC0hhhURIwxxkMJklCErpoiebGBl1qhFIDk2FBU0V5Z3Ntb3tLX1d3YPdvcO
d3X3t7WDd5qqKqqLC0vyVGC6aUQsITVVkBnPT8LziAg+HirCBZfUKglIHjJK
EYsTAJVFhStxaBUeI0EgVAS8PCZGEhsjSYwv4bP7ayvnbNMvHWyeO72zf3Lr
4PTeySfpeG9vB/Dd39zcWlgskSvosaRMGJIcDRHHxDCjosDRwoFGA8GClATE
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
ec6c+zCcYfbzjyLbsre0f3utd623LWJOQ8xoSLuGmdMp5vUqR6zWqdMsaHWL
Wg2Au6RWLykVi2r5FAPZKNEEzrXhUSD5ncXC5pE9DviaRTQobC9QcDp02DwR
ASg7sRgnxnNigjmUP4sJp3GhFReOE+JBFLTUYhNoqTFpNw51YLJ2HG4jZK04
W/aOXYCGcVtRTjsa2YFEdMLhZpLdOr6HiAbqxqM7cQ5bmRTjttCiOoIP1ERL
WxVoIwXXorIaRFoulXTH6obS01ebm+6enllqaqpg5IUYCvgW4eLL299duGxD
jLOrUUKUQzOy8mgyCZHmxqkaynLra4pBy8uOCVYV1tZVNNRXtzU0AL39xpvA
qNbX1/8B+/OzpcqCy5HeeffXa2dOHjp1YvnYUeeRI4tH1+YWV44cPHzC6Zxt
qh3NNNrTdc4UxYKRXogjWb5abEaDA8SzWvm8Vm6jsCkan6GJeYZyKphFhXxZ
pVzSMFNyeEIunqC5VpIzRUbZyXA7vteOXTuP7XFg1ziwPU58rwO/DgggXsDD
lrGwJfS6JXT/IrrfgYbNoxF2LHIai7BikeMYh119hnMHcS5bfIct68C1UPx+
kmchgLgDOGcQ4wyhEUADcFh/cGF4PxpuwaL6CU4/HmOieK20oBbnVqPR7AaY
wIpRQQ0mqaMQszHeVpA7VVay2t561jpmr6+tUClKGAIA/bv45pB4Kg4XJeqb
qwobatmWt7y2ODhgVAv4NtRUg5Dg/Gfs5vzsaP53zzdUEm/j4jrw1fc98NOV
I4eOn73ZeezY0toNztXDhw8fPbm8vNDdbivKnM02LKZrFhLkzng6xNeuComY
U5HjmMyKQdMEMktiDoZcktPLCmZJRc4oIKtCZGV4Vip6kuZM0xHT1P4ZYu8M
tmcGv5Zlje+dxffO4fvn8PA54jonfq0D+xFAP49fA24D8JppfI8Nv9ZK7Zug
wsao/SNU+BAVNkCHA1noSAC6H+MDWVDeABIDNITEDMLR/RAHyAKeINF9KK8P
hHAEv5cSNBHR1WhUJcqpRKIr4JhKVNCkwLriNeN52fbK0qmyotma8uW2BnNO
RiGJFlHI38U3A4MyCTSTISoyU9rqy2trS4HlVtaVV9VXNDXX1ddVdbW1fvTe
e+CCuza3QpVNvnO4voDr4laozNKHv/vg6Kk1wHfxxNrC8ZOO6w8fXAWeenml
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
oUDLVHiJmixVEqVKqkRBFjNUEc0qByeyCSIDIxIhWC+UaIRikLomkVRFWlpP
VdWqdfKR2+947+VXLvzHfwRcnuDc0d0b8tKH2v1o3/ShrvLGPwQHHdjuybzs
UlyN+CqxoxjeSxNEgp0BoGne3Aisrwc2NwMbm4HzFzyffHr+449/ds+dd920
dnRxfmbQZG6ors/NLIjVplNYSaymRKssVNKhwiWZOFuMJpOEjDJhAiJORKSg
GU0n8EyGyZarspSaDLmqIDahLju/r6F5cXzqntO3vPzkMx/96p3AheAZPcF+
WbaTzvdtcK/+IP8qfAPfzHf3mri+STuXyOcP/ZGQK/DtXGFPSN5gXOphVzNe
PP/VZ5/+5Q8f//7dX7//+mvPPfqzZx588Ml77338ztsfvfXsz87e8thttz52
x21PPfDTpx6879lHHn7h8cd+8cT//uVTz7757ItvPveLTz/844VPvgys+3Yi
A9AysPNlAm5PwOUObLnATeXd2PCsr7vWNzbXN672SN9ms9+O8esR1z/ncQXf
wFUDmn8b8e6FYmNvN4hZ3D6Xmx1Tc3m8G1tbF9ddLteW2+V2u7cXVoT+dKgn
/tLN4L1kepvAHi+yOSm7tMe/PYQNsjUQCm36faGmgL1fgjcOe095tr/2ev72
Z/F/i77dSH8YfK8+the3hCKQq5xbaIj5Cv/2zSYQMmyWnp9dirwjENxsurZc
IMRxu8EtATJRf3ASb/CvB+3dfyWpnYGbUCAPXgLuIDZC8rDBUmAnEvD5XSAY
3tU3vZdvZ/x1M758Es4P79idXOTb6a4MDUv5duD6/oavC1ICFuwL0fTtBHCh
zrFvDHJ2fzdo4r7gug+3P7juYte+z1/0bLj8l/8K+InLs+X2brr8W77g/LKd
sZVv5+K/Ep3v0s3zL8H3Uga0Gx57QlPzvMFlzCHK3susexfZpsfNLpXw+V1f
Y+f3hhTMsdiVFC7gyP2+q+OcSzN5g6sDLvceuwJme2H94oX1r9yejQD7xth3
5dl+Y57gczc4kdfvueITXbqBdiak7Z71a5S3j38dvu7QZQxeSVb+K7331anH
18D5/TszDIK/AowOwA3xde825f7t9R6h5AtgDBqjxxPqlbjsDwbPGHp7bp9/
y+276N0OnUMCDb/btz3Wfdknuhqu5yrE3xPf/wcrGmp+
       "], {{0, 160.}, {160., 0}}, {0, 255},
       ColorFunction->RGBColor],
      BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{160., 160.},
     PlotRange->{{0, 160.}, {0, 160.}}], "\[Rule]", "\<\"n02979186\"\>"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.887136598988111*^9, 3.887136678629026*^9}},
 CellLabel->"Out[45]=",ExpressionUUID->"ae44b8d2-c177-4bbc-83d2-bb70a60abfcc"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["AlexNet", "Section",
 CellChangeTimes->{{3.886969853441382*^9, 3.8869698555277576`*^9}, {
  3.8871367221736794`*^9, 
  3.8871367237841263`*^9}},ExpressionUUID->"c353d6e6-97d4-46bc-ad0a-\
84ccad07ff15"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"imageEncoder", " ", "=", " ", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Image\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"227", ",", "227"}], "}"}], ",", 
     RowBox[{"ColorSpace", "->", "\"\<RGB\>\""}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8871367797652283`*^9, 3.8871368156413317`*^9}},
 CellLabel->"In[56]:=",ExpressionUUID->"d384da90-a011-4e4d-9280-0d0b7bf15882"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]227\[Times]227\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Image Size\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   PaneBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"227", ",", "227"}], "}"}], Short[#, 3]& ], 
                    BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> False}, 
                    ContentPadding -> False, ImageSize -> {250}], Short], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Color Space\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"RGB\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Color Channels\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Interleaving\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Mean Image\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["None", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Variance Image\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["None", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Data Transposed\"", "\":\""}, "RowDefault"],
                   "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Method\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Stretch\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Resampling\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Automatic\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Padding\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  
                  TemplateBox[<|"color" -> GrayLevel[0]|>, 
                   "GrayLevelColorSwatchTemplate"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Alignment\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["Center", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]227\[Times]227\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.887136818347026*^9, 3.887136832555785*^9}},
 CellLabel->"Out[56]=",ExpressionUUID->"c4d2a23b-a382-4744-91b0-5f04441730f1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"featureExtractor", " ", "=", " ", 
  RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"96", ",", "11", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "4"}]}], "]"}], ",", "Ramp", ",", 
     RowBox[{"PoolingLayer", "[", 
      RowBox[{"3", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}], ",", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"265", ",", "5", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "1"}], ",", 
       RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
     "Ramp", ",", 
     RowBox[{"PoolingLayer", "[", 
      RowBox[{"3", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}], ",", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"384", ",", "3", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "1"}], ",", 
       RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
     "Ramp", ",", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"384", ",", "3", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "1"}], ",", 
       RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
     "Ramp", ",", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"265", ",", "3", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "1"}], ",", 
       RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
     "Ramp", ",", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
     RowBox[{"PoolingLayer", "[", 
      RowBox[{"3", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"FlattenLayer", "[", "]"}]}], "\[IndentingNewLine]", "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8871368826798677`*^9, 3.887136981415431*^9}, {
  3.887137014150131*^9, 3.887137078460124*^9}, {3.8871371521946163`*^9, 
  3.8871372262479057`*^9}, {3.887137260395442*^9, 3.887137328947422*^9}, {
  3.887137368468528*^9, 3.887137400789307*^9}, {3.8871374372818823`*^9, 
  3.887137445327978*^9}, {3.887138148258389*^9, 3.887138182326105*^9}, {
  3.887138245158268*^9, 3.887138250906892*^9}, {3.887138505788669*^9, 
  3.88713851249041*^9}},
 CellLabel->"In[88]:=",ExpressionUUID->"c12bb5ff-d5e6-4609-86b5-1b00e8e28a4a"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"vector\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{96, NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`Private`RepeatedInteger[11], 
                    NeuralNetworks`RealT]], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{96}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 96, "KernelSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[11], "Stride" -> 
                    NeuralNetworks`Private`RepeatedInteger[4], "PaddingSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[0], "Dilation" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], 
                    "ChannelGroups" -> 1, "Dimensionality" -> 
                    NeuralNetworks`NaturalT, "Interleaving" -> False, 
                    "$InputChannels" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> NeuralNetworks`SizeT|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{96}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "3" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> NeuralNetworks`Private`RepeatedInteger[3],
                     "Stride" -> NeuralNetworks`Private`RepeatedInteger[2], 
                    "PaddingSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[0], "Function" -> 
                    Max, "Dimensionality" -> NeuralNetworks`NaturalT, 
                    "Interleaving" -> False, "$Channels" -> 
                    NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "$IgnorePadding" -> False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>|>, 
                    "4" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> NeuralNetworks`SizeT, 
                    "$SpatialDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "5" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{265, NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`Private`RepeatedInteger[5], 
                    NeuralNetworks`RealT]], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{265}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 265, "KernelSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[5], "Stride" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], "PaddingSize" -> 
                    "Same", "Dilation" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], 
                    "ChannelGroups" -> 1, "Dimensionality" -> 
                    NeuralNetworks`NaturalT, "Interleaving" -> False, 
                    "$InputChannels" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> NeuralNetworks`SizeT|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{265}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "6" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{265}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "7" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> NeuralNetworks`Private`RepeatedInteger[3],
                     "Stride" -> NeuralNetworks`Private`RepeatedInteger[2], 
                    "PaddingSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[0], "Function" -> 
                    Max, "Dimensionality" -> NeuralNetworks`NaturalT, 
                    "Interleaving" -> False, "$Channels" -> 
                    NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "$IgnorePadding" -> False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>|>, 
                    "8" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> NeuralNetworks`SizeT, 
                    "$SpatialDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "9" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{384, NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`Private`RepeatedInteger[3], 
                    NeuralNetworks`RealT]], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{384}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 384, "KernelSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[3], "Stride" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], "PaddingSize" -> 
                    "Same", "Dilation" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], 
                    "ChannelGroups" -> 1, "Dimensionality" -> 
                    NeuralNetworks`NaturalT, "Interleaving" -> False, 
                    "$InputChannels" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> NeuralNetworks`SizeT|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{384}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "10" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{384}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "11" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> NeuralNetworks`SizeT, 
                    "$SpatialDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "12" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{384, NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`Private`RepeatedInteger[3], 
                    NeuralNetworks`RealT]], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{384}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 384, "KernelSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[3], "Stride" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], "PaddingSize" -> 
                    "Same", "Dilation" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], 
                    "ChannelGroups" -> 1, "Dimensionality" -> 
                    NeuralNetworks`NaturalT, "Interleaving" -> False, 
                    "$InputChannels" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> NeuralNetworks`SizeT|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{384}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "13" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{384}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "14" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> NeuralNetworks`SizeT, 
                    "$SpatialDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "15" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{265, NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`Private`RepeatedInteger[3], 
                    NeuralNetworks`RealT]], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{265}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 265, "KernelSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[3], "Stride" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], "PaddingSize" -> 
                    "Same", "Dilation" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], 
                    "ChannelGroups" -> 1, "Dimensionality" -> 
                    NeuralNetworks`NaturalT, "Interleaving" -> False, 
                    "$InputChannels" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> NeuralNetworks`SizeT|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{265}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "16" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{265}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "17" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> NeuralNetworks`SizeT, 
                    "$SpatialDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "18" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> NeuralNetworks`Private`RepeatedInteger[3],
                     "Stride" -> NeuralNetworks`Private`RepeatedInteger[2], 
                    "PaddingSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[0], "Function" -> 
                    Max, "Dimensionality" -> NeuralNetworks`NaturalT, 
                    "Interleaving" -> False, "$Channels" -> 
                    NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "$IgnorePadding" -> False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>|>, 
                    "19" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 96\[Times]\[Ellipsis]\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 265\[Times]\[Ellipsis]\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 384\[Times]\[Ellipsis]\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 384\[Times]\[Ellipsis]\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 265\[Times]\[Ellipsis]\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"vector\"", Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"vector\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8871368966784983`*^9, 3.8871369145414343`*^9}, {
   3.8871369566401463`*^9, 3.887136981928924*^9}, 3.887137022040493*^9, 
   3.887137079323038*^9, 3.88713733067556*^9, {3.8871374462894897`*^9, 
   3.8871374503859863`*^9}, 3.88713819637945*^9, 3.887138251807138*^9, 
   3.887138507472169*^9, 3.887138537655682*^9},
 CellLabel->"Out[88]=",ExpressionUUID->"fe2173b9-2af3-478d-9a01-665916d8e19b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifier", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"LinearLayer", "[", "4096", "]"}], ",", "Ramp", ",", " ", 
     RowBox[{"DropoutLayer", "[", "0.5", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"LinearLayer", "[", "4096", "]"}], ",", "Ramp", ",", " ", 
     RowBox[{"DropoutLayer", "[", "0.5", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"LinearLayer", "[", "10", "]"}], ",", 
     RowBox[{"SoftmaxLayer", "[", "]"}]}], "\[IndentingNewLine]", "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.887138273889043*^9, 3.88713830755556*^9}, {
  3.887138344432708*^9, 3.887138431482091*^9}},
 CellLabel->"In[89]:=",ExpressionUUID->"90feed2b-8594-4393-b40a-117ea10dcf4c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{4096, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> NeuralNetworks`SizeT, "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{4096, 4096}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{10, 4096}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{4096}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "8" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "8", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"array\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4096\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4096\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4096\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4096\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4096\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 4096\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.887138419551918*^9, 3.887138432016973*^9}, 
   3.887138541555071*^9},
 CellLabel->"Out[89]=",ExpressionUUID->"90ed414c-1878-4df2-b4c2-3a822073cea3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"alexNet", " ", "=", " ", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<featureExtractor\>\"", "->", "featureExtractor"}], ",", 
       RowBox[{"\"\<classifier\>\"", "->", "classifier"}]}], "|>"}], ",", 
     RowBox[{"\"\<Input\>\"", "->", "imageEncoder"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.887138437516424*^9, 3.887138465243615*^9}, {
  3.887138517515581*^9, 3.8871385786639757`*^9}},
 CellLabel->"In[92]:=",ExpressionUUID->"54e4ab48-d411-4549-a93d-4cbdd9f733f2"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "featureExtractor" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{96, 3, 11,
                     11}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 96, "KernelSize" -> {11, 11}, 
                    "Stride" -> {4, 4}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {227, 227}, 
                    "$OutputSize" -> {55, 55}, "$WeightsInputChannels" -> 3|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 227, 227}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 55, 55}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {96, 55, 55}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 55, 55}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 55, 55}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 96, "$InputSize" -> {55, 55}, 
                    "$OutputSize" -> {27, 27}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 55, 55}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{96}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{96}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 96, 
                    "$SpatialDimensions" -> {27, 27}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{265, 96, 
                    5, 5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{265}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 265, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 96, "$InputSize" -> {27, 27}, 
                    "$OutputSize" -> {27, 27}, "$WeightsInputChannels" -> 
                    96|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{96, 27, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{265, 27, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {265, 27, 27}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{265, 27, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{265, 27, 27}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 265, "$InputSize" -> {27, 27}, 
                    "$OutputSize" -> {13, 13}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{265, 27, 27}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{265, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{265}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{265}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{265}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{265}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 265, 
                    "$SpatialDimensions" -> {13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{265, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{265, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 265, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 384, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 265, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}, "$WeightsInputChannels" -> 
                    265|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{265, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{384, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{384, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{384, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "11" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 384, 
                    "$SpatialDimensions" -> {13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{384, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{384, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "12" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{384, 384, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{384}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 384, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 384, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}, "$WeightsInputChannels" -> 
                    384|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{384, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{384, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "13" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {384, 13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{384, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{384, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "14" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{384}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{384}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 384, 
                    "$SpatialDimensions" -> {13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{384, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{384, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "15" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{265, 384, 
                    3, 3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{265}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 265, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 384, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}, "$WeightsInputChannels" -> 
                    384|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{384, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{265, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "16" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {265, 13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{265, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{265, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "17" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{265}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{265}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{265}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{265}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 265, 
                    "$SpatialDimensions" -> {13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{265, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{265, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "18" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 265, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {6, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{265, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{265, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "19" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{265, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{9540}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 227, 227}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{9540}, NeuralNetworks`RealT]|>|>, 
                    "classifier" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{4096, 
                    9540}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 9540, "$InputDimensions" -> {9540}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{9540}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{4096, 
                    4096}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{4096}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {4096}, "$OutputSize" -> 4096, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 
                    4096}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 4096, "$InputDimensions" -> {4096}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{4096}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "8", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{9540}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "featureExtractor", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classifier", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "featureExtractor", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classifier", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 227, 227}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{227, 227}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, "MeanImage" -> None, 
                    "VarianceImage" -> None, "DataTransposed" -> False, 
                    "Method" -> "Stretch", "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "13.1.4"|>|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]227\[Times]227\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"featureExtractor\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "featureExtractor"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "19", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "featureExtractor"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 9540\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "featureExtractor"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"classifier\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.887138465654709*^9, {3.887138519699355*^9, 3.887138547977425*^9}, 
   3.8871385824211407`*^9},
 CellLabel->"Out[92]=",ExpressionUUID->"c1d0759b-a488-4b9d-949f-9232dea0b9cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"alexNet", "[", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJx0vIdXW1ma9uuyy6mcAZOTsoSyRAbbVT013T3TMx0qO2JMzjmDCbYxGSEB
QkhIiJxBKOdMdiZjV8d11/0z7nt0XIy/mvut9dRZW0cHIZd+PM/77r2PMI8K
vkk/eeLEiZJzcPgmueKr4uLkqm+vwoPv80uyMvLTUv8jvzQtI6049tEpODkM
/+3Af8h4aL1a/uLx8GatyFEqNBcOWouHzMUifb5QnSMzl4w5Kkds5SOOinF3
9YirUmIp7VflDxkqJuy1s+7HiysNyvUGzWqDerVO46rSrdQY1xoMq/UKe/Wc
qUzhqNW8eDaxUie2l/cZCwX6fJ4mq2Uh+cn0vaapu61LyZ2qtC5tZrsqrUXx
CI5Ce8HoRtXYRsXYapnYktulSGpdvNOtfsg3POrSP+zSJ/VYUnqdaQJHarvh
zjPVd8+0P3Qa7neq7kodOcNrBX229A5dUrc+pVed2jefMjJXoFyqc2u6d03y
v1nn/mVT/T9W3T/shr+tO3dcprc2zTu7es+u2rEt7prm9ywz+8bpfdPkoX5i
Vz2yvSh7Myd5Mz30ak60vsBzLLTa5p6b5puNs89VU01zsrqxwYpJyWN5f+VQ
d6mkq0TaUSp6XtBTk/6kNOn+/X8nswJIrCBWQgQ9hsZI4FBjuPTEOEZiIuNG
PPNmAuNGNJxkJDLZN9icL9lRv42m3qBjI/GgiEQG6zeRrK9iaDe4EQlRIGpC
LCgiPg5EiYsjxsbiYxKwMfG4aETEqERE3DgQNS6REhNLjI4ixHLIiVzSDTYu
gR4eG4FPZGLiaNhoOogYwyREM3AcejgzIoRGgiOWw8SwGcFMqj+d7E+LCGDS
QEFsRmgkOzyai4mJBMEgLIoTzGGGcFmoYAzXBLLoQSxqAB3vTwnzJ4eCgilh
oCBCsD824Oy1M59d+uzExROfXTl54sqJE5dOnPA6eTb40mW8/0VcAOgKMdiL
EtZjzu+3F/fZijo1mR2K1B5lxoAub9BQMGQsAvykpuJBXT48lFlLpbZSsbFY
YqyQW2qmXY0L608Va02K1frllccIfit1y46KJVuFwl4J+C1YK5fsNYq1Bt1+
98haHV9X0K3O7tHmti2lPB77sUz8x7rRH57O3mtTpnZqMkB8Y67YXTK+VTO+
WTm5USl3FfcZM3ma5F5DWr8lHSReyZWs5w9t5InWsvn2ZCAQ1GV88Hzh+35D
isie1WNKQfETqFIEs8mAn2Kx1qXuemeQfDBN/8Oy/C+z5u82/c+r1m2n8Y1V
jeK3bV3YMc7smqePrDOA3752DPDbU47uLA0DfptTfatzXfb5Futss2GmWTv5
ZGm0YVZaOz5YDfiNCKtkPeVSXpmsswzw49WkN5U8ePDgtySmP5EZyIgj06Kp
9Hg24Afg0RMSgD3WrUTmzRjWjUjmDRaKH/frSMAPH00EURLojC8jmV9G029G
UhOjQbTEOBA1IR7FjxQXR4iLx8UmAHvYqDhCZAKIFBkPiohNAPxIMdHEOC4x
nk1IYGLjaYAfLoEB+IVFUjFRNHwUHfDDcxkYFhXwC2N58ItkhXEYIRw6cIVi
htIFgsExh+hDFMLja4LZtGAWKZiOC6JiQKFUbEhEeBApJBAf5B3icyXoyuXg
K9fCvK6EeV0KvXwN5+1LDfalhftQMT5U3HUa1o9BHN54LN+sH1qpBnfqWErn
LWcKtfkSQ/GAMhfUp8wBifSFw7YK0JCpfMhUJTFWyi21sytP5lcbpm2VM4Dc
So1q/fGcpXRcUzBhKJ61Vsw5qmbtVdPO2um1pgFTacdSdvtiRqciq20htWnq
fv34T2CDXaqMPlOeyFYktBX1WwvB/cSOIpE1V+IoAPWbs/vMGWJnnny9aGyr
dGgtHzTozupzpPVYkgG8dt3tds2d9sWferUpcGWPMa3HnN5nzRrQZwoX08aW
ipWKx25N51uj5L15+q+WxX9a1Ch+4H7v7Nodp/bAqdm1L+1b5g9scz875gG/
Pc0o6FAzAQS+nhlaHetxz3Ta5lqtsy26qeblkQawvpmhmklJ7YS4bnSgdqS3
Wi6okndXDbYUd1dnNBbfR/HD0/1pMUQKl0yNZVJj2QAeLTGBcTOB/eUNzlfx
nFvR7Fsczk0O+xaL/RsO7SaDFEclxkaQ4xnUG2zGrSggkHYDPDCGDtzeiIef
BVETEsjx8aSERHwcYn2YyFg8N5YQGQfskaOAPSAQMUlSfCQhjoWNRdgDYePB
A6mh3AhQuAdCXCQDFMIgh7OpOC4LG8UGYaLZwBguLjoskgkoBjAofjQSWCL4
W3gUCxfLhfPHCuUi4MFTgUzkNcNY5FA6MYRGCKXiQyIwQcTQAHwwHIHDIHJo
KBUTQscG08JCWVhsdEQIhxLMjoCfDWLBgLa43zG30zr5omnYVQ3ZOmQuHbaU
y60VQ7oiibYQjlJT6ZijGjJ01FktNVfIzHWDumqpqXbK/WTG3TRqLp8wly2u
1i26a8cMRUPKbJk6d8xUPAYoWsvHbVV8RR5fXdSnK+3Tl3Qr89oW0nmq3AFL
yaCtbMhZLl+tHt2oka1ViV1l/bZ8vimbp00VGDJ6jZl8fTrfkDpgyx7ZKJ5+
UyVyZQsdmXxzSpf+frfhAc+Y1KkD8/xRaEgXmTL7LZkCc0afPVvsLpLai4a0
+ZPKErW6fkXfvW0eem+b+btt8V8O3T9cEL72/VXz/orhcM3wfkV34FIeOJZ+
diuObLMH5ql9/fiBbvxIO7m7PPJqWuIe63HNdNvnO6xzHdrJ5iVZ46ykbnao
YXa4aUJcPzbweKy/drS3Tt5TLXpe0lmTUV+cdO/B74kMPyzVlxKJI7AJETEM
SiybdSseMhTw4/7mBvc3CZFfxXJuRaH4Mb9kAX4Qu+R4GimOTklggvVB/tJv
ggciP+LRDfqNRFpiIiUhgXLjJjEhEcUPx4kBAhH2ohPJ0ZC/CKiUxGh8LBMT
Q/WwR0OsLyYiJBL53MM8BOKjIIJZGA4tnEsH6wO6EKKiEKMDwRioAPB8qUQQ
cAg0ogSCsDEcABW9BtiDZzGRDHhZMFIgMDSCGEzBBpMQAkPI2FAKJpyOxzIJ
YUxCCBMXwiaEccmhXDBMRhCTDscQNnNi68nwSp3EUSV1VI+66sZdj8cctWPW
asVG8+xKI9R4o/aacWcdaNRRO2Kvm1xtGbE3jzqap1efA4Gjlpoxa+Wsu3bK
WiHXF4jVOYi0eSJtHsS33F4JoI46n85stM5uto06m0SmSomtemytYdhVK3NW
SV0VQODIerVspQLw4xkye4wZPEN6l+5Rh+YhiGdIFTtzwP2kK/kSV06/JY2n
S+IbkmHQa0rpUt+DKnHAmAXQdmgedRvB/XIGzXkSTd64okiprAP83lmlR/ap
vzsW/uFQ/8Ol/+u65WDVfLBqPFo3An77zuV9++IH19KeaRLwOzJNHRond9Vj
rxelL6ZF61N9K3MC50K3bb5bN9mqGH46L22clz1dGmmZFDeOixrHBhrG+hpk
vBphc2lbVUZd8YO7939HoPuGU3xIHAyOiaFE0wA/5pcf8eP826/w4zBusum3
2LSbLEhewA8MEAo/cD/GrRjGrbhf8EtAPZCSGB9x8wbpRgI+Ng4TFf0pfuB+
tHi4LBHwQ90P2MMnMsLiaKHgflHUjwRGUrGAXywHHwOmxwznIl4HLAWwInyZ
VB86JYiD2BrqfqgBAmZwBrHHX/SRWC4S2bhoDrwOEuLgk7SIMCopnErC0Ihw
xNJJOBYFyyQi3sjABzHxgQwCIBfMYgYxgT1WGJcjc9YNWsoHTOVSa6XcVisz
V0i0pSJVwayradRUKdaUDCjz+5WFg7pieHZ6vXlirWNitWvC3TZifwZOKNFX
SAylMkOJ3FQmNRRKoFDU5/Wps/mqTKE+T2armllrm3C1TLpb5190Lb/mz221
j7ub4JeOrDQM2asGLaWDtpIhVxlEcKc27cn83XZ18nPF/ealO+3qJMhToT0H
whfcD47Da4VIjadLAvWbU4XGlG7lvT5NGk+Z8nzhbtPC7SdLd1tUSZ3LqYLF
tKG5nLnFSrum9bVl8MA69sE+97Nd8cGufr9i3HOD9Ier+gOn+p1l9p15atc2
va0f2zVOoAb4bln+cl6yNTu4MStcXRQ6FwS2uR7jZJdqtFUhbwH2luRtk+In
E4NNYwNN8r56cVeN4GlRS1V6TcnD23d/C9YXQrlO4IQDfsRoKjmGBSBBCQdH
1lcJ7N/Es76MZt8E/CJ/hR+wh+RvIgcMENzvUwJ/hR8hLhYXA8kb8zF8o+PI
0TERsUiTQk6IgvIPH89Aqr5EOoJfPC0sjhEWjVSAKH7AHlyDi2ahMRrIpvoy
Kd4MiheVBBwCb6izgQA/lEMYw0m4GH4E8AMbBIEf4mMQEaIikRxnsfAsBonN
okSyiGw6JYodEc3Bc2nhbAqGExEKscsEB+aEcrigMG4kNjpm1Nkgd9TJ7Y9H
HY+lxqp+Rb5gPle4lC9WlcARxoKFnO65bN589oC2FOxryPJsxN0pd7QOaGt7
VWUibcWgvgzaYZm5TGwshCZlwJAv0OV0qzP5ujyRuWLU/kxqaBjS1485mmdX
26ZWmoctj8XGylFXvcRWOWAqFttKwPrEjpIudXr99I/PFPca5r5vWvixU/9I
5MwbWi0a3SybfAU+WTC8UjBoy+pRPwDqhMZUkTFNoE7mKx91KZJbl5KaFUnN
ygeAX4ciBfAbmEyfniuzaFpeAn728ff2uff2hSP78r5Lv+sywPFgRbdrW35t
nHqlH3tnntgxjG8bRt9p5W81w2+VsldLkq158dqsaHVhwLHQZ5kB/Lq1452q
sU5gb0HWNiVpnhQ/GxM+lfHrB9qru5uKnlVm1JQm/3D7a7C+YLIPweN+gB8p
hg4sRUAtdysObBCBCui6wWXd4IIHsr6Mot/iRiQCfkxKPCsigQ34eQiMRvMX
EcIeNCCxlMRYyo0E0o14YnwsEEiMjiZGxRIjY0jIMYoYGQkYAFpgbp7Wgx4W
TwX8whMZ2EQ2Lp6FiaYf4wfXwAC1vpBIRlAkIyCSGcDxdBNMShCDHEgnBdCI
/lQCKl8Kzi8CDyfh2VA21RPcDKRt4bIxkRwcl4vlsDFMhEByZCQtNprEZcOR
Hgd/IEwsF1oeFtCOhHhUFDYyFsONAeGi4oAEKQSoswE0pC33sFcgN1QNacrg
odxYPWyuEaqK22cyQD2K4j7d42Fn+7C9RaCuEiyXy6yPR+yPB/Ul0JhAXwzs
iYwFfYa8Hi3S50K9JzM2yA2NY+anY+YnUl1Nn6K0V1Ek1JSIDeX92sI+fRFE
8PSrpunXjRJnKRhglyGtWXXvufIe35IhdhcAgUJrFnQWg7YcmbtwyJbL1yTx
VQ8llsxhR77YnAXuJ9Ck8/VQFubwrdk8c6bAkAPR3z+RNjVfZtG2vrJLDt1T
P7sXPziXD53qwxUjUvit6o/W9HsOxTF+u5aJN9rhFwox6LVKBgS+WJCsTAvd
i4O2uV7TJN8wztNN8DRjXYrhjrmhllnJc8BvtP/JEP9xX1tlW1NBY1V6ddmj
b3/6GqwvmOQL+GFZgB+FEE2j3Yii3oqmQi13CynqaIkcEPS/wB7rN9GAH8Je
AvOYPRjAj4B+hR85IYZ8IxbwIyXEAYGkmBiEQPBAbjSew4WPPpwFnSwDwS+e
DfiFxFLC4+nYmyz8TS4hEfwKjIsGF+BQGLj0j24Ww8bER2ISY8LjuEiksiIA
P2APeEPZQzmEI+AHQuH0iBJApyJJymSGMhihNHo4g0nicqkxMQQ2tPxRlNgo
HOQyhwa/Dh+HGCY+OhaoQ/EDDejKQP3qYpGuDGATq0uBuoW151OOxmFDlWKz
TfWmW2ap6VMXD9vqJNb6EXe7yNos0NTylsv4yyW9qiJwP5mlkr+c1avK6dPm
CdQ5nYqMtqW0juUsnipfoq6R6xrGjE9GDA0SVaVQUdqvLAH8epUFPEV2jzoP
DHDAUiTQ5wKxfGOuwJo9uFIwtF4sdOZC+HZqkzvVSW3L93oNgNmjXs0joT6t
X5sOvjegzRi2Fw5Z8gYsOXxTJnDbrktp1SR3KFN5C6nj6tIFZY1Z3/baJT1c
nT5wzh06FT+v6vecuqNVE+C3bV/eti4cupd/XlN+WF3as07umMff6uSv1NIX
Ssnmomh1tt851Wef7TdPCQzjfN0osMdTj3YrR7qW5B3z0vYJUfNIX9NwX+Mg
v77jWXFt2aOC3Nt//OGrQKJXEBHCF4NhhmM5BFwUhXorEsHvF3lsLZLhkWeO
BeGNHPfR/YA6oJSaiOQv88tYJKy/SoAUpiYikyq4WPCxSHwcIlJMNAhiFwSF
HzUujhwbA84GnzWQBk0Hwl4iMywBIpiBiWXgYpn4OAQ8xPdYEYg4dMQAufQA
Ds2PQ/dDk/cX3wP8rpOxPiQMCNwPNUAQDLyJ4dfwoVdxYV5EgjeJfJ1ECSBT
gyOoYXQGjgERzCJyOMAhMYoDIkSB0yINSyiHBfiB+4WyIoPo7AAqc8hcLbPV
iA1Iho5Y68astZP2Bs2bLsd78czq09m1ZsNBH0Sz0FgmtlRLnQ0Sx7MBS2Of
vpavKe9VlQiUhX2qfKE6r2XiQft0csdcSuv0w6axO4+Hf6iT/lgvvdM+msGf
zBfOFvbPFgqm8nhT2T2z2fzF3PaptJbJ5OdTyc9nkwFXYI+nyQJy6qe/b1U/
6LVk9tuy+aZ0nu5Rq+Lu05nvuxT3+epksSkHkBs0ZkPmCpYfiQxZPGUyT5MM
HUqvI3tgvVC2VTHxonZ2s2FcVz6vrjXq2rcc0v3V2UP30qFb9X5Ff+A2fFi3
vF837jpVu/alA9fikXvhwDl7YJ9G8XupGtpaFm8siVbnhO6ZPut0r3FCoB/r
QfEDAX7L8s4FWcfk4PMR4RNpf+MAv7a9ubCm/FFe7o//+c0Nf/xVf4I3HvDj
YHFRBEw0iQTOdpMbcTMKhOIHgDFvRTE9cyyMW1GeeWb2L4Ix9xg/1ldIZIMH
RiREkeIjiQmRhETkSEyIpsSBYpH5ltg4D4TR5Fik8AP3A9IQ/GKpgB8mgYGN
Q8ADSyQlcJDKMIYdzqZChn6c8ePQoePwZyP4+dEIKHjAGFAHmHkRwkAAGwgd
ow+v4kIAP28SEfDzISLyI5ECyZQQckRoBKIQKjWMQcWwGdDgfJy04bLDOZxQ
FieIzvSjUAFa6ENHV+uBQJGueNhaM+muB+qUb9rnN55LzQiT6t1uqaN2cadj
9l3HzNuOXnNNn6mm31Ddqy/tVRfyFTnd8xndMyl9S1ki6Hk1BSJVXu9iduds
GgDWNZ3eNZYqmMwemMkfmMvrm80RzOX0L+YNKAsFS3m8xay22dSWuUc8VbbI
XCI0F/fosnqNmX22DAhcviEV2APTE5qz+01ZQkOmQJPaq82QWAtGXWVyR4nY
lDegz+Qpk3iaJIElTbSaJ39bMX3YuHTYot3rmDBWzmvq9Lq2DYd0b3X+cE11
sKKF5AUBfj9vmuEh0vY6F/acszv2qX3HzLZ17LVOuqUa3FgeXFeIoOlwz/VD
7Oom+KjvgWCg8uC3ONw+PfR8dKBpqO9xX09lS3NeZXlSVs73v/1jnE/Y5evY
a1hWGOBHiCGFRxFxMVTSDTaIciMSCETxY92KZX8JzUicBzAI2WhAjhLPIcex
SbFgg1zUBuEp9Fk4g8CTwIEYJSKDSA9+0UjHERuLY7PxHA4xmotMOwNgcayP
+MXTkUEMHfwQH8uEVybGsPHQq7JpkInABkog4BfApPkzKYjFkcN9SWHXiaE+
hBBvfLAXLgh0FRNwJdz/WPDwGjYQCPQhE70pJARCAuG6R754vJ/n6E/CB1KI
wTSk4whioaIGM+nBNJo/mQxXeuNw0PaOrzfKHTVQiQ2ZykcdtaAxZ133Qmav
Or97KWv6xbNuda7qvWB2p126Ud+lLeIby4SmcqjrBKo8yFz+fHr39EPRUuaQ
KndYWwQaUhWKFYVDymKZunRYWTKiLhvTVoxqyofVxVI1XFAi05UOG8v71QW9
yjyhrkhoLOrTF/RC22IpAtIE+kcdy/fB8ZrnfgRng2wdtOXJXcVDtnyRKbdf
nwUaMOZIzPlSe4HcnT/kyhlwZg2s5gxuFgy9LBnZqhxfrZkw1czrGgz6zjWb
ZHd16f2m8WgdmW8B9wPr+3nT9H5dd7SiPMbv0D2zYxtH8QP21pYGQO7FAUhe
/aTgGD8kfOWdUP6BZmWtY6Ing73Vgu7y5ubs8vJ7qZl/+uo/Y64Ef3Et9FII
NTCEEQr4gfthY8iEBAa0A+RELhD4MVW/jON8FY/6Gyo0cwE/YgwTNUBP+Ye4
JQw8+LHgRaClBbpApFiEN1JUFAjDZELth04jI6UduF8skr+EGyykC45l4mIY
8LKkaCb0AjgOncCmwxHnWXQLZSPLZ4EMGrS3kLa/wg8lEIHNQ+DlMD8QDFD8
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
/d6qYCoxKIIAgkEgBe9HxiKb5yPwaGNy3DijDQsM0CBGbRYGgB82OuJT4WKo
KIpgiZgo5Ds6kC914UagE9feZMwVYig6keLHJobEMMLj2WFxLBiExXLC47iY
+EgYhESzQKExXGwcMjtNiEa21uCj6CCZJl+qzoPwlSgLBpXFYmWZRFMl1tZO
uVoHVBW8hXyxoWLYWiPSI1vrZcai4cXcXmmSYCQJiJ20V/OXMxombj+evtOk
SC6b+K5g+E/Z4v/MGPhd6ei39QsPgEwIUKE1Y/xFRY8+pd+S2bZ8r0vzsH7y
Lx3L96X2vPnXtYAfxC7kb78yBbqPbm0ypC3yDRu6pF5blmStQLxe0O/K7lvJ
6V/N5bsz2y3JLcYHoKfanxoU38NlgB8k74Azq0uV1KfJWFxvMr7oWX0tf7ur
ODqyfvjgfv/z+tHfNnb/tvbmyAljBMg91/47694r096Wbm9TfbChRLSpAEEW
v11ZeOWc3bLNbFgmVk3DTt2gSdmrmufNTbYOS+p53SVPn+fW1GcmZfz5z7d/
G/MbztXgy59dOfn5tXMnziLfJ/b51c8hhc94nTvr88XFgCtXwq774AOvExD3
86NiUTtC8YPW4+Py2S9gIHT90lwcOxv6tRjoKjDGMzeCtDAcGlwMV6JBDBfD
yY+OF4FHdrmTCb7IDZIEz9RfxPHeA3S2GQYocuhNl+i8DVhceCQljEsK5XwU
PESzGNhDB4AiABnGJUN150UKvUwIAV0lhfjScSGREegNJsj2g1jk9jrk3nbE
/RBhYiKxqM/HIRsakfIyij6wnNO7kNG7mDmkKxqzVsutVVJjpcRYAZpafbL0
smXEVi1Q5Ij1RXJrhWgpc3g+Y2jy4dhitnwpp286Vaoukhkqno0lt8xmZHf/
Z83Ywwz+H1K7f/+g4+vcwW+al9OeLv7Qovi2S3uXp7/fNP+XsuGvayb+q11z
r0OFiKdJ6tOlDhoyBrVp/YqHXQu3mxU/dhjvd9sfddmSeI6UvvWM3o3MrpWU
FseD5/b7bSuPujbSW1cfNVhu15t/emq7125J6rE9ErqyJK5caF4mbOVL7ibj
etfW9ujb/bnd95qDv1n2/m7d/bv93T/se/9w7B+Z9vd0e9tq0NG29v2O7gMc
3yAt8OEr5dFr1f5L5butpdfr8y9W57dW5uz6EbNaqlWIFPP86akOiayps6f8
SWtead2j7x/9/uZ/RdESiN7YK595nTiBfpGd14mT1z877X/6TMCZM/7nzgdd
uBzu5U3w88L7+9MwyHooHZngRcs/ZHWMDaU48sU7GDRVI5kkLnI7BoHNBH1c
6ooEG+Qga1txkXBlaBQVCir4rNH+EaINn8BFbhUHw4lhB3PpvnTSVRLmMh5z
GRfqQyIAgQG0CKjZoHWFNhbk+VYrJjo9iOTyL19+BUd4e0FMYiiHghodEBjE
xMM7h77Vjwp/PmHQvQYykU7WmxxwGet7ITzgbLDf+VC/q8RAn4gQ74hAX3pQ
MDfMjxHozwwJ4mBDuETP92vR0O+E8XyxledvwVMBTjpqoIoDumTmslF7FTAG
FR2kqsxaDr3t4otnEkNxy8QD3kK6zFAiUeZMa3PHFtKm1XnzhrIJbcmoprxj
OOVhZeKPJbH/ncsq7P3hUevv7zd//dOTm5l9f25aSGmY+nPj1B+eLfy5dfm7
xrk/V47/vmH+z92mZIEltdeaBp3CgClNqE0Vqh4Jl5N7VUmtyz+06n/oMN5t
M91uN9/rsN1rsdx7avqx2XavyfrTM/v91rWHgF+T826T8z4MgEy+K2XAnSld
yZdZCkf0RYvWBst698vd0XcHs3s/qw7/od/7p3nnX+btf1l3/mnd+6A/OFDv
7i7v7ywf7ane72oOt5H5Z2QCEPRqee+l4u3m4sv1uc2V6Q3XjMsyZdWN6xRS
xVz/5GT3gKSxpau05mlWTuW9P93/t/j/4JDj8dewV075nPzM+xSwd+LaiRPe
J074fvaZ38nPfE+d8j99NvjChfBrV3B+vhGhgQwC0hLSiGgUwgdxjF846ntc
BrBHZNOJLCYiDoIf4SN+UYAfUk0lsMLjmaGx9OBoRBB22ESuJ93YcAzg0Hzo
lGsRxCtk/DUS3odMhP7Un0qBRhU88Fgoe+iEIfxRAG+gEDb54xl0iyCTCG84
gI4F/K4RAuCfcBnnA7qC976IuXou5OLn/hfPB/ueCbh+NtDnYvh1eOoS9soV
wlWfCG/QdaqvHy0ogBEGAKPlIlIxIt8YQ0DXo0GKV8+hhwX2ALwxV82osxrA
GzJDk1s5tVY/u9k0oCt4Nnq3ay4VLpiwVcgVmdK55JHFjHFVwaSudNJUI5zP
K+f9pU50r0L4E19d9ng8tUx6L1f4TcXI/frppB5dWpcaAvc+T5cEpgfm1qq5
K7Cm882AXzrg129IEaiT+pYfiLUpMij2jA+7DHe79Pd55gc9FuRrJJ9rfnqq
+R5crtl055nxbovtfrvzUZvrYbsrpXM1pdud0mlPEjhSwf0kxjzxcvassda+
xX+9P75zNH/4V837fxoO/mnZ/5cF8Nv9l23vZ9P+e/3+gfbgQHu0rz3c0e6/
Ue2+Wj54rUT0CnG/7ReKNxsLL1dnt9yzG9Z5l35SD/jNCCfGuvuE9U9bikpr
U5Pzv/vd94lRX9OJsdhr2Kunrp8GIQRe+T/w8+xtO3s68MLFcB8vYqBvBAaE
Zh8yOcylBbCInpsyEENA8pRNQ25DY9FIHAbJ44GoAaLuh4vlekp65CsLwmOg
mEc2O+HiOYTESNLNaBAhMRoMMJBF94kgAXtXiTjfCLKfRwAh2CD0qugXF3xc
8PW8HygJkBvQaDi0NkDP+5DDvEmhHgX7kEOu4v0vYa7D39H50Cugs8GXPg84
d9L3izMB3qd8vU75Xj0TeOVs0JUzQV+cDT7/RfiFy3iEQy+Srw85+Dol9DpS
heJ9SMi9IT4U7PUIGGBBE65a8Lre5ex+TR74HrpbAAQn4eGwrUKozW+bSRYo
s+HKmZXaSVPRnKV03lIxYSgZWoaPO79/Mb9zMpM3n/dkNLVjsaAegngxt11V
OGCv6dbmd6lT25butizdafPMHj9bvP106Tayc095p1V1t1N5j6e6z1c96Nck
DxnShy2ZUltWv+Fhr+6h0JIismXwjUkdqrutqp+gs+g0Ie1Gq/Fehzm50wZK
abcnd68kd9geQP4OufOGLAVQxyrsTS/2pe8OJ/c+LL7/u+7nfxrf/8sKBIL1
7f/Ltvs3y/5fLQfvzYdHpoN9w/62du+teveV8sM73fu3WtDRG83ha/XOy+Xt
jcU3qwublnmXdlI/P7Q42Ts+3NkreFzflFdQ8fB22n9/+adY5ldUfAzuGs77
c99zoJM+ZxADvH7ipP+pUwHIpkpg75T/+ZN+586HXIOP7xoBPsowXwou0DMD
g6xKgMMwiajbQO+AfOEtA5GHPTrgh0UW/ZG5X883SrGBVdQwQZC/QCAUV0Ag
8UYU+VYM5ct40s1YbGxUMIfpz6D60igQu2B9wB6ksDcR61E4CP0SAy9iCAAG
bwmFDR6i32wA7/MKLvASxt8jXxDkLPwFfRHqdS7kMrB3JugiosDLgN9pf5/P
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
5zyHTA8Nvj+G+aQyH2bzX+T3e+cKX8FNnsircMCnsN+rdOBVifB55aAPfSKi
cTS0QPgsg/0guw9ZDyyQvi4ZCsyT+HwQvYLgW6gIpCpDK4ZCa5RRrWPJfR8L
1F/pH//B2/5vxe5/j/7xP7M7f5lc21avbI5+/jL/5dunL99WNnZXR+bHxtcW
pndWZr58mtxaGv40yRkVNQnbhNNi/rSIPyPgz/T1TfP65njSVYnqyzB7ltEz
2cEY72ZPc0UfZZJ1tXhFLVhSMieErCl+3xyXO93eMJCf0xaW1RJAZYQW1r0o
rnleVPk0v+xRXvGD7IK7H3JvZ+XcyS2A+/uZBffS8++n5d1Lybv7Lu9uUt6d
uKzr0WmXw5LPByWdDXl3PiztUkTG5YjMq8nUx28L7icWPH2b+yT03R2/mF8e
B5w5f8eJdMQM64qIdJRsfdKWcsIOHI9w2Mr2lKvNSZcf3SaalRlrnBPJiGJo
amNgZo8B/IiuFhaulmjwhaISY2txyAqnadky0iGZIF0KFJyFg6WhubGFDdHB
3Z7iRDYhGLqfcErOjG3qqm5j1qXlxZ6/dsTEYt9BYy0jghbZGeoajDZRWwuz
dz/uoA7ZEAQlzwELQyAQFUCoa4UgBwI4QVAZGdiY/okfDiUQdT8g599kaUwh
G1uRTK3IKH4YG3OMDcIe/FohKzyOBAjxyCaOJVaTOpL1yAjAaD+GNtHsIMG0
RvOI8BpJYM1gcK1mkCOwVzYYCF4H1KHsgfsBe8UDvoBfnSq4RPKieOB5rSqA
NhpaPuRbLPEuG/QvlQUgHcjq2JKBoAzmy9Te57kCv1JpeI30Tdvwe+HHsqnf
ez7/j+zX/63a+rtq9VfFx8/yjS9jO9/mvn77uL37cXNncWNraXVneWZ7afGP
zcmdpR4lr6C1vLC9rFfFGf91RrQ4wJ7i8Ga5sjWJcInXOdrCne+d/OvI1H+O
qP8yqNiVDn2RKb4qh76qBjYUgk9SurK1a6KTNdPeOlJJ5SZl0P2T65+l1T8p
oj0tqXlYUnW/sPxOfsnt7ILr2bnXMnN+ySm4lZV/IzX3WvKHq4mZV+IzL8dp
FJVyPvz96dDkk0HJJ4LfnQQFJh33Szwe9P60f+JJ4DAu/25o6i8BCVf843/2
iv752E17mzMk/GEM0RNvfYoCRSjgB/Wm1THHH7uxaFsm8vApD1vkyYO2hlCA
YB3MIPez8rBBnsLmgTy/DwgEw9EYoCFI28L4EAljAvkeGWtKxtq42Zrb4E3J
mPC4oOXPs4trE7IRHoNd39hakvQ+6OgJir6xlhnpgBlFX49wcD9mz37sAR2i
PnJGEjn0ZLjXXF8Lp7cHq7sPfwjKcD0SUoaDoCDSszLUHFj7vkykadv+3if2
Z+6H7LkATuB+GArFjEIxtbEytbEA6wP8gD1jGwxUVXADSGsabjHge7ok4kEC
OB4ewDtgjtmPN9mHM2aMxtEVEbWSwFppEE0ZDkkgJH6aRxj4QfAtGwoCVQ6H
Ir1PI+Hl8gCqzLtC4QPXXMGzov5XSFPKaHSlHOm9rxmMrpXFUPlheQz/QmZQ
rfhtx0jWwBJSYqz+R//WP4e2/oEc9974NrL16/jml8n1z5PLq2PzH9VzSyoo
XeeWx2bXJtTrE20yRi69sLy3WrQonfnLvHJrmDHa3SJvrhVV0gaqOkYam+VV
VPaHGnExe6516AtHstkjWO7uW+rmLjHYC4zu6c628ea20YaeWXrPdH2jPLeM
G1fQHZxBf/m++k5R3QNq9d3iyttF5TcLSq8XFF/LK7yWW3C1uPRWXvH1zPwr
73MuJmade5t5BhSbdeZNxqno9JOgqPSTkWknQlKO+ie6v45zeRXr9CTczvut
Z2j6Bd+EM89jTnjHn/NNvHrL/8TR23ak48ZY90NETzPycSLpqAVEYfJRWxKy
JGiL7ul/7xF1sQT8MNb6hlb6GFsTcD/Aj3zYDgwQysYf+O03N9iH10eOiuAN
9mJ0sDYEXZwB3oZIdCA5H3MqrMhb3/n4cXVy5+vH2bkhDreJ0V1dU535/NkV
gsVBHSMtI6KuiaW+Lv7gAdxBXQsoT0wQ5IhG+wgGe3F6yFFxcz0gUyM9iNGa
o+KHQKhb6pCMQZrzAmbofhmAB5FU38pCHwpwijXgh7G2RN3PxNoMwAMhg8TJ
BhqzRbe5ATncfjx2P94UBW8v1gjUoYiqE/kXs54XsZEQXC7xLxR6Z3GepvQ+
AAME3ysQvwZnQx4TKQ+mSnyyOI/L5H41wyHIICCRX5UktHIgvIQbWNEXWSeK
a5Wl9Qzn8UZLxNM1I8ttU597Zz6zF74IVn4d+LQjXdgYWFyVrW6qP+9MrW1O
LHwcmZ5VzC6OLKyOTy4Ni4bYLez6wta8Fildvjo4sTsqX5P0jnbQpbXN0qrq
voJydnY5J6uSl1XOSSthJpdxUmpFmbT+D7WCjCpeagUvrYyXVspNK2S9y+tJ
qBSm14gzqgRJRT3hxT2hFeywki6/nPoHVNq98trbpdU3qRW/FJX+XFh8Ob/w
Ul7BRWrZtULqlQ8FF9JyzyR9OBGfeQz0NutYQvaJxJyTSbmnEvNPg+JyT0Rm
eASnuEfnnPZNdPNL9gxKP/Mq/ujDSLfH0UceRXreCj58+jHF7qKhxQkdwlE9
4lFD0jGc1UmS1QmK1XFbgBCSQHM3ipkTCQITxClTOxPAD4pWUzsM4Ed2p0Dk
xTogwwDN7MmAH/zQwfr24g6h0jLSNrLE7zHWxVjhyE4UR0+n2HfRPdx2YX/P
/MLIzJRM2Nci4tL7uU1VJe/Dgx46OOPwlvoGuAN62AO6eB1tPMCmWXJEj+4S
DOCP8KKO+SEdgq62+UEdC52D/xJyWgrFT2O/GEjYIG37gZ8BmWhgQfrXGjjZ
VJ9kpEfS1yXpHrI8BDeabzfR2B2Cn4ZABD9wP9QA22RhdRAlWS9K2C8qRL7I
CozEv0DkncZ6hOZ+IDBDKH7RFcKqoZCKwZBqRWTDSByAl9/rU8oKbZG+549T
ReOVitnGqU+9C2t9c8u8yXnm+CxzdKZXOd4pH2lTjbPmFyUra6pPK+rFpZGp
afn8omppZXzmo0oxIebKurv4za19tQPzfMmyQLYs7JtmNIkrSrozirvTqrjZ
9cK8elFObV9mFTellp/a0J9ZL0yt4SY18N/V85JqOUnVnMRKbnw55y2VGVPU
G13OjavgxJT2hBR1+FUwgmnciFpmUHnri/rWJ3X0+7UNdytrrlPLrxQVX8wv
OJebd6ai8lppxeWisos5xWczC0+lFZ5MLTiRUnDiff7J94WnUopOp1PPZZad
Sy098674dHz+idSKy1G5J8NzT0Xknw/MOOWTdtI37ezzpGOPY4/cDHG48NLy
+H1z12tYylkDwtFD5keMIRybH8YTPIiaJUESlCRYFwLOGQf4Qe6H1L8OZgQX
Irrwgnf6/vhmtGkBsnf0oNwerD74xn6skZbJIXAbnC3JiGBy9vKZxHcxFVUF
dTWFzM76cQV/ViXmddQ0lX/oaSmNjnrledIGPPCQ2T5jkuEB04Naxgf0SMiG
C4qfNh7BD8jUwR04aLYPyNEm6aL4aQxQH5mqQf7eJAb4adYAyWjwNaZY6ZkT
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
5sflf/ik4u33in7/ZtZv/9sf/uFbf/+N1376ldurRfzwldurRfzoiwvogFby
3Vdf+cYrr3zzi+Pvf+WrP/ral3rth1995c8An6+CzvIq6Czfe+WVb98KGOYX
c/xrf/6z7/7wn37ys3/5uxF1MUKUA2OkjYoKV7R1C4rKZU01I9g7qyldMN5+
1AorqRll1w2TG6GgsqMKqnsffFj06z9k/neQWn/x/j/+PvM3HWPNA3j4umJl
ijVM1C4QdJPzctS6dXTVPDCvgowBr1Nj1ozDeA2CoO2jmKAUYy9R3sQwdAlt
ULlzQG5HM6Qd04TC2bVSrqo3dLboPBzRxeHyQBfAT+xuBJK46vjGMqm1WmWp
UeqqlMpKnbLWqK7Xq+rkqmq5tlZuqJfp6yS6WpmhXmNvNno6pLpK4H5aU53O
WKfVVapVZWp5iUIOOKyRy6olkjKRqIjPz+XyMgF+bE4awE8kzpVI8wXCHL4g
WyQqkMnKxMpKkbVFYG8VOdvl7i65q0NsawHgMZUVPE0tS1FJE5dR+KVkfgWJ
W0FglSxv5y3Ss3CszDVeLkB0k59D4WdvC7MZ4lymGKy3x1R+JlWYy5AXMeQl
DHG+SFEgkmeL5XlSbZHCVKl2Nmg9rTp/p9jWxDM3cAz1bH0dU1vH0NRy9c1i
ewfPXMe11nJNteB2rrGFb+pg69op8haSuHlN2IDj1cyxKqYYxWPUHDQpHbF2
D4m/h8KnYVbTBonpmPUMQCaSmIFYzYDgHnTN32ua/Khm+I/VQx+UY97Lgbzx
ccMvP6j87dsFv3636Lfvl97a4Nv5b/zq3i9+9uu/fuWvvjgx+J1XXvnhV177
yZ/d6sff/upP/vyL68t86ys/vi3Lr/7w1df+Clji177xk6/969v/8vaD37+f
8fYf7v77Gx/96pdv//Mv//B/v3Xnt8VN+VXdFR0DLdCJPsw8atxQPG2unNFX
z6qrsMJiGDltiJ274ehaMNThnW1r3h68HbKs71uUQ6fZvaObHR0TxZ2TJeX9
aWXQjLyOezWo4lnW2DAJ0bvU3IdvJhln6a65FR1ywzawrO8e4dfOSLvWLUM0
x/CmEbZp6GHaINv6FoKwmCyv4pvbJNZegaF3W9a+QC6ZJhavsWp9p7OOoxHD
DlwV6pL52uTeZpWvWetvlttrNI46tbVWrilTKMq06hqTodFkalHo6hSmRoW1
GUhmbZLbmjXuNpO/W2lp0NoajY5mg7VRo69Ra8q1mgqdttpsareYO8FqNDZr
gFvKSgCEbE46QE4iLZAriqWyQsCeUJgPgiIIkNvKcpqummVuENhbJM42gJ/Q
2AAIBPixlTUMaTVdUrMtqSfxa/CM0oWt3EVa9tJ2xsp25iojc52VReFk03jZ
TEE2SwhaTCadl0nlZlD52UxJAUdWypOXiOSFQmmeQJYnVhXLTVUaVzNgTxvs
kjhbhA6AfZvU0yXzdkvcnUJHB9gIEk+L2NskdDeBX4GUovYhZE4YV9/L0kEY
mh6qqpOsbAe7GyeunuEVY5l5Y6RM7GYW0Dg5AxwPbaQPbqSh1tPha+l9K/c7
5u82zXzSMnuvYfpuEertey2/fr/iV2/m/uKtvF++U/ibt3J/+1bu736X8euf
v/vffvDPP/rm3337lR9/7ZUff+MrP/n2qz/+9is/+rNXwFT91iu3Tvjj1777
j9/7+9f/4Xd3f/Og/E5hc+7ADHRle3ZLuLrOXsJRJiZwqPElxMLG6AR+YG5j
hECf2+AsbnCWkYq0GXvFvKUWKy8dFZTdXrJcUkuwdElOZ8gx1LS5eUxdN2/q
JliQC0rYOLNjQQDb1GBRq01wfNMkAzFOhS/yR6eZ6N6FGgSxiWKeYLgnV3X9
BF3ntLhimFm4pGjbtCAYDiTNAuE4ehQhqMLfI7A2bCtLJfZWsal1W15PkzZt
8BsWqRUzlCLL7rgxidJE+xSBDrm7Re5oUDjqlPZanatBa69RGiqkqhKlttxs
a3Z6Oh2+HpW9VePpNgT6gDT+brWvSx/oMYZ6zKFeS7DX4u82OFuAB6p11QZD
ndncrFY1aDVNRkMbIBDQqwP0qisk8hKZsgwcgLsBKdRVoK2IpGV8RTlFXrKp
LqPpqpiGWo6xjqOv5mpreJoavrqWp6rjKBt56haepp2haCULG9bYFavsYgIj
F0/LxlMziNvpZFYmnZvNFuQweVkMbiadk8Xk5YBmBCo56ObAt9UG4OcVUk2p
SF3G15YJ9FU8UzUIukJns9DVAiRyt4Mo8kUa6eA6mqXBViCQh0E2Vvph2vCg
2jsotiC5RhjHAGUboSxTP93Uu2W4/RTxqrx2gVm4QC+Y386foWVPbWVjKZkj
m+lDm4DAB7C1+70r9zqX73Xjs9pXMquwn+T2v53W/If3S1//Y/Gt3sz5ze+z
f/tG1m//7ZNf/Pk/fvfVv/7aK3/56is/+NqrP/3zr//ND7719z/+zj/99P96
919+ee9Xf8h794OSDz4oev+9wnc+KHjnk6J3y9tzB2Z7l7ewuC3s0sbIFA45
sQRd2hgis+e2BAsMKYElB1pr576LVmcOSrNBAVlQt2z7h+iB4U0Pkhodwvv6
pyyto7r6MXXjqLxhkFOD2Koi6jCrCgxitW58u4dqnF8WDM1zBlg2HNuOm+dB
sPTmKXY92QhhOaGzgsIhWjrZ1E219NNtELa9S+zp1EQgxmiPMdyh9jYZgp0S
SzNNXs1Qt9CUnWv8piVWpf1wyryH0ScQ2lCv1tehdjWrgOMZK3S2ap2lSqkv
V+jKDNZ6T7gnkkKE9gbMkX7LDsq5PwRkS6EtOwggexIVOBrx7aFdcbg10GNy
tpjszRZ7i8PRpde1GA0dZlOX1QLUaTa36owNt/aoq1Zpq8CB3tQIbgEzHeAH
DIquq6Yaa+imWrqhZltXQVeVgcnLVlYypZUMSRWwPoaska1so8vbyKLmdW4N
mMJrjAIcOQtHuk8g39/czqAxsxjsLCYnm8HOYPNy+aJCoaRUKC2TqWo1wMDt
rcCi9Y5mjb1RbmuU2hqkrmap94vc623hORsYthq2rZbvbZb4OwS+Fr63EYjr
buTaW4TObrkHCQKM0IRgaPqA6EC31z7rpeg6iepmorxulV9B5FescktwnKIl
VsECM3+WkTvFzB0kpw1spsPXMyDETCgpr49U2LqUWT16P6P1nQ/L//2Dsjc+
rnz7veI3Pyh9527VJx+Xf/x2/nuvp7/1q7tv/S79vXfy7n9clpdeV5bbWnG/
NiOzOSO3PS+7NSu9/sH96o8fVH6UVvXRHzNfb+gvHl3smyLA54mohfUBHAmz
yZxgCBeYkgWOfBmILVvqFX+A0WaiRBk9lLuDnNI5Rfu0tG1YUIuR1k0Y2+Y8
PUBjuiY4vwRCL+jfKl6Q9s5wuza1IwLvCs+1ssRDwZfrxsidRAl6VQwlSm4v
dSQNDDGMbaObHy8JCiXBAa6rn+Polvh6VaEefbjDEm137HQGjxHWaJfYUsc1
1PNNnTRV+6asDexc3+Nl++m4KTVgjEHNEYg10GVyNmnN1VpjhclWa3U2WN2N
Dn97IAmNnwzGzka9xyO+s8ngxUzwYtp3NuE9xfofToYeT8UvZ6MPJwIHGN8O
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
GKwx+cp0rhJQfOiKArq6hmvtE7jHOa4Zvm9ZGiML/WskLXZNgaEZsEwTlqJC
k0SwTTGcLEH+f0y9V3BU6b7lSQHy3htk8OU4BRQUVEHhEfIpk0rvvffee++t
0ihlUkp575BA2KKqqDpljj99z+l7z9zpfpieh4mZjomJfpv5BPfenogVX2zt
JIUgf1rrv1Jb+5vY0CWXNJll09rTyKvfzn/74+L+QebJbvK7VzOgEfzwdPK7
3bHnq7Ffns/96dvVv/+08/eft/70dv0P3y2DTvHXXzb+6Q+7f/vj7t//9Phv
f9r+6x+2//y79T/9uvbn323+8eetP/y0+fsfV8Fc97tvF37/Ove7F9O/Ps9+
v5t6swWoC2zPuDezrvWsczZlHgsr9GqEzUaKR8QT48aZSdvctHtjOXHwePpg
J/vqae71QTY3aZaJIHj0VRL+CxLxKhz1GRx7CU28iqNcJ9C+Gj+Q+1cYnnla
4rF08sCQ2FVH1mSxTWVqR+9fEpkyROs0EfDpXSaZJkdMU7DgBnf0sXT0sdy/
zLVOUsxjBOsY0ZYheaYZvhwjuMCMrnASG7yxx8KJJ5Lx55LJbyS57xRzr5Rj
G9xAhuAdxcXGWcD90gvS9W+8cweW6AJ/clu28kw//1i6uCMBsTs5y5xY5E9u
KicfG5a+CbzH7/Hr1P7T+FhCYtMhVbxOMf02h/BF160KNuVi2I1an1E/WfG8
2ko+W02vTQTnE06vkRl20/0epN70tUz3od593pv6OD55MT562e/6jdd2dTwO
2d+Q/PyN/08/pf/8a/qX30Y3NiTJFNxs/9ruu/P0jeynP1vT86jUEi2zwZ3f
l2291r34reXHP7j+8Bf3n//m/ss/Of/pn51//1fHf/ovlj/+q+GXfyh+/Gfx
278LfvmH4Nd/5v/0N85v/4n9C/jwX0Q//k3w5o/st3/lv/2r8Js/cZ/+RN96
g197gV1/idt4hd99Q956RVx5Sll+zt78QfPkT769P8c2fomu/Zyc+z62+P3o
xs+Z1bfJmae+6X338stAbt86sa3NrGkyG/rkoi6aU02sOtYPEtOLztExrT8g
XFn0bCz6Xu2ltxd8u/O+rWnX/kLg5Vrk9Vb8m+3RN7vJ75+k3j7L/PLN9O+/
n/nTj3N//O3c797O/PJd9tfvp3/9Iffjm+wP30z98Crz/Yv0myfxV9uh5+ue
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
7sKQX/UNXensvfTVrbMffVrferKsvqmwoupYfvGRysZjpfWH1AEV1Bze/zmv
Gvx1BQV1hxto/scd/443HAewHW8qPNrwb3p/lzaEBgHE9DLlKbl0VK5Mq61z
dseSwzpvtc6bLXMmsPo2XZG9gHPFKs/wlZMc2RRdN8t3b2liT+yRPZtvRW+f
VXiXDI45pS0nd86rnItK66zEMCPUT/NM8wJDjm3PcVVRgi6E908KA1OiyILa
P68EgI0992ZeeGM7Ft+Syj0rc89Ig4vq6Ko+tmGMbZpjG6bEpm1qy7Ww47O6
qSoNXK2GK1QjDH5H5/BH9hh7clnP590KOlETo6yxIP09gREbOe5lBZ0UlWKQ
wvkaxbgqcg0o48gO5vmTj44MKc+ln7OTOxzzKFxjG5SreqwmuELySCa4o1N3
kKifYukfj1DPYUSXgiuc3Bsn+CItk0J1nGadYPtnub4pqn+KFJ+jxGaJyUXK
2DozvcEMzRNNGaguOaBNI0yTVJZzwLsodS/JMZpujLafZIZ1cu4MKyB9wr77
jI4bhLuXEDfO9V1svne+5nprzeWmhist9Z83NV1rbrvZWnu5uupCWcv1Ru2o
cubF5PK388H5oH8mML2Xm92bj83HYnOB2JxvdCEQmfOE5j2Te4ns00xo0Rtc
8BhHNRwz/WrXxdK2wqqTZeWtxYUNx0tbi4tbiwpPFBY05+c35eU1Hs9vOJ7f
ePR4/RGgosYPSk8cL246Wth4BByAIe3U6cpPPqy9eKHp4mdNn11qvnCp6aML
dSfPlTe05Nc151fUHC0sPVJc+kFlVVFNbXllTXFR1dGC6g+K646XNRaUNBbk
1xwFKqwvyKs5fqwm/2h13tHafKAP6vMAbEeb3qmx5D82s4bK0BgdmReQqsdM
moxZN2G1z/v8GxFlWmeasbpXfOGdWPJgLP18PLgVNs8a+TGmbIJnnFNaFzWm
nMqcVTlnzYEVlyNnsk0bTBMa/ZjSMKEE5/VTCkWGr50RWJalrmW5PsXQREjW
FMc1xreP821TosCaPv3Mk3nhi+1YfYtaT07pnVWFlvTRVVNs3TK6bU/vulLb
jvi8PjgmVRlQai1CIhsUyQah+Ks9qM8iCxoAM4tzw2ODJcLkmI8QcxFCNpzP
hPHZiAE3VaGEEFlf05WPPLOCzHObY02kymLR1s8nvhWnn4pl/n6G8r7E0G/3
4gGEYvkDsfoekvIhjHYeK77McT4KrgtijzWJPYczp9ImmIYUwzHO9ExQfROk
cJY0Ok+N5gijS/TxLTDHMs0ZpDwEEQcHFQkS2TqkTDF14wKkFjIs70Lqhrp4
9x8y7z9gPXzI6uxgd99jdt8kP7iMvHlh8OqJr1rbvz7ZcLWx+mJV07XGxi/q
az6rALrUe8E2YV7+biHzeCy+Gg3MBQCHCy/mE4vR8JR7dDaQWg5H5ryRRf/Y
1ujYTsKX86jDSpqG+smdCyDdSlsqKtuqylorD/eDPl1ZfKqqsL3svYragEqK
WgCTBYDMkrZiMIMd0lh3tLSpoP1U7emTtc3N5VU1ecDfquqOVzXmVzTmldXn
VdYXVtYXl9cWV9eU1dZVVldXlpQVFlXlF9XmVzSX1rZXVbdVlzSU5NcebhJ3
vLYACIB3pO6dGgqAPmgsfE/d8eay9/oKffNz6NWLg5fvEO+NyGEIFbJfAHnE
7Ojl9QxLB9BaBM6AxhsxBBMWHKD0MIafwEtQZBmONMURRpniMEs1KjFn1Pqk
HKxAurTCOKlyzpt8K1bXqlkJ8FtXgTTXZTjKMFkboTnHhY4psX1aEgTj31Nv
+sAX3rR45rWeGXVgVuuf0wUXDKFl0+imY2LPn9pwWKJsjmKAL4Wo9Sga6yFH
1Ptw8COcuDO4pOdYoCTGdZMB4nUi3RaY2wS360ZMygGTdkQh7eVJOumSDqUf
58iJDDN884os9trk2qRH9tieZYZ7lmVO0sQWuNgMk5lHmPIHbM1DovQrsvpr
vrvfOEmKP9GlntlC69bAktk2KdFGqboo0Z2hBbP0IHg0Rw1O4cI5SmqNO7rC
tWSwUv8A1w3hBdEsP4bmQlGdSJRuACJ+OCTrhsr7hmW9wABHVIMwFXREOQwR
Qx5xO+/T73ezHnbR71+B/KbxSnXNZ2W1FyvrLlU1X21o/Lzu+tBV85hh4bu5
8IrfOmUOrwUjy4Hc9kR0yufPOMMz3thCcHQ1Gl0K2cbMrimXYdQkskuu990q
aakua6uvaGuqPNWU31KR11p2vKX82ImS9zp+oiSv5fB+pB/UH8trzCs+tMdi
YIyFTQXlJ4rPfHTq9JnWxhO1JVUFheVHS2sLKpqLK0+UFNcVVDQUVzWUVdaV
19RWAPbKSouPHz9aUJpfVFlU2VBZ21Zf1VpTWFv8QflxoOO1RYebItUUvNul
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
SHxtFmZaxmoX4KY5tGuabI5j5O5+nqWDqb9N099iWu7y3J3eJZpvhWqYQigz
g7osTJzsEY522dYwY98J/U8o4LmaeYRpnahaRElmhjUrSNF0nyTXp14a1i6M
WNeImhwu+4Nz8Xej4Q1bbNuTfBIA7M29TS79nJ79Ljr+wp16bPLNi4xJgi6M
MMWQtlGMNQzT+uBc8whe0U/VQelGKJR3u49+DSa4gxTf5zkQIGf5ThRgTOwh
8R04rg0ntBNEJjQweYWLJHZgxS6CIkhXRVkgguGSTpx2UDnKMYyL+W6S0Ecy
psWaUT7XQ8Kohx7Rvr6LvfaIdHuI3YMSQnEiGFNL4ugow6Selk9q6k6VnbzQ
WHuytOXD+jOftp3+pP3chbMfXv7o1IWzdaebihqr8urLCxrL8xvK8htLAV3F
J4pKWopKmvMKm48fbTx2FKxNeUDHmwqB3uF3uC9bUVNFYUMlgLawtjK/ujwP
tOPqkoLaEhDNeQ0lxxpKjzaUf1BfcaS+8khdxZHa8sMVDIH1ZccbywDARU3l
RScqitprCtqrC9pqwZrfWmOdt/o2fK5VLy8shOmQLQ/bL6MvcaJM+SRfOsZg
BIakaaRxFmOYgTuXUOYcVDU+JE1A5GmIdmrENofxrpIBeMpEn25i2DQNV41D
pOkeTQ4KGopxBW3fI9kOCIEfuYG3bN0OWrOFDXwrGv+jZfKPdvsuW5HDKmfx
2jmiZByumyO4t7nmVZJxg6BeRmiWEMYV7OGVD/FuUbxbNwF1LuIB294tKvjk
jm2C+ynZ9ZRsWEb4lkiOKbQpPWIeg9knEc4ZtHceF1g93CI2/pjumAcGOBLZ
JTtXEcbZgeBjfOyA5NyAKbLdmtyAY5NoWsUoZgbUS4OqRYh+fciyA3c9xkWe
c3VzmNEXquxbT3DdMLrrHnsamHgRzH0bX/zx8CrQyVfesX1LZFXhnGKDYUAX
ROr8CKMPofWhBFYUWTPEMIKJDs93YhimYaYZyrUjpH7Cu6kPC+Y9gRPPsaI5
VqwI4GfAKCw4lYOicBBlbpDCh96ojrGBBxJ1Q1wXzjIptkxKjRmBPi0Q+Yma
BJvtwCAkPUOchyP8XsAenDcEZUC6MB0PYHcu3b9Qc7qk+nQh0NHKIxWtx+tP
Vdadqmk829j6aVvzJ+0155pKT9aWtNdUnK0rO11T3F5e1FZS0lZc0lZY3JJf
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
hpjKgMpAmY04z1uQp2be5nXCWzIAfpDfUlM8v6HAedGBF+8FEk001UjAgECl
W4lUk6QaBAggXoth9SjeQIBA8FPQtOwEWkYqv0onJgQ23N3XMdL1RrpuaoE0
XuZAACtnmfp5oTRLF0aZ+rTSmNRKvQIoHngu4AcrHNfOLIVTfbB6EmlzYCC5
xQfCWI+bmEpSM3FhpSjMZZWFHGipzWTluQwE0FM/iHQZ+EwITaT60tR650xv
VNSpAtbshS5zriWWsthEmFwqC9fGzFaZ3siTd/tUi0tZ+0LbO9c2VvLCiNvc
KhobaXrCwod0YsrMnAsab3X1W23/C2vlSkVOOamloHAhL14qKjfq8rWKWguz
51J0zkamzMTuGnN+4VaRB7S23PQZL38lSpyygr3nof4LOIBH0Olxcs2uvJKD
4sEj5IqJzU9AQqM9Jj7lFq4Uu51aC0Ziy8lcivIvZekrSepCXn5tTp7rkLmc
3BiRmS7a18dH9szKn5y5E1NXfh0urMOZhR9qKYS0Xe/I7E4sQ7+4O/Ei31EX
3Y0N1d3tfNbYEjp3zmRLa+wZtT2vcZZUjpLKXpLbSzIYfZLrLMnjfVugplfH
eMooF8AzExoTrrVTJnfa6snYvFm7N2eF7wN4g/oBgXT9o085P/z+8z/9q8d/
+ncH33/I+fhT9k9PdMdCB0fuE4Ljg+Qa4iJXWqcLyXUhpSYigQ/tlCxY0eB9
Z3oWwns+dVQg9LChREQanmjLGeu4yEEo2YpnW1S+ky50M7ACfmQ1jpYQAqzz
zoihuoIYQo/IDBLpUbK8ztcuSuWLPDBcOKcar/Iw5WsqtYxVL9KNi2JlkS1P
iu1lo7Po1Md1qk5SrUS6Q8GAI9cvnPm1EekIPRUGMVFQEM8W6txG56+dgBhm
ZpLMSFiby4tDfmepaJ4qyAHP3ziODXjEVBjtgZ4oStfGOBj3gFu8MU3+JTr4
OphcKwN9NrVRDb7xU1v5bgvxlQ4stbZVjl6b1l+5z3/ubm9lrXNp50rRvpZX
rySgXfW3qvbPDKVreflSCexF+7Tkkp87k6bXIqAutRHhK176QhpfcOCg9EpT
uFXV3+vLr5WJMy65067dm3QgYtQ5r/xWWX2ngmN0QUfmtNBoH9b0pSBzKcms
FeE2B555ciEGFQ33j6PD4+iE3vmZJXUhxVYibCkODPmBoZBYG9KXrtjYEO7q
85tAauHGhrb8JgT45U9DoZrBU1DdX8gGwQw6qTOtdlA6L2VxYKY7CNW6kGx3
kYUfrFOqRsTqmFCDiwzwJTmFvai0FRTWglSNs2DMlMhACiWBXR6zJnSOFBRq
lzNtNaKau32DGiAwVNopIfwskFmR++iZ5Cd/9eS//cGPfuePP/q9v/jsz360
/4Nj9R78OG10t9UKtE6LcCA3qnxSlVeuCkpMmMyT213mGWvv9lFT47A9peO7
mFzHiS4u85VN0Koyk1imjQN1xV4WBg7SjQRRQePF6H0ZAXKgRKS6FNUhqU4y
0SVTY7K0yZTOc/lNonKd7n2oNF7nUqex4nkC8Kud5WurfG1eac4bzWmzOqzm
B7niKF+ZlqqzMqzEUI32pLGuxJ6jlS8c+ESRXGggs3nLJ4EKPT0SJzucxkKR
77CbY3F5wM9OxKEmgxhLiKnYXT6OdNlAYKDNQMaC/JUBeBv9S6jyxkKeKbJX
2taXrtJrffODufnGlN9KM3N+aSkoznjp3nFlzs1PoWWzC2tOHoB5KcnfiuJL
WnrDo0558ckJPmMWLqX3m0hhLV7Ls1fS8ms1ueWDS3a+tuZu5dAXcreS/Btp
/pU4ecWjLrnpWyEcp24EuZci/IwF9TY8PwyMnsc3DHh895bfSh1pCYNNDtLj
h9rMcI+BTtiREbP5hRVf7jZ9hYZce4Ph6fLwjaH6LkKtneGutngWyKwAP0v5
Ailto0Ag0rJ4i2pgT48KQFjMhNRCKMAiPUmzPa6/s2Cl2i8BH5R6ILCJtKhc
GRFKQhxphK3E+NqEUJcUaRN8LXl34/EIHWxX5GPIgjxDHPqFxpf3uO8310UU
MDbSADLoy1tAZo2YQOw5fiL8B8h+v/KdB7/ynV/6ne/95p9+/F/3ZJ+rQiJj
XGqICxUhmtj7QhFkqv0yXVBrQtQOcrfjOlg2RGpmpGFHmu5ow2PAVSCAekyO
dn2pWSQ1iuZ7iWJnp3u5dgpkEPCDHAg1AVYQLmgldxAmdxy2dxAmenFqgqUW
ZG5NFi+SoHu5SzKzidduMuUzqrhKVdeF5qpen9Yqg1q5Xy6OCuVZobYs11cV
WIMVnr/EIfpKe/a48yYYavF8dbY1uw8vUKDOAPWjhrz+taG2kPY3yvJUVDxV
x3r8NCA6V7uL9EiLn13pw21+fCgJd/mxoRD8F6hr/sxVemtO36jIc2nuRlm8
VkJLLW6ltQt5fsFDG3tk97CyEQ7faKERxMdH1JpZupWCY6bW/NSKl1xwgL32
e0PpRpE+41deKUDliq8V1fea1KUQ1vm/BQA/73AvON3PvxWXvpDFt/TY+rjw
TlJ8L4Xj8GIf1vRLfuoln7hgpl8Jsq+F8RWz8cZOrTTxsRi60u5S5RkfClR8
yYXeEZ7QYnNuaMK11WnuDhdbGervY6WrcLSjL52Hs6c+cmRr3uDVi1hxE4Hs
B+Z7v3dUExFoIqLdBEX6kEwbkOiCUjOiAvO92/RiCddcjoxBj0sBP56PJgic
iCNMSZQljpzoEnxx4FAaooPzKkJcRWjHqsjNNeE6V8YWKLiBOiuhN6JQQGQQ
//RRnip4wrO8eMj+2z/8299+8K0HD373wW9899d/+89/6xHrU5VPbCE0dvLu
9GD4xBwXawMqc8TkwCwOwmAn1M6k2pfVBYoWZ0pP9hGk4beQ2mDFUVonimuM
6Pnyw0S+tztPAqVj1zuaJFgkGCU0BRisEserGFHDIRzuCmyHyoxJchChJmhp
mwTFA8/NrrH6bbZ5Xcwtk+kJWTktttfN2qRc6pUqgwp0kMI4W5kXq4sScGhC
nqb6anfqyEK8WH1NDN6H6reuUIsL/tt4ZStd6kItWmEtq12ondlH+IBDLaWl
K3Nqqc2v4ZdIGm8q1l+muxdhsq3y5tjUTLv7Ly9/7h38qz91Kyt9oUFPedhK
gMw44SEjsRKWb9Xgp8iAHmzux4cMasGHgAdr+pRPrQTgublTUbxLi3WP82th
8UKaWnML1+LhN5bWV3qw19oXmvn/5R/9L1futTw0O7Y0HiaumNHVXvKamXvD
j2+PYuuD8OqFrvoj/+zz0PJ5bHsYv6RF1/u++efBxTN0C15M9/UOAwM6/F5k
X6rISxG6ZcUvGL750+Qt29L6FIUKfKtDZ/L62xCwR0091MRXu8DBcAurUPMK
q2yjnVsyOXJB7wAtgjwGCV/mFYhdArGdA+ypPRyFkyl3MzQhnhWXurMaX8ng
r5gg7bvLBmdZb6DkgjCT5T3ieo9B9GRBED2GMsxRhTlSL1PopAkcx8og35U2
hCvO3V7WoiXWcMOBLsIzR/li8wuhaV9qZXznb3/vwa88+NU//PUHv/rgl7/9
a0+YL+QOhZfyhHPe3eVFTiY8GUvYYI/a3HGHm3C6CNtuHw6qs6Aa+NXwZSxo
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
      "], {{0, 160.}, {213., 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{213., 160.},
    PlotRange->{{0, 213.}, {0, 160.}}], "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.887136839626298*^9, 3.8871368476296673`*^9}, {
  3.887136970268157*^9, 3.887136971149555*^9}, {3.8871383148199472`*^9, 
  3.887138328166285*^9}, {3.887138571092292*^9, 3.887138602086134*^9}},
 CellLabel->
  "In[111]:=",ExpressionUUID->"3f273765-afbd-421e-9446-ee4b5e9baa6a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.373655`", ",", 
   RowBox[{"{", 
    RowBox[{
    "0.04336690530180931`", ",", "0.05216740071773529`", ",", 
     "0.05982652306556702`", ",", "0.19811230897903442`", ",", 
     "0.04387328401207924`", ",", "0.2798670828342438`", ",", 
     "0.0189937986433506`", ",", "0.20254771411418915`", ",", 
     "0.060964182019233704`", ",", "0.040280792862176895`"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8871368423322783`*^9, 3.887136848038941*^9}, {
   3.8871369715334663`*^9, 3.887137023891481*^9}, {3.8871371066301003`*^9, 
   3.887137108126923*^9}, 3.8871373347140923`*^9, 3.887138201766046*^9, {
   3.887138317045623*^9, 3.887138328853202*^9}, {3.887138588442734*^9, 
   3.8871386051225643`*^9}, 3.8871388872153187`*^9},
 CellLabel->
  "Out[111]=",ExpressionUUID->"72a625eb-66ac-4efb-81ae-eec2c9e6c38e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "alexNet", "]"}]], "Input",
 CellChangeTimes->{{3.887138624296175*^9, 3.887138629146055*^9}},
 CellLabel->"In[97]:=",ExpressionUUID->"c7a57467-cb6b-47c3-af62-bb185ccc531e"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    TagBox[GridBox[{
       {
        ItemBox[
         PaneBox[
          StyleBox["\<\" Net Information\"\>", "InformationTitleText",
           StripOnInput->False],
          FrameMargins->{{4, 0}, {-1, 1}}],
         BaseStyle->"InformationTitleBackground",
         StripOnInput->False]},
       {
        PaneBox[GridBox[{
           {
            
            DynamicModuleBox[{System`InformationDump`open$$ = {
             False, False, False, False, False, False, False, False}}, 
             StyleBox[GridBox[{
                {
                 TagBox[
                  TooltipBox[
                   StyleBox["\<\" Layers Count\"\>", "InformationRowLabel",
                    StripOnInput->False],
                   "\"LayersCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "LayersCount", "Tooltip"]& ], "27"},
                {
                 TagBox[
                  TooltipBox[
                   StyleBox["\<\" Arrays Count\"\>", "InformationRowLabel",
                    StripOnInput->False],
                   "\"ArraysCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "ArraysCount", "Tooltip"]& ], "36"},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Shared Arrays Count\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"SharedArraysCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "SharedArraysCount", "Tooltip"]& ], "0"},
                {
                 TagBox[
                  TooltipBox[
                   StyleBox["\<\" Input Port Names\"\>", "InformationRowLabel",
                    StripOnInput->False],
                   "\"InputPortNames\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "InputPortNames", "Tooltip"]& ], 
                 RowBox[{"{", "\<\"Input\"\>", "}"}]},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Output Port Names\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"OutputPortNames\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "OutputPortNames", "Tooltip"]& ], 
                 RowBox[{"{", "\<\"Output\"\>", "}"}]},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Arrays Total Element Count\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"ArraysTotalElementCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "ArraysTotalElementCount", "Tooltip"]& ], 
                 "59738820"},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Arrays Total Size\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"ArraysTotalSize\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "ArraysTotalSize", "Tooltip"]& ], 
                 
                 TemplateBox[{
                  "238.95528`", "\"MB\"", "megabytes", "\"Megabytes\""},
                  "Quantity"]}
               },
               AutoDelete->False,
               GridBoxAlignment->{"Columns" -> {Right, Left}},
               GridBoxDividers->None,
               GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}], "DialogStyle",
              StripOnInput->False],
             DynamicModuleValues:>{}]}
          },
          DefaultBaseStyle->"Column",
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[3.6]}, 
              Offset[0.2]}}],
         FrameMargins->6]}
      },
      DefaultBaseStyle->"Column",
      FrameStyle->Directive[
        GrayLevel[0.8], 
        Thickness[Tiny]],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "LayersCount" -> 27, "ArraysCount" -> 36, "SharedArraysCount" -> 0, 
    "InputPortNames" -> {"Input"}, "OutputPortNames" -> {"Output"}, 
    "ArraysTotalElementCount" -> 59738820, "ArraysTotalSize" -> 
    Quantity[238.95528, "Megabytes"], "ObjectType" -> "NetInformation"|>, 
   True]]], "Output",
 CellChangeTimes->{3.887138630145837*^9},
 CellLabel->"Out[97]=",ExpressionUUID->"778b9153-8c0e-47d9-a10f-10aff27b99b3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["mini AlexNet", "Section",
 CellChangeTimes->{{3.8871386471314783`*^9, 
  3.88713865055509*^9}},ExpressionUUID->"060b31db-e878-4348-ac0b-\
e477490d418e"],

Cell["\<\
scale number of conv kernels by 5 and linear layer outputs also by 5\
\>", "Text",
 CellChangeTimes->{{3.887138941022726*^9, 
  3.887138984259704*^9}},ExpressionUUID->"260b9f62-64ec-424c-a8fc-\
8c2de4f24e5b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"imageEncoder", " ", "=", " ", 
  RowBox[{"NetEncoder", "[", 
   RowBox[{"{", 
    RowBox[{"\"\<Image\>\"", ",", 
     RowBox[{"{", 
      RowBox[{"120", ",", "120"}], "}"}], ",", 
     RowBox[{"ColorSpace", "->", "\"\<RGB\>\""}]}], "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.887139124642695*^9, 3.887139154126398*^9}, {
  3.8871535384180603`*^9, 3.887153544318812*^9}},
 CellLabel->
  "In[186]:=",ExpressionUUID->"40deb83a-467a-4d5f-8766-e417c4409dce"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]120\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Image Size\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   PaneBox[
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"120", ",", "120"}], "}"}], Short[#, 3]& ], 
                    BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> False}, 
                    ContentPadding -> False, ImageSize -> {250}], Short], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Color Space\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"RGB\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Color Channels\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["3", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Interleaving\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Mean Image\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["None", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Variance Image\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["None", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Data Transposed\"", "\":\""}, "RowDefault"],
                   "SummaryItemAnnotation"], 
                 StyleBox["False", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Method\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Stretch\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Resampling\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Automatic\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Padding\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  
                  TemplateBox[<|"color" -> GrayLevel[0]|>, 
                   "GrayLevelColorSwatchTemplate"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Alignment\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["Center", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]120\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.88713912768997*^9, 3.887139154577039*^9}, 
   3.8871535457272453`*^9},
 CellLabel->
  "Out[186]=",ExpressionUUID->"e760d9db-b390-437f-ab74-4f81fc9f5a29"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"featureExtractorMini", " ", "=", " ", 
  RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"19", ",", "11", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "4"}]}], "]"}], ",", "Ramp", ",", 
     RowBox[{"PoolingLayer", "[", 
      RowBox[{"3", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}], ",", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"53", ",", "5", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "1"}], ",", 
       RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
     "Ramp", ",", 
     RowBox[{"PoolingLayer", "[", 
      RowBox[{"3", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}], ",", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"76", ",", "3", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "1"}], ",", 
       RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
     "Ramp", ",", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"76", ",", "3", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "1"}], ",", 
       RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
     "Ramp", ",", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"ConvolutionLayer", "[", 
      RowBox[{"53", ",", "3", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "1"}], ",", 
       RowBox[{"\"\<PaddingSize\>\"", "->", "\"\<Same\>\""}]}], "]"}], ",", 
     "Ramp", ",", 
     RowBox[{"BatchNormalizationLayer", "[", "]"}], ",", 
     RowBox[{"PoolingLayer", "[", 
      RowBox[{"3", ",", 
       RowBox[{"\"\<Stride\>\"", "->", "2"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"FlattenLayer", "[", "]"}]}], "\[IndentingNewLine]", "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8871368826798677`*^9, 3.887136981415431*^9}, {
  3.887137014150131*^9, 3.887137078460124*^9}, {3.8871371521946163`*^9, 
  3.8871372262479057`*^9}, {3.887137260395442*^9, 3.887137328947422*^9}, {
  3.887137368468528*^9, 3.887137400789307*^9}, {3.8871374372818823`*^9, 
  3.887137445327978*^9}, {3.887138148258389*^9, 3.887138182326105*^9}, {
  3.887138245158268*^9, 3.887138250906892*^9}, {3.887138505788669*^9, 
  3.88713851249041*^9}, {3.887138734179509*^9, 3.8871387758600817`*^9}},
 CellLabel->
  "In[122]:=",ExpressionUUID->"f9291ccf-fb1f-4db5-a284-15d83b8d8fa8"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"vector\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{19, NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`Private`RepeatedInteger[11], 
                    NeuralNetworks`RealT]], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{19}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 19, "KernelSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[11], "Stride" -> 
                    NeuralNetworks`Private`RepeatedInteger[4], "PaddingSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[0], "Dilation" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], 
                    "ChannelGroups" -> 1, "Dimensionality" -> 
                    NeuralNetworks`NaturalT, "Interleaving" -> False, 
                    "$InputChannels" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> NeuralNetworks`SizeT|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{19}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "3" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> NeuralNetworks`Private`RepeatedInteger[3],
                     "Stride" -> NeuralNetworks`Private`RepeatedInteger[2], 
                    "PaddingSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[0], "Function" -> 
                    Max, "Dimensionality" -> NeuralNetworks`NaturalT, 
                    "Interleaving" -> False, "$Channels" -> 
                    NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "$IgnorePadding" -> False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>|>, 
                    "4" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> NeuralNetworks`SizeT, 
                    "$SpatialDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "5" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{53, NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`Private`RepeatedInteger[5], 
                    NeuralNetworks`RealT]], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{53}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 53, "KernelSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[5], "Stride" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], "PaddingSize" -> 
                    "Same", "Dilation" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], 
                    "ChannelGroups" -> 1, "Dimensionality" -> 
                    NeuralNetworks`NaturalT, "Interleaving" -> False, 
                    "$InputChannels" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> NeuralNetworks`SizeT|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{53}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "6" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{53}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "7" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> NeuralNetworks`Private`RepeatedInteger[3],
                     "Stride" -> NeuralNetworks`Private`RepeatedInteger[2], 
                    "PaddingSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[0], "Function" -> 
                    Max, "Dimensionality" -> NeuralNetworks`NaturalT, 
                    "Interleaving" -> False, "$Channels" -> 
                    NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "$IgnorePadding" -> False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>|>, 
                    "8" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> NeuralNetworks`SizeT, 
                    "$SpatialDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "9" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{76, NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`Private`RepeatedInteger[3], 
                    NeuralNetworks`RealT]], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{76}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 76, "KernelSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[3], "Stride" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], "PaddingSize" -> 
                    "Same", "Dilation" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], 
                    "ChannelGroups" -> 1, "Dimensionality" -> 
                    NeuralNetworks`NaturalT, "Interleaving" -> False, 
                    "$InputChannels" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> NeuralNetworks`SizeT|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{76}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "10" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{76}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "11" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> NeuralNetworks`SizeT, 
                    "$SpatialDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "12" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{76, NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`Private`RepeatedInteger[3], 
                    NeuralNetworks`RealT]], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{76}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 76, "KernelSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[3], "Stride" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], "PaddingSize" -> 
                    "Same", "Dilation" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], 
                    "ChannelGroups" -> 1, "Dimensionality" -> 
                    NeuralNetworks`NaturalT, "Interleaving" -> False, 
                    "$InputChannels" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> NeuralNetworks`SizeT|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{76}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "13" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{76}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "14" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> NeuralNetworks`SizeT, 
                    "$SpatialDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "15" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{53, NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`Private`RepeatedInteger[3], 
                    NeuralNetworks`RealT]], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{53}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 53, "KernelSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[3], "Stride" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], "PaddingSize" -> 
                    "Same", "Dilation" -> 
                    NeuralNetworks`Private`RepeatedInteger[1], 
                    "ChannelGroups" -> 1, "Dimensionality" -> 
                    NeuralNetworks`NaturalT, "Interleaving" -> False, 
                    "$InputChannels" -> NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$WeightsInputChannels" -> NeuralNetworks`SizeT|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[{53}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "16" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[{53}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "17" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|"Scaling" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingMean" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> NeuralNetworks`SizeT, 
                    "$SpatialDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>|>, 
                    "18" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> NeuralNetworks`Private`RepeatedInteger[3],
                     "Stride" -> NeuralNetworks`Private`RepeatedInteger[2], 
                    "PaddingSize" -> 
                    NeuralNetworks`Private`RepeatedInteger[0], "Function" -> 
                    Max, "Dimensionality" -> NeuralNetworks`NaturalT, 
                    "Interleaving" -> False, "$Channels" -> 
                    NeuralNetworks`SizeT, "$InputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$OutputSize" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    "$MXPoolingConvention" -> "valid", "$MXGlobalPool" -> 
                    False, "$IgnorePadding" -> False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`AtomT]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`RealT]]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>|>, 
                    "19" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{NeuralNetworks`SizeT}, 
                    NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]]|>, 
                    "Outputs" -> <|"Output" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[1, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 19\[Times]\[Ellipsis]\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 53\[Times]\[Ellipsis]\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 76\[Times]\[Ellipsis]\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 76\[Times]\[Ellipsis]\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"14\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "14"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"15\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 53\[Times]\[Ellipsis]\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "15"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"16\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "16"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"17\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["BatchNormalizationLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "17"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"18\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]rank\[VeryThinSpace]\[GreaterEqual]\
\[VeryThinSpace]1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "18"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"19\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"vector\"", Annotation[#, {"Nodes", "19"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"vector\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.8871387772248287`*^9, {3.8871391301063766`*^9, 3.88713915622064*^9}},
 CellLabel->
  "Out[122]=",ExpressionUUID->"95da6bf5-9a3c-4697-a539-91ec785c99c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"4096", "/", "5"}], " ", "//", "N"}]], "Input",
 CellChangeTimes->{{3.8871386954910707`*^9, 3.887138763942443*^9}, {
  3.887138800237218*^9, 3.887138802112768*^9}},
 CellLabel->
  "In[104]:=",ExpressionUUID->"d22b857e-809a-4fe7-b721-19909cd938ca"],

Cell[BoxData["819.2`"], "Output",
 CellChangeTimes->{{3.8871387199440193`*^9, 3.8871387643253403`*^9}, 
   3.887138802682049*^9},
 CellLabel->
  "Out[104]=",ExpressionUUID->"94d23a17-3d76-4bf3-9455-89a57700a287"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifierMini", " ", "=", " ", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"LinearLayer", "[", "819", "]"}], ",", "Ramp", ",", " ", 
     RowBox[{"DropoutLayer", "[", "0.5", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"LinearLayer", "[", "819", "]"}], ",", "Ramp", ",", " ", 
     RowBox[{"DropoutLayer", "[", "0.5", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"LinearLayer", "[", "10", "]"}], ",", 
     RowBox[{"SoftmaxLayer", "[", "]"}]}], "\[IndentingNewLine]", "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.887138273889043*^9, 3.88713830755556*^9}, {
  3.887138344432708*^9, 3.887138431482091*^9}, {3.887138796435679*^9, 
  3.887138811875059*^9}},
 CellLabel->
  "In[123]:=",ExpressionUUID->"b0ef9430-fb44-4ba9-8997-5d367b3f2b11"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"array\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                   "RowWithSeparators"], "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{819, NeuralNetworks`SizeT}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{819}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {819}, "$OutputSize" -> 819, 
                    "$InputSize" -> NeuralNetworks`SizeT, "$InputDimensions" -> 
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT]|>, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{819}, NeuralNetworks`RealT]|>|>, 
                    "2" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {819}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{819}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{819}, NeuralNetworks`RealT]|>|>, 
                    "3" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{819}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{819}, NeuralNetworks`RealT]|>|>, 
                    "4" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{819, 819}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{819}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {819}, "$OutputSize" -> 819, 
                    "$InputSize" -> 819, "$InputDimensions" -> {819}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{819}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{819}, NeuralNetworks`RealT]|>|>, 
                    "5" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {819}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{819}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{819}, NeuralNetworks`RealT]|>|>, 
                    "6" -> <|
                    "Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{819}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{819}, NeuralNetworks`RealT]|>|>, 
                    "7" -> <|
                    "Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> 
                    NeuralNetworks`TensorT[{10, 819}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 819, "$InputDimensions" -> {819}|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{819}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                    "8" -> <|
                    "Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "8", "Outputs", "Output"]}, 
                    "Inputs" -> <|"Input" -> NeuralNetworks`TensorT[
                    NeuralNetworks`ListT[
                    NeuralNetworks`NaturalT, NeuralNetworks`SizeT], 
                    NeuralNetworks`AtomT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"array\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 819\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 819\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 819\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 819\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 819\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 819\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.887138419551918*^9, 3.887138432016973*^9}, 
   3.887138541555071*^9, 3.8871388127210293`*^9, {3.8871391337043*^9, 
   3.8871391604455748`*^9}},
 CellLabel->
  "Out[123]=",ExpressionUUID->"a78d062e-1eff-496e-bfd3-6e341e094f38"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"alexNetMini", " ", "=", " ", 
  RowBox[{"NetInitialize", "@", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<featureExtractor\>\"", "->", "featureExtractorMini"}], 
       ",", 
       RowBox[{"\"\<classifier\>\"", "->", "classifierMini"}]}], "|>"}], ",", 
     
     RowBox[{"\"\<Input\>\"", "->", "imageEncoder"}], ",", 
     RowBox[{"\"\<Output\>\"", "->", 
      RowBox[{"NetDecoder", "[", 
       RowBox[{"{", 
        RowBox[{"\"\<Class\>\"", ",", "labels"}], "}"}], "]"}]}]}], 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.887138834543747*^9, 3.8871388505799217`*^9}, {
  3.8871392560477877`*^9, 3.887139273051014*^9}},
 CellLabel->
  "In[191]:=",ExpressionUUID->"d67bc430-be24-4894-83da-020dc95fa301"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "featureExtractor" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{19, 3, 11,
                     11}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{19}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 19, "KernelSize" -> {11, 11}, 
                    "Stride" -> {4, 4}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {120, 120}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 3|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{19, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {19, 28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{19, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{19, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 19, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {13, 13}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{19, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{19, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{19}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{19}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{19}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{19}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 19, 
                    "$SpatialDimensions" -> {13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{19, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{19, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{53, 19, 5,
                     5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{53}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 53, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 19, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}, "$WeightsInputChannels" -> 
                    19|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{19, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {53, 13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 53, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {6, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{53}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{53}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{53}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{53}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 53, 
                    "$SpatialDimensions" -> {6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{76, 53, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{76}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 76, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 53, "$InputSize" -> {6, 6}, 
                    "$OutputSize" -> {6, 6}, "$WeightsInputChannels" -> 53|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {76, 6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "11" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{76}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{76}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{76}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{76}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 76, 
                    "$SpatialDimensions" -> {6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "12" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{76, 76, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{76}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 76, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 76, "$InputSize" -> {6, 6}, 
                    "$OutputSize" -> {6, 6}, "$WeightsInputChannels" -> 76|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "13" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {76, 6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "14" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{76}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{76}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{76}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{76}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 76, 
                    "$SpatialDimensions" -> {6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "15" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{53, 76, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{53}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 53, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 76, "$InputSize" -> {6, 6}, 
                    "$OutputSize" -> {6, 6}, "$WeightsInputChannels" -> 76|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "16" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {53, 6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "17" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{53}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{53}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{53}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{53}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 53, 
                    "$SpatialDimensions" -> {6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "18" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 53, "$InputSize" -> {6, 6}, 
                    "$OutputSize" -> {2, 2}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 2, 2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "19" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 2, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{212}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{212}, NeuralNetworks`RealT]|>|>, 
                    "classifier" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{819, 
                    212}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{819}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {819}, "$OutputSize" -> 819, 
                    "$InputSize" -> 212, "$InputDimensions" -> {212}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{212}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {819}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{819, 
                    819}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{819}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {819}, "$OutputSize" -> 819, 
                    "$InputSize" -> 819, "$InputDimensions" -> {819}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {819}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 819}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 819, "$InputDimensions" -> {819}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "8", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{212}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "featureExtractor", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classifier", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "featureExtractor", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classifier", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 120, 120}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{120, 120}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, "MeanImage" -> None, 
                    "VarianceImage" -> None, "DataTransposed" -> False, 
                    "Method" -> "Stretch", "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "13.1.4"|>|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{"\"n01440764\"", "\"n02102040\"", 
                    Skeleton[7], "\"n03888257\""}, {
                    "n01440764", "n02102040", "n02979186", "n03000684", 
                    "n03028079", "n03394916", "n03417042", "n03425413", 
                    "n03445777", "n03888257"}], "InputDepth" -> 1, 
                    "Multilabel" -> False, "Dimensions" -> 10, "$Rank" -> 0, 
                    "$Version" -> "13.1.4"|>|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]120\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"featureExtractor\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "featureExtractor"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "19", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "featureExtractor"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 212\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "featureExtractor"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"classifier\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.887138846599174*^9, 3.887138856248637*^9}, 
   3.8871389008524446`*^9, {3.887139137576892*^9, 3.887139162028322*^9}, 
   3.887139273574938*^9, 3.887142549942873*^9, {3.887153640891446*^9, 
   3.887153669139073*^9}},
 CellLabel->
  "Out[191]=",ExpressionUUID->"61fe7672-2d9e-4539-a8e6-547d89469cc6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"alexNetMini", "[", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1:eJx0vIdXW1ma9uuyy6mcAZOTsoSyRAbbVT013T3TMx0qO2JMzjmDCbYxGSEB
QkhIiJxBKOdMdiZjV8d11/0z7nt0XIy/mvut9dRZW0cHIZd+PM/77r2PMI8K
vkk/eeLEiZJzcPgmueKr4uLkqm+vwoPv80uyMvLTUv8jvzQtI6049tEpODkM
/+3Af8h4aL1a/uLx8GatyFEqNBcOWouHzMUifb5QnSMzl4w5Kkds5SOOinF3
9YirUmIp7VflDxkqJuy1s+7HiysNyvUGzWqDerVO46rSrdQY1xoMq/UKe/Wc
qUzhqNW8eDaxUie2l/cZCwX6fJ4mq2Uh+cn0vaapu61LyZ2qtC5tZrsqrUXx
CI5Ce8HoRtXYRsXYapnYktulSGpdvNOtfsg3POrSP+zSJ/VYUnqdaQJHarvh
zjPVd8+0P3Qa7neq7kodOcNrBX229A5dUrc+pVed2jefMjJXoFyqc2u6d03y
v1nn/mVT/T9W3T/shr+tO3dcprc2zTu7es+u2rEt7prm9ywz+8bpfdPkoX5i
Vz2yvSh7Myd5Mz30ak60vsBzLLTa5p6b5puNs89VU01zsrqxwYpJyWN5f+VQ
d6mkq0TaUSp6XtBTk/6kNOn+/X8nswJIrCBWQgQ9hsZI4FBjuPTEOEZiIuNG
PPNmAuNGNJxkJDLZN9icL9lRv42m3qBjI/GgiEQG6zeRrK9iaDe4EQlRIGpC
LCgiPg5EiYsjxsbiYxKwMfG4aETEqERE3DgQNS6REhNLjI4ixHLIiVzSDTYu
gR4eG4FPZGLiaNhoOogYwyREM3AcejgzIoRGgiOWw8SwGcFMqj+d7E+LCGDS
QEFsRmgkOzyai4mJBMEgLIoTzGGGcFmoYAzXBLLoQSxqAB3vTwnzJ4eCgilh
oCBCsD824Oy1M59d+uzExROfXTl54sqJE5dOnPA6eTb40mW8/0VcAOgKMdiL
EtZjzu+3F/fZijo1mR2K1B5lxoAub9BQMGQsAvykpuJBXT48lFlLpbZSsbFY
YqyQW2qmXY0L608Va02K1frllccIfit1y46KJVuFwl4J+C1YK5fsNYq1Bt1+
98haHV9X0K3O7tHmti2lPB77sUz8x7rRH57O3mtTpnZqMkB8Y67YXTK+VTO+
WTm5USl3FfcZM3ma5F5DWr8lHSReyZWs5w9t5InWsvn2ZCAQ1GV88Hzh+35D
isie1WNKQfETqFIEs8mAn2Kx1qXuemeQfDBN/8Oy/C+z5u82/c+r1m2n8Y1V
jeK3bV3YMc7smqePrDOA3752DPDbU47uLA0DfptTfatzXfb5Futss2GmWTv5
ZGm0YVZaOz5YDfiNCKtkPeVSXpmsswzw49WkN5U8ePDgtySmP5EZyIgj06Kp
9Hg24Afg0RMSgD3WrUTmzRjWjUjmDRaKH/frSMAPH00EURLojC8jmV9G029G
UhOjQbTEOBA1IR7FjxQXR4iLx8UmAHvYqDhCZAKIFBkPiohNAPxIMdHEOC4x
nk1IYGLjaYAfLoEB+IVFUjFRNHwUHfDDcxkYFhXwC2N58ItkhXEYIRw6cIVi
htIFgsExh+hDFMLja4LZtGAWKZiOC6JiQKFUbEhEeBApJBAf5B3icyXoyuXg
K9fCvK6EeV0KvXwN5+1LDfalhftQMT5U3HUa1o9BHN54LN+sH1qpBnfqWErn
LWcKtfkSQ/GAMhfUp8wBifSFw7YK0JCpfMhUJTFWyi21sytP5lcbpm2VM4Dc
So1q/fGcpXRcUzBhKJ61Vsw5qmbtVdPO2um1pgFTacdSdvtiRqciq20htWnq
fv34T2CDXaqMPlOeyFYktBX1WwvB/cSOIpE1V+IoAPWbs/vMGWJnnny9aGyr
dGgtHzTozupzpPVYkgG8dt3tds2d9sWferUpcGWPMa3HnN5nzRrQZwoX08aW
ipWKx25N51uj5L15+q+WxX9a1Ch+4H7v7Nodp/bAqdm1L+1b5g9scz875gG/
Pc0o6FAzAQS+nhlaHetxz3Ta5lqtsy26qeblkQawvpmhmklJ7YS4bnSgdqS3
Wi6okndXDbYUd1dnNBbfR/HD0/1pMUQKl0yNZVJj2QAeLTGBcTOB/eUNzlfx
nFvR7Fsczk0O+xaL/RsO7SaDFEclxkaQ4xnUG2zGrSggkHYDPDCGDtzeiIef
BVETEsjx8aSERHwcYn2YyFg8N5YQGQfskaOAPSAQMUlSfCQhjoWNRdgDYePB
A6mh3AhQuAdCXCQDFMIgh7OpOC4LG8UGYaLZwBguLjoskgkoBjAofjQSWCL4
W3gUCxfLhfPHCuUi4MFTgUzkNcNY5FA6MYRGCKXiQyIwQcTQAHwwHIHDIHJo
KBUTQscG08JCWVhsdEQIhxLMjoCfDWLBgLa43zG30zr5omnYVQ3ZOmQuHbaU
y60VQ7oiibYQjlJT6ZijGjJ01FktNVfIzHWDumqpqXbK/WTG3TRqLp8wly2u
1i26a8cMRUPKbJk6d8xUPAYoWsvHbVV8RR5fXdSnK+3Tl3Qr89oW0nmq3AFL
yaCtbMhZLl+tHt2oka1ViV1l/bZ8vimbp00VGDJ6jZl8fTrfkDpgyx7ZKJ5+
UyVyZQsdmXxzSpf+frfhAc+Y1KkD8/xRaEgXmTL7LZkCc0afPVvsLpLai4a0
+ZPKErW6fkXfvW0eem+b+btt8V8O3T9cEL72/VXz/orhcM3wfkV34FIeOJZ+
diuObLMH5ql9/fiBbvxIO7m7PPJqWuIe63HNdNvnO6xzHdrJ5iVZ46ykbnao
YXa4aUJcPzbweKy/drS3Tt5TLXpe0lmTUV+cdO/B74kMPyzVlxKJI7AJETEM
SiybdSseMhTw4/7mBvc3CZFfxXJuRaH4Mb9kAX4Qu+R4GimOTklggvVB/tJv
ggciP+LRDfqNRFpiIiUhgXLjJjEhEcUPx4kBAhH2ohPJ0ZC/CKiUxGh8LBMT
Q/WwR0OsLyYiJBL53MM8BOKjIIJZGA4tnEsH6wO6EKKiEKMDwRioAPB8qUQQ
cAg0ogSCsDEcABW9BtiDZzGRDHhZMFIgMDSCGEzBBpMQAkPI2FAKJpyOxzIJ
YUxCCBMXwiaEccmhXDBMRhCTDscQNnNi68nwSp3EUSV1VI+66sZdj8cctWPW
asVG8+xKI9R4o/aacWcdaNRRO2Kvm1xtGbE3jzqap1efA4Gjlpoxa+Wsu3bK
WiHXF4jVOYi0eSJtHsS33F4JoI46n85stM5uto06m0SmSomtemytYdhVK3NW
SV0VQODIerVspQLw4xkye4wZPEN6l+5Rh+YhiGdIFTtzwP2kK/kSV06/JY2n
S+IbkmHQa0rpUt+DKnHAmAXQdmgedRvB/XIGzXkSTd64okiprAP83lmlR/ap
vzsW/uFQ/8Ol/+u65WDVfLBqPFo3An77zuV9++IH19KeaRLwOzJNHRond9Vj
rxelL6ZF61N9K3MC50K3bb5bN9mqGH46L22clz1dGmmZFDeOixrHBhrG+hpk
vBphc2lbVUZd8YO7939HoPuGU3xIHAyOiaFE0wA/5pcf8eP826/w4zBusum3
2LSbLEhewA8MEAo/cD/GrRjGrbhf8EtAPZCSGB9x8wbpRgI+Ng4TFf0pfuB+
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
9l3HzNuOXnNNn6mm31Ddqy/tVRfyFTnd8xndMyl9S1ki6Hk1BSJVXu9iduds
GgDWNZ3eNZYqmMwemMkfmMvrm80RzOX0L+YNKAsFS3m8xay22dSWuUc8VbbI
XCI0F/fosnqNmX22DAhcviEV2APTE5qz+01ZQkOmQJPaq82QWAtGXWVyR4nY
lDegz+Qpk3iaJIElTbSaJ39bMX3YuHTYot3rmDBWzmvq9Lq2DYd0b3X+cE11
sKKF5AUBfj9vmuEh0vY6F/acszv2qX3HzLZ17LVOuqUa3FgeXFeIoOlwz/VD
7Oom+KjvgWCg8uC3ONw+PfR8dKBpqO9xX09lS3NeZXlSVs73v/1jnE/Y5evY
a1hWGOBHiCGFRxFxMVTSDTaIciMSCETxY92KZX8JzUicBzAI2WhAjhLPIcex
SbFgg1zUBuEp9Fk4g8CTwIEYJSKDSA9+0UjHERuLY7PxHA4xmotMOwNgcayP
+MXTkUEMHfwQH8uEVybGsPHQq7JpkInABkog4BfApPkzKYjFkcN9SWHXiaE+
hBBvfLAXLgh0FRNwJdz/WPDwGjYQCPQhE70pJARCAuG6R754vJ/n6E/CB1KI
wTSk4whioaIGM+nBNJo/mQxXeuNw0PaOrzfKHTVQiQ2ZykcdtaAxZ133Qmav
Or97KWv6xbNuda7qvWB2p126Ud+lLeIby4SmcqjrBKo8yFz+fHr39EPRUuaQ
KndYWwQaUhWKFYVDymKZunRYWTKiLhvTVoxqyofVxVI1XFAi05UOG8v71QW9
yjyhrkhoLOrTF/RC22IpAtIE+kcdy/fB8ZrnfgRng2wdtOXJXcVDtnyRKbdf
nwUaMOZIzPlSe4HcnT/kyhlwZg2s5gxuFgy9LBnZqhxfrZkw1czrGgz6zjWb
ZHd16f2m8WgdmW8B9wPr+3nT9H5dd7SiPMbv0D2zYxtH8QP21pYGQO7FAUhe
/aTgGD8kfOWdUP6BZmWtY6Ing73Vgu7y5ubs8vJ7qZl/+uo/Y64Ef3Et9FII
NTCEEQr4gfthY8iEBAa0A+RELhD4MVW/jON8FY/6Gyo0cwE/YgwTNUBP+Ye4
JQw8+LHgRaClBbpApFiEN1JUFAjDZELth04jI6UduF8skr+EGyykC45l4mIY
8LKkaCb0AjgOncCmwxHnWXQLZSPLZ4EMGrS3kLa/wg8lEIHNQ+DlMD8QDFD8
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
/d6qYCoxKIIAgkEgBe9HxiKb5yPwaGNy3DijDQsM0CBGbRYGgB82OuJT4WKo
KIpgiZgo5Ds6kC914UagE9feZMwVYig6keLHJobEMMLj2WFxLBiExXLC47iY
+EgYhESzQKExXGwcMjtNiEa21uCj6CCZJl+qzoPwlSgLBpXFYmWZRFMl1tZO
uVoHVBW8hXyxoWLYWiPSI1vrZcai4cXcXmmSYCQJiJ20V/OXMxombj+evtOk
SC6b+K5g+E/Z4v/MGPhd6ei39QsPgEwIUKE1Y/xFRY8+pd+S2bZ8r0vzsH7y
Lx3L96X2vPnXtYAfxC7kb78yBbqPbm0ypC3yDRu6pF5blmStQLxe0O/K7lvJ
6V/N5bsz2y3JLcYHoKfanxoU38NlgB8k74Azq0uV1KfJWFxvMr7oWX0tf7ur
ODqyfvjgfv/z+tHfNnb/tvbmyAljBMg91/47694r096Wbm9TfbChRLSpAEEW
v11ZeOWc3bLNbFgmVk3DTt2gSdmrmufNTbYOS+p53SVPn+fW1GcmZfz5z7d/
G/MbztXgy59dOfn5tXMnziLfJ/b51c8hhc94nTvr88XFgCtXwq774AOvExD3
86NiUTtC8YPW4+Py2S9gIHT90lwcOxv6tRjoKjDGMzeCtDAcGlwMV6JBDBfD
yY+OF4FHdrmTCb7IDZIEz9RfxPHeA3S2GQYocuhNl+i8DVhceCQljEsK5XwU
PESzGNhDB4AiABnGJUN150UKvUwIAV0lhfjScSGREegNJsj2g1jk9jrk3nbE
/RBhYiKxqM/HIRsakfIyij6wnNO7kNG7mDmkKxqzVsutVVJjpcRYAZpafbL0
smXEVi1Q5Ij1RXJrhWgpc3g+Y2jy4dhitnwpp286Vaoukhkqno0lt8xmZHf/
Z83Ywwz+H1K7f/+g4+vcwW+al9OeLv7Qovi2S3uXp7/fNP+XsuGvayb+q11z
r0OFiKdJ6tOlDhoyBrVp/YqHXQu3mxU/dhjvd9sfddmSeI6UvvWM3o3MrpWU
FseD5/b7bSuPujbSW1cfNVhu15t/emq7125J6rE9ErqyJK5caF4mbOVL7ibj
etfW9ujb/bnd95qDv1n2/m7d/bv93T/se/9w7B+Z9vd0e9tq0NG29v2O7gMc
3yAt8OEr5dFr1f5L5butpdfr8y9W57dW5uz6EbNaqlWIFPP86akOiayps6f8
SWtead2j7x/9/uZ/RdESiN7YK595nTiBfpGd14mT1z877X/6TMCZM/7nzgdd
uBzu5U3w88L7+9MwyHooHZngRcs/ZHWMDaU48sU7GDRVI5kkLnI7BoHNBH1c
6ooEG+Qga1txkXBlaBQVCir4rNH+EaINn8BFbhUHw4lhB3PpvnTSVRLmMh5z
GRfqQyIAgQG0CKjZoHWFNhbk+VYrJjo9iOTyL19+BUd4e0FMYiiHghodEBjE
xMM7h77Vjwp/PmHQvQYykU7WmxxwGet7ITzgbLDf+VC/q8RAn4gQ74hAX3pQ
MDfMjxHozwwJ4mBDuETP92vR0O+E8XyxledvwVMBTjpqoIoDumTmslF7FTAG
FR2kqsxaDr3t4otnEkNxy8QD3kK6zFAiUeZMa3PHFtKm1XnzhrIJbcmoprxj
OOVhZeKPJbH/ncsq7P3hUevv7zd//dOTm5l9f25aSGmY+nPj1B+eLfy5dfm7
xrk/V47/vmH+z92mZIEltdeaBp3CgClNqE0Vqh4Jl5N7VUmtyz+06n/oMN5t
M91uN9/rsN1rsdx7avqx2XavyfrTM/v91rWHgF+T826T8z4MgEy+K2XAnSld
yZdZCkf0RYvWBst698vd0XcHs3s/qw7/od/7p3nnX+btf1l3/mnd+6A/OFDv
7i7v7ywf7ane72oOt5H5Z2QCEPRqee+l4u3m4sv1uc2V6Q3XjMsyZdWN6xRS
xVz/5GT3gKSxpau05mlWTuW9P93/t/j/4JDj8dewV075nPzM+xSwd+LaiRPe
J074fvaZ38nPfE+d8j99NvjChfBrV3B+vhGhgQwC0hLSiGgUwgdxjF846ntc
BrBHZNOJLCYiDoIf4SN+UYAfUk0lsMLjmaGx9OBoRBB22ESuJ93YcAzg0Hzo
lGsRxCtk/DUS3odMhP7Un0qBRhU88Fgoe+iEIfxRAG+gEDb54xl0iyCTCG84
gI4F/K4RAuCfcBnnA7qC976IuXou5OLn/hfPB/ueCbh+NtDnYvh1eOoS9soV
wlWfCG/QdaqvHy0ogBEGAKPlIlIxIt8YQ0DXo0GKV8+hhwX2ALwxV82osxrA
GzJDk1s5tVY/u9k0oCt4Nnq3ay4VLpiwVcgVmdK55JHFjHFVwaSudNJUI5zP
K+f9pU50r0L4E19d9ng8tUx6L1f4TcXI/frppB5dWpcaAvc+T5cEpgfm1qq5
K7Cm882AXzrg129IEaiT+pYfiLUpMij2jA+7DHe79Pd55gc9FuRrJJ9rfnqq
+R5crtl055nxbovtfrvzUZvrYbsrpXM1pdud0mlPEjhSwf0kxjzxcvassda+
xX+9P75zNH/4V837fxoO/mnZ/5cF8Nv9l23vZ9P+e/3+gfbgQHu0rz3c0e6/
Ue2+Wj54rUT0CnG/7ReKNxsLL1dnt9yzG9Z5l35SD/jNCCfGuvuE9U9bikpr
U5Pzv/vd94lRX9OJsdhr2Kunrp8GIQRe+T/w8+xtO3s68MLFcB8vYqBvBAaE
Zh8yOcylBbCInpsyEENA8pRNQ25DY9FIHAbJ44GoAaLuh4vlekp65CsLwmOg
mEc2O+HiOYTESNLNaBAhMRoMMJBF94kgAXtXiTjfCLKfRwAh2CD0qugXF3xc
8PW8HygJkBvQaDi0NkDP+5DDvEmhHgX7kEOu4v0vYa7D39H50Cugs8GXPg84
d9L3izMB3qd8vU75Xj0TeOVs0JUzQV+cDT7/RfiFy3iEQy+Srw85+Dol9DpS
heJ9SMi9IT4U7PUIGGBBE65a8Lre5ex+TR74HrpbAAQn4eGwrUKozW+bSRYo
s+HKmZXaSVPRnKV03lIxYSgZWoaPO79/Mb9zMpM3n/dkNLVjsaAegngxt11V
OGCv6dbmd6lT25butizdafPMHj9bvP106Tayc095p1V1t1N5j6e6z1c96Nck
DxnShy2ZUltWv+Fhr+6h0JIismXwjUkdqrutqp+gs+g0Ie1Gq/Fehzm50wZK
abcnd68kd9geQP4OufOGLAVQxyrsTS/2pe8OJ/c+LL7/u+7nfxrf/8sKBIL1
7f/Ltvs3y/5fLQfvzYdHpoN9w/62du+teveV8sM73fu3WtDRG83ha/XOy+Xt
jcU3qwublnmXdlI/P7Q42Ts+3NkreFzflFdQ8fB22n9/+adY5ldUfAzuGs77
c99zoJM+ZxADvH7ipP+pUwHIpkpg75T/+ZN+586HXIOP7xoBPsowXwou0DMD
g6xKgMMwiajbQO+AfOEtA5GHPTrgh0UW/ZG5X883SrGBVdQwQZC/QCAUV0Ag
8UYU+VYM5ct40s1YbGxUMIfpz6D60igQu2B9wB6ksDcR61E4CP0SAy9iCAAG
bwmFDR6i32wA7/MKLvASxt8jXxDkLPwFfRHqdS7kMrB3JugiosDLgN9pf5/P
/a6dDrh8OuDS6cDzZ4LOnQs9fwFz8aJnkRe49SIGeb4YIRy5FY6C3O0L8qUi
A+gdWmeTnk/ea599CGPk1l19vsRU1KvK6lGkC7W58BDGImPBqLNSbi0bUmdN
WUrmHFVT1opRc7lUWzKgLOxXFrVPZzXKkp6OpdQNP+hcyu/RFE1sNossla0L
yc2z95vn73UoH/EMmaAuQ5png9aD54q7rYs/dSzf7dUlDxhShbrkPuV9IBAG
kMIDhpQha9agJV2gfdihvNNrSAH/7FTf79De7zYkA43InLMlqXczHQjsd2fI
VgtGnKWTlnLjZsfuX6d2D2YOPyz/9e/6v/7L9OGf1iMwwH+Y9/6JFIG7f3ce
/M2+996yv2/a3dHvvdHuvdb8dcf04Z3h/WudRxqwwd2NpbcrS5v6WadiXDs5
OC/vGZV08Hvqautzs4vvf/Pg9/H/EUm7EYGPwXvhfU/5XQArOOFz7sT1/4+v
94xqK83WdXEkmCiQhIQEImdjnLPLLrucczaYnIMBk2yyyUHkJILICBRRQEhC
SCCRM8ZEAzblquru3b336b3HueOO+/POpeVy9/lzxnjHGstCyK7i4Z1zft/8
5tqvhd2LNvSCPyAWgdfZg9MGZ9AQaI4SCD6D1p5EDyfQ910zdyerw87W7s6A
H3oa19ZD0+T550IN1CnAHsHTDhUQSDrmjAryQEgCwf2AQKdLZ+DG9iyS6kOc
Jbg5oWt0iPk4fu9vAa8Di8M6U0A4FysQWBxCIDpGw4EM/05jOwtDGwJE1UNW
ZjokE8TciIYQcOE/dj9BD/DTIRnrkfGHLIlw1SUjcB6iGAF1oEMUAxQ/iNrw
af+OH5gesIeG4HJBMJUXUNoXWClC2APemuSx7aqkFmV8rTiicTCmQ53cMpLQ
qkpsH01uksc0S6Pp0sgqXmAlN0DTxpxMlyNdzfUDyOAguiKlQZYEKuKEdU5k
Nw2/r5fHayYYRNcrYhvUCY2jCbTR+DpVTL0qulIeDHVuldS/XhFCGwqqFHkX
sR5D/G2WBTcMBDVJg9pVbxgTcS0jURCdy4U+yGwraSC8v1YR2qAKb1BFAoQ1
U0EVkwE1o8HwSstwLEuVqpgtW1jvWP/M3t4R7e4O/vqb8su34a1fFZu/Dq3t
KtZ+G1/7bXJtd3xlR72yplxZGdz4pPi8MrSzPATgbc6Lt+cHdhYkW/OitSne
soo7K2apWB2i9npmU1lbfWE5NfVdalhw1Kvbz38+cdXT+byzzSkH+D8MoWe/
ucEerO4e3AHADwQ3YH0/8EOMgmikZ4nV7EaRgUAIcz92/C00S3ZkN0cgEPAD
AXvWR1yBRvKf6Rn5KHJ4nHLShXzCiXTc0eKYA+qBEL7xh+3+rEFOOFw4BYIb
G6Q1+hiUGyQPVyAQIi8IbTFFPxBN7UBIbqapLwBCBEjgUxOU4R7t3DOyNdcl
Y/QsTQEw+CUC6uAKZgivA1eANBgmsApGB/WImbM5xhGSQBPE+uxxpo4WiLsi
c4rgbTYYR4qpE7ItguJXJgqpHEDMjT4M8LwF3tqUCb0TaSBkuvhwQvd4CjJU
XBFHVyfSh9/2TqUxJt9VCoILerwq+MGl3KCCHp8KQQSVG1LKC6/tj4WSuUXx
vogVzJzJY0xmNyrf1ckTKyEK90eWDkSUS6MqZJHl0vDGsbd1I1EAUp0yBGEJ
4qzMr0z4qkke1qKMbJSFQz3SoYrrW4S/Lqla7F8m8K2TBTeORDeOIDM3kONv
qjeQQ5ap/crG/SD4Vg0GNctj+iayRxaqp5foG5vcL9vib1+Hfv11+Ouucuur
cuPL4OpXxfrvU6u/Ta/8Orm8Pbq8Nry8MrSxpvqyof7yaXhrUfZ5dmB7VvJl
XrY9J16f5C8P82aFbFVvp4Be11tf2lyVX1L4Pj4p2Cf0yc8PLrpfdHM47WRz
ygnSGx1LjDbJdD/RENK8vfiDwB5Qh1oE6hgon9oWGPATMBYQkGCp2Z5Ad8c0
hxwdNQaIHK+wPuKMnFV0t0dOdrvZEg/bIgQec7Q64QxXC09kA8vyuBMIOcl4
2B6dXmV/Fqrjo1Ch2J894XThtOtP5yBjpBzzQGbXuzoipocuPKJHID0cUPBI
R+xR/CBJQzNAlD00KKMOCQEU7BHeAFckmDpYwD3elaLpJ3QDnjXpIhmpjt3I
pk54IzsssAfpLrwNgRnpKoS0E1kqRHM/FL8Cjm+pMBjwA9LA92gDUUAdYyyF
oX7XIIluksUAkxB8K4Qhmn23+A+MF7WDEXXy6CpJeO1gdDHHL7vrRVV/RJMi
vpQXWsDwqxFFtyiSi5mBPRPZLcMpTcoUmuJdleRtmSi6bCCmVpHQPP6+ZfJ9
5SDSzVIjD0PxaxqNaBoLa1KHV4n9G+URdZKQcr4v3LAX0jonEkp43uXiAGTS
i2b7uHk0FgT0VgwFlgy/rhz3r1aHVMuDO4cThz5WLGy2L652b2wKvmxJv31V
/rar+vpl+PMXxca2fOXLEILfH7MrmjXApVXl8opyc129uzmxu6r6uqTYmRv8
Oi/7dVG+uzC4PYmMwFoQcdSMTmFTLaO2tLEivzAv6c1b/xeBjy7cPut0DmHP
+pSLmYvlIQr+EIWgQzYDWwDkIN8D9iBH0rMyRh0D8NuHBwiR+AtGAR4IJgPs
/ThDAeD9wA85nHvEiXwYGThAcKFoNu6tgRCypwPe3RrnRgERPGyBPTBDzU6W
Mwhd34AY7XDupMfVS2fv37ry/JHj2ZNQtlh6uoPpfe/r02zFIg9EQMoNaxBa
2wInABW8/me7MvI7AjdYzWQMIA3ephmQi9xr2LOBN2u6vDwhi0ALFvgcIBDj
CP+NkGYQoGyBb/9zLBtivxB2f0ReULU0AtQgf9OhTmJOpfWOvafL3kBsbZVp
4qzsTavybetwfONQTO1gFIgqCirtDy4fCAUV9vkBjaB8tk+tJLKEG1jTH9kk
fwt1ChQsEJTLuKEV4re57DAoRrJZQWntXi1jqbKvNYy5zEbV247ppKbxuHp1
eMd8QtdiYtMEMjy8aTS6cya5bTKBNhwFbxB9LuB8yqpWhNPUb+Bao4xoGI1p
GI+tVUXVj75pnnlbPx3ROBfZPBXTMhbHHE2Tz1cubHRtbgu+bsu+fh7a2ZBv
rQ9+3pRDrbH1ZXjz2+in3QnAb/232eXtsY+ryvU11dfPE79tTW0vKnc/Kn//
OPKXjyPf5oe2Jwc21cK1YcGcgDXa09XXWNteUVhbmp2fmxwS/frms6vHrx1z
vuhKOQVB0B7rTtG3BfZw2iQkTTpkZfpDmlAFWRNEKwxcdUjwIg5N6SEEW7g5
QHZnc9gNoi3F7bsBguOBgDr4KWtk9e/Culri3KzMD1sTj9iCB4KIR+xABM0w
AaSK8XSyOu4ORQrazI/uGqP7KRDl0UIDfA9N9oA3YzuCxqPIBHdrpDcAWWmx
++GBKGMgdBlQsxLojC4foS36kFWCr34fCajhWUPpv8BGPu37xDZ7zR6xE3oI
BQgEDmmKmJoB5JRHjSgUeOsYetspj2uTvmkUhtH4ITRhGLzYKIuuEoZQef5F
PL9crk822/sDyyuH8xpuspmv8rk+ZaLg+qE39bKoZmUcuGW1KKyCH1rFD4OI
3DSSThXFgoqFUbnMwJrBuJ757K6Z9IaROPCxupGICnkAbTS8fiy8TO5TLHvd
/TGl+2MafTqBNhbTuZjC+5wHV6osCClY5CGVirAaVRSoajgCVDsa2b3yjvHp
HWPhHWMihT+RN7JIW1jrWV3n73yWI+ytKjZXIbwq1j8rNnaG176OgPtt/nV+
44/ZT1tI8EWt74/PUzvzit3F4d8Xlb/DzbRsa6x/QylYk/Pn+JyRnk4urZpe
UVBFzcrKTvCPePnzo0vuVzzszzuRT9gTj9oBfob2FnpW5iDADJD7cUXZA0Hi
BPeQn+tT8MAeXMEDzZ2tKW4uNm6utppqF2wQ3A8cT1MXQDkAzgPxDhJFkpkz
EetiAQL28O4UwI/gYQMGCDI/jAyvQOeooBCSPF00iSKyrY/u3KG7eFbHXFCo
UPw0mR4STDVrI2T46wBvDTYIe6jQVWhwS02KiNz8OLCJnloC9iCxREsnFFTN
2+xR/ND1nH/HD11ygRAMgjwQ2KvqD60WhjSIIzoGY7sG49r6o5r6QuHaKops
l7zpGnrbMhgDcJb2BRT3+edwfNJ6XrzrfJzW8/wD51WBwLdMGlKvjK4dimwd
SwAhp9ikkWX8ICrHH4Jy90xegzqjYSSdPp7ZrEqth+A7ktQ9k948mkAfiyuX
BeYJXpRIX1PlvnmSFwVSb/bmh/aF9/VjMSC46V5Op43H5vb7IAQqwwA5uJYq
QitGIqpHowG/5uk3yIKzOrZblSyaLJxcaV3Z5G9sDGytDyHsrYysr45sbIxs
bqu2vo59/m1i6y9T23+d3vw2+Wlz+OMn+eaK8uu6+tuqGtj7tjjyx8LIH7PK
b1PyndGBjSHBiow/1cca7G5j0ioayvNKSzKSM6KeBd4/c+e0809ulPPICWvC
cXu8h42Jk6WhLcnIhgT+BpjBVUMdOB4GAi4Iig5NbYhFrQ/1QKyDpYW9naUj
MmvF2v17FIaYq7EXCLJW6D4Cxplg6mKOdSGAkMY5d0twKhC6E4GC9OPHjeyq
aFBBO/2+H9LUDJa0P3MEvAvN9zS+ZPPjQxDInYlQJoDfoh8I+oEf2dMJTRrR
1WPgTeN4zpqy+v84yY4iCn8L+i+Br6JCCUQg1ARfdO1Fs/ASglgfP7heEEoX
RTTzw2jMgOpOb8ZATGd/dKckBoBskb6pE4ZW8IPK+0OK+oMzWF4p3U8zmC/z
Bb4lkoBKeWjtcHiZOABwgvQMMsMWVZzmOFtYi/pdx0xO+0xu6+SHztlc9sfC
9sk0ZPyUKr5RFQvxtETsm817WjDwCsDLk74sUfq3LCZVj0VSh0Iq1eEN0/G0
6dhKZXiB1Ld8KBRer1VHlyuCSweDq1XhgGXD+JtKmX+NJLBOHN4mSxyYgpq3
9/O2ZBvxveHPn0Y2V1Sba6ObW+Pbu9O7f5nb/Y+57T8mPv+uXttSLHzsX1oU
rX+UfVkegqzv65x8d2YIwNudkO2oEPaWB9jzQuZEH3Ogs7mzrrS2/ENeYXL0
++Dbr697XPdwuupufdGJdMbe4jQyZcLMzQpdXtBF0j8zDX6Yfxf6yg/3+46f
HZlgY0WysSHZ25EdNc/F0NQFmpAKtmaNcyebuSLswRXnSsS7WeBcSZDbo4H4
eyenG5pxUTTkfA+X8CFozP1+TOmsJzpaEG6sT7hYHXNCyw3iYYRADcOW3931
X5ZI1qzJ/Im0plPiR7cVyh46zgjt4UE3jr/38xxz+cHkjy+hDokuNKHxF9Qo
i6wSBJYwXha2PSlpe1rd7dXY40tnBXQi27vBTdzABl5gDcevjOldxvVFjmEq
YorEIXl8v2JxcPlgWMVQaMVgEATQItFrgLBSFlgpDe6YTG6feNc0Et89nUkf
T2uZyoCKo0IW3axObhlLrpFFlgoDkGPp8lDqgF+R5DVV4Z8v804TPsoUPy9V
ot2kvhXKIDC3GnVYzUh47Wh4pSKkYTK6dTaBPh3bOBHTOBENV2Tw+GAITRLa
JInuGUodmq5ZXudtfQbfG95ZG9tZm9handxcn9rYmvr8dXbrj/kvf53b+X30
8+7Qyqp4fo77ca7v85J49+MgFBpfJiXgeJ9HRADeukyw3M+Z5XaPMTtUXIag
s7G1nlpRlpmWE+cf+/Lyi4suv7i73Tpid9XN6pIL5YIr+bQzGCC6cmtAIepb
EQ5ZmuuScBonNEWBBAPcb24EVwAPXUkzsjU3d6Qgk6bs7Ym2NnhrCs7GEuug
QQiQcKdg3a3M3Eimbgh+pi44rAseCASPQgMxwiG6A3sYybXAytCKALCBTwAD
BAbQvmW70x7ge8h4mQtHNbP+jtiddqccdyID5BC4gT0N0oTDVkQPlGGrP8tb
MrIu7UBBOkidwLvAx1D3cyG6I3NKgUbUEv+dMdR1odj5V2fjn202SL/Wn2eQ
0dyvThxaww+sYvlU9njXM32bOYGdfaHdgnBWfzRDGNHGD6X3Bdey/SqguBAE
QYXSOpVSP5pUOxLXOJ5In0oCBoC6KkVQmcyvciiwQqpZABl92zKeABbXOv6u
dSqNpk6iisOz2a8LuH7Vg5FgjyUCH2Sah9i3fBBpYK4ZD8+Reb1l3Yxn3i6U
eBWJvUtlftXDIVCVNIxF0qdi2ufiG8ejoELhbWaJdwsEmx8YC0mtk8ijFmgy
JDvtkMVzlNmj803rm/1ft0aAvW8bc7sb8ztrcxtr06vr058+T63sTK3tjn/5
Xb21M/DxI3d+qndllvPlk+SPT/I/luR/zA7+OikF3/usFG0MCj+JuXPcXsBv
iN3J7axvoRVTy9PiM8Ofht4/++SMyw039/vHHW8esbnqZgtR+JwLmJXmR4+s
2Rrbkg2tLRACNeChMfcAwXgf3hAI1ACJrKEBfkRnG5djR5zc3IFArJWlMcnc
wBJxRUM7cyNHgpEj3tgZBzJxMgNhHBGZOGBNHPBQWpo6ESBigvuh+EFBihKo
iZvf99GQyvSYCxAI+Gk4dEdGtJ33dDjrYXsK6gjwQDsk+LqRIaADeyRPG3T1
D8UPLX7Rkc6G1ppJzg42mvUTqDicUAJ/BOUf4+7BFQFLVCiBP6SZe+kO5fkP
AuuEwfWiELo4vEMS1SN5wxx4A+D1CiP75Yl9srdsaSxjIJouDK3vC2waCEdK
4JH4GiXyCMKmiaSW6WQIf8iYKWVwtRJp+6waCqlRhpXLQivl4fXKmCp5NG00
oVAUVNIfUiYJK+D5lokCG5RvagZDqSLkiUVALILfZESBwjdN9BQgLB/yr1IE
1imD64dDmsciO2biuubiO2ffMuYTuufiuSupki95fWvpLeNRLeoI5mxilyqu
R5XMG82STZTNLHdubw9+2x7bXZ/6trGwu76ws7awsTq3sjH9aXv609dpwG97
V/F5Q7A4y5gdb1+ZZn5bkfx9Tfm3ZcU/oOadGfp1VPZlZGBbObAuFS3yuWNs
hoTZwuqqozdRi8tTo1ICbwf8cuLRcbe7R1zvH7O/6QH42Vxxtz7vSjpqj4Q/
J2TNFuwCkkDwQMQALbDfRTIFAlED1JTAJoY2eIKT9ZGTJ92OHLN1dibYWJuQ
CYdIGmKtTPVszHTtTA0dzYycsCh+xg4mxvYYY3szY3scKoAQnBAtGX4sjJA9
v1cKQCD8OkAahrof2r5ic9L1zyZSMEaAwR6QA99DU0rNiQxr1EVNHUnoni86
2d7IxtLEjmLqYIfI3h6Z5OzoqNlHtkWbKDQJnuMPh0RLEjRGo3Ciq9w/BoCg
B+FblbFNgxH1wuA6nh+NG9DGD+4VR3NlMRxpLEsaDex19IfReIHlLK9Krl+t
NCyP55vd55Mn9KfKQiAfow4GFEuR2RdVw0FUqW+tKqJOHZnL98rj+1TIw0sG
QvIFAQn0+8WioM6Z91WSUPC9huEI2kgYfTy6YSyiQhFQpvCtHAumjgWWT4W2
rifVTkQ0TETWq8NqR0KaJqK7FpO65pKax94wF9NaVDHNwzEd44lN8hgqxw+q
Ic5klnK9dnS9eXK1bXal+9MGf2dHvvt5ZHtF9XVt8sva9PbazOeNuc2t+c3d
pe0/Vn79y9LO5tDmkmBhtHtW0bY6zv7to+zvK8P/sTT0HwuK3yZl2yPCTUXf
urxveYA1w+scZjaLexpZXTX05sLi8vfhyT43vH86+fCo5wNPl7se9teBPRe7
y652F1xIx2wJkIw5W6F7qYAfuB9Qp01Ejt5A1gcpH1wBP4DwgDnmIMEU+DR3
tHE97ulyxM3G1cHCgYK1sTCiQFGM1aOY6VqbaqYB4KH0QNM/1PqMwRhtzQFd
VJplEwtABa6ADSR1KF2Q4AGK4GOWx1zsz3o6nDsK7AGfEHDtTrrYn3J1OnvY
8Yw73Fgfc7Q8Ykd0+47cv685I7nfn8fPUZw0a9eOGHtbIxv4FaOAH+Ickdmn
BBekqdUcefiCPUog+KRmg+/7IWL0YxFb1sTcHy0H9NHYyn6/Eo5XGc+rkvO6
vPd5Ncu7RRTUJYvqVbwpZ7yoYr8qYTxPbboB7/nQ8yih41YK53HhoH+JMqBI
HlA9EUGbjYH7PKR28C6C14cCC2V+2ULvDwKvfJFfuTSiShpZI4+C0rhaFlQu
9ikdeFUufVUieVYie16m9Koa86+ZDameDSmd9C8a9S0dD6qajqQvJzE20ztW
UhumE+vH4ukTKbWDCU3KFLoio3kwgzleot5hrP2vwa3/Ue/8Y3Lz97GNryPr
20MfV/sX5nnLi7ytNemnBcGXDeW3nUkoPdZWJre2Fr/ubuzurOwujm+NS1eU
gg2V6Ou4FGqN36cGwff+Pq/4bUq8o+Z+VrM21KxPiu5pceMIr07UW9NKy2uk
5VTXpofHv7hw94jHVfujt92P3PVw/sXF+oID5YydzSkH62P2RBcrU1uCpsH4
e1cJRC5DGwIke2BoAB4EX6BOj0zQI1toEwg6RJKRlSXWxhxvizV3wIOw9kSM
Dd6IgoPMEHVIiNFAo5EtXrOEi+w7mNlZm9rawM8d7Ah5rIa9FZKbOVmZ2BNB
GCcLrBsJf9gSahYg1hjCtyMZ62FneUIz+eeog+URG2tPO4fjjk7HnZxPuCKP
nDuJzHKxPeqOnu3VAGaPdCNonp6AsbdGKdK0rNhonu5hjy6hIA/7cLSG/IHo
QkEmoLohM1Qt3BzQg+qmdpammmcxoBEcfk00soCIAL+YkJzAl+BfXg9F64Af
VfgaqR8HAiu4XqW9zyuBxp5nJYynmY03s1vvZnfcz2y/W8B6ls168qHvaabw
WbboRSrvUVLv/Q+iVwBhpuBFet+zd6yHCYy78GIK60kG/3nhYGD1aHTlUFS5
NLxiMIw2HNU8FkUbhij8soD/oHkqhDYBb/AtG3ldMuyVJ3+ZKXnyXvgwmfcw
S+JdMR5N/5hGX0irVieUy+IqJAm0wXTefI36C3v+r9K1/1Jt/ffk6l9VU+sD
67uzq5szy6vqpeWh2VnBqLprXN05O8FYWezbWpN93VRtr49urk2CB25vLn/d
WP62OL0zNrwxJN1QDOyMSHfHZL9PDf3H/PC3yf7dcf72GGdNxVhStE5K6lSC
CjmvrJ9V2dtBbWrIzswOffjqwvHLth5X7Nyv2dtdsHK8bOdyxcXporPtSVtL
DytLNytLVxsissKA7C9oNkxJmg1TsCkcugYI//P1rSAtJOkQiXokS2OKlamd
Gc7eGOdohnPEYh1wGBusoRVWn2yKDpAHz9QI+6fwGIjR1tbGFIqhtRXqPwgk
DmRwNojCYJVomWzmCraJM3HB69nhDV0scYetoY5GYrSzBdGJQHa2sDuMPHDT
6RgQ6OF8wtPuGHKM1/Kwu8VhqCbQHTr7H10K6K6upgD5DiFy44xMeCYgj5BG
8EOGoLp+JxCE08CJdtHA/wRgD0wb8W1rCwgNaD4JnwnsFfJflQi8afLQZmVE
Tb8/lfm8iPEkp+VuSv21jKab4HsfOu8Xc1/m9jzOZT1Fdh+GI6BozRN4pzAe
ZvNelkgCINpmcp6ns55mcV/kD/iVyZGluTJlRKUqulYdU62MqhmJbBx7A/hB
Ulcl86kc9K6Sv65U+NQMB9aqg6vVIVRFQI7YO73vxfveF1kc3xJxZL0quWUi
s3umgPexUrrePLzNmP+rZPO/1dv/M7Xzz+mt/5xa/nVk4pNkeXNyeW3y48ro
0sfhudmBMTVbreweH+6eUvVMqVnzE6KVxaH1j6MrS2OfPo5vLk9tzag31YOr
Q+JVhWhDIYRSd3dC8tf5od1J0ZcpwfZU38poz4y8WdVfpeCXDfaVszqL2um5
NFpGWlbwrccnnU/jHc4QHC5aOl22db5i7/KTM+DneNrB/pid3RHk4aEkd1vN
roE1upShKVQhQzM3tDXTt4YQjKz7wa+/NhHSQoIRhfh/xw+cEwQeiNILCaSR
FcnY0tKITDa0BEGwJhpbI6PmNct0SApnccTK4iiF6EnGuRMwrubIUEd7gqED
wcSRiHEgmtrjsbZmIAtHC7Iz2doNGVVq7+lu43nYyuMwsEc+grQoaOaT/8sJ
0WcYfXfaPyFEdtOcKOZOlhZOVsgpZlc7ZDCvmz26a4NOJkdjLlKROZBRAjUP
oyH/eEJNHvf5B+bjPPazigH/hqGwWkkgROFi1vO87kcpjdfhJqf7IbBXNxQK
kTe79ylV4F8uDKgWhxVyX6e0PkzrfJTH8cpivcjmvMrheZcMBNWPxdFnkhsm
4oG9MmVYpSqyaiSsaiQEypNisVc+72ml1Ldt8g0UrS1j0Q0qiMthZdKQQlFg
DmSVLP+mkfRWdXbPRDF/sWZwvXXiN+7KP4d2/7+p3f936sv/nln7m3rm88D4
J+HUqmRmXT6zIp9cGJqeV84tjMzNK6anBkZH+oYHexQDXarB3iFxp2qQNT8p
+TSvmJsenJ6ULs0MrU3LNiakW1ODX+cUu8hwe+nurBQq351pwefpvrVJ1pK6
e0reNNxfI+VTRdxSZndhfV1KSVlcYtrrXx56Op7EevxMufL85E3/y6fvH3W4
YGt7kuJ61tHjvKvzcQcrVyskjzpsg5aTOFciztUc70YwdyeaOJgiE06sEQFL
mu44Y8DM1A7z7/iZ2uIg+BpYmukSMaA/l27QbhNTqIsNyUSQMYmkuUEqZQ2o
WH1LpL2E6GFpe9re4YKz9RlbvAfByMn0kANe117jgQ7mGGcCUqo44vH2OJwd
HmRuT8I7ktER9Oj2GSpI3tBMDwwQjcJgWSg2KIEIhBr3Q84vg/c6WVu42H4n
8LADuluNQPjnFh7akPCjkPmRUubyXmQyHwOBhbyXZf2+FSLfUr43lfeqmPMi
u/thnSy4XOxHU4ZD/l8iel3I8yrs8Spn+zWII6uFIbldL/N7vWoGwuvk0R96
X2b0vPjA8UbWA4fCK5WRgF/N2JtSZWDewKsc4bN80Ys8/rNczuNSkXeLKrpr
MrllJL5uILqcH14peNOoSO2ZKRZ+rFPvsGa/9X/6u3Lzv8cgwm791/jG38dW
/1Bt/HVi/S+Ty19HgbqJJcnYglg916+a7p9eUi4sj378NL68PLG4ODozNaRW
ihQDHJW8b2iANSzjTo0PzE1Lx8f4Y6O86Um+StY1OcRYnuBvLw1+WZRuTAvR
E76bs/yVCfbsSMeEomV0sGFooEbIK2H15HO4ZQ3N6R/yQ14GXj5+xerUDbvn
kb9EZfuEZLy6F3L16C8udidJDicoLqfsHY/aWLmSyR5WwIC5Owmow7nh8e7m
5ocJBA8i1hWHcTIFCKF6BQLRTphDZCNTOxMUP7wTDu9kjrU3x9gSjK3x2ubG
iDTr1YAfZINIEkgxN7LAg0wsgEBzYzLOgGxqQMboWyKzpAysjLAuePIxS+tT
NuRjJIwLRs/WAMUPPNDAHg/4gSGbu5AIziScA8HMDm9ijaSaiIXakpEcz8Ue
jebAGGpxSCeVLRnYQ4Mm3KMeiAp55Icd2dze0tyRgsyx1xAI4KGPYEBu0H06
D3QfB9nL+zFJFV2ToULwFXoX9L3M570AAov6XhXzvSAWl4p8wA9bxmLo4zHd
88mctayWqbc0ZWSzNLpVEt2lTOwcTmiSRLUOx/OWcgRr+Tksr1wesBdYoYB6
NqJIFlggCYS0sFwdnCF49I51u1Dysk4VWj8cWj8Y1iCLrhdHN8uSetU5orkq
5Xrb9O99a/9LufP/TEFU/fLPxd1/Lu/85+Lm32bX/zK9/HV8bnN4/vPIwmf1
4tb40ubY/JpqelkxviBTzUhA4wuKmSX17MLo9Nzo+MSIfFAs4LP5XEYfp5PP
7xqQ9AwO9QwquxXqrtGJHrmkcUROnxvv3VwWf12TbS6JPk2xPk70rs5xF8YZ
48N0laJxRNEok9Xy+CXdPdl1jcm0lrRcauhz//OX7jl6RV9LpgYnFAfG5vsF
vn96z//y2VseLqet7I4QHTwsHY9aW3qQAT/CYQtwPAAP744zP4wHEY/AvTki
NwLGEYdM2LY0MqQYY2yNUfzMnfEEF6K5kwUOigUHkj4ZQjBWzxKV6Z/uZwbI
mZDMTUkEDBmPIWONyaZGZHBRAyOKMTJCytrAwFbf2NbA0P6Qvq2urrWuto2J
to0pCEppfVtTQ3ssxtEc50QECLGOELXN0ZQS0MI4UqAghcQA0gM0PUMf3Abg
GVCIcAWhBoiGThNNcYEcn7cj4x2sgEDwQIBQ8zQQCpTDyMNBNNt/P/ADD0SX
pn9sw5XLApH1N1kg+uBIELXfB+6r5cGtk3HNkLBNxLZOx7fNJXYsJNcpIhrE
YbVcf2SHThbVLI1sHYnrnEhqVseUCP3LZcF1o29oU28r1JE5Up8MkVeW+GXZ
WNAH8eNMwaPKkaCW6VhkxIE6iTWVLV2uHtvuWPmb+Ms/1V//ewIsbvmbcmFH
ufOPle3/WF/7dWlhc2pufWJ5Z27l18VPuwtLO7MLW9OzGxPTK6MTy8rRRfnI
vAzEELfx5D2ikT7xcL9EJZUqB/vEoi5Wbw+nl9XXy+xr72TXtTHLOnnU3v4y
3kCpdLBaJqtWDTfMzXStfuSsLLGX53qXZhhTY61jI03Dinr4qlhSwRUWd3Ny
Whnp+WWhOWUhWSX+semPguJvvPnwJLnUNyb3ZVz+6zc53sHvnzwLvf7zoxPH
LzsePmXjfMLa6giZ5GkJsjhCJh6xAN9DqbPwJBE9SBaar+LdLCAQA4EAjImN
EdbOCO+EJboSLNxIJDcroqs1/PjQJ1ihzQnoLgligGRToM6MbI4jmWOt8GaW
WIwlxoRsYkQ2xNpijCgGh8jaOqR9eqT9h6z261MO6FlrH7TS16EYgw6QDfZb
HALpAqi2ZlBKG9shCzj6NjgDW7yRnYWJA9nUyQpZ9Ibq25aoaR9FGsOgeNe8
CJkbETVAVAiiNiQzW0tks8aODFEY4jgI+fVxRH6JzJ2t/uzmQsBDE8gfSKN7
Q1B61AyF0EYi6iBPkyHbFpUaIGuUYZ2L7yrlwRVDwVSpf77QC1K4D+ynlXy/
wu6nVOZLmiSUPhzZPBwJJpnWda9E7Fsi8SuU+eUOvE7lP0vmPf4gfV0+EZ4n
98oZeF4oe109HFI9GFrVH9Y9mq7aal79u3DzH/Ltf6i3/za2/k29vK36uAXm
Nrm6u7zx++f13zY/fV399PXT2re15d1Ps5szizsLc5+np9cnJlbVI4tDA5P9
AnUfT8VmDzNEkzz5wuDIsnpyfW5mc3ns05JsanxwckQxMyJS8Zs5VVR6agk9
vrQlrqQporIhorwqENTQ+Kaz6x2zN43FTGczswb6S/rFJaL+Yi4/r5OV1dT1
vr4tsaY1oYr+Ni7jwZvUu1kV/u9LvMJSbkVl3U+p8E0o9orNf/Em60Vk6rPA
uAcPXl8687OTvSeBcpREPmpleYwCVyANkAMbhAyQcJgMERnqApInkhYCAHpW
xvqW/8LPwg15BpzlYWsoXkCAH+jfT1uAIFACe3hLvLmVubkVHkfBmlkCkEbG
ZH2MlYGRpa4h+aCRpbaJtbapra6xrbahja4OWQ94AwF4WriDWtgD+4jIK0hj
vJUpyh6yyWJPQIW2kqLLOJpi4fuJD4Q9W+K/s4eEYyidbMga/KwQAh1IWHsL
M6TAQQZb4ZEuGivNIjYFSg90JwilDmnOJ+FAUFCA46GPjywQeOXzX4Ef0sai
gbdSeWClIqRY6pcjeJnFe5bJfQpZYj7rcc2Ab70soJDzJKP7DuRyhaJX+cKX
mdzHWYJn6fwnSez7oDTRs/T+5+/5j6nDAWVDAQiZfT5UQVD7SJp6u3Xnf4Y2
/ibf+qvqy1+nkH3YPxY2f51b2ZpdXJ9Z2vq08uvnj7ubU+tLo5+mx1amx9dn
x9am+qel8iWFZE7GUXMFk8LRrdGp3anhdQVnspc90cOb4g5+Usx8W179r92N
f/6x/r9+X/3H14U/Vue+zU5+HRbMtNXwMiqYb1v7U/OrvYoqXhWWvywqfVVI
fVlQ9Dy/8Fl+4fPSch9qhU9ppW9JlW9xlX9hlV9epW9ulW9K4dOE7LvRqb+E
vrsSmvJzZMb1Nzm3Y3PvJ5e8iM19/CbzcXjKg4DYO94R128+OWp/1Ix0GKIt
AahDDRCMDqgD5CyOWJM8bSyPOpA9IR6BGyBN7MY2UGLoGFvpYR1MIfiaQ26m
yf0gJiLsWeLQvZKDRCNI/wA/+JKFPdkYb2xpb2ntRHE56mjrStmjq6WP17Z2
s6C4E0yt9fSJ+7C2enj7Q8aW+w3I+/bh9oLNGtiYHLTQO0BEjnzqUUz3EfQP
koxA2mRj+KOBLc7QDv/jMBFcDayx8EfNkhH+O/moDWp2tFEZUEhQhhtZWmAs
iSYUC4w10dSWADKxxZvYYjF2OCS42xM1ZbsZfCO8X5dkjqIL3w4E6lhgob7I
5zyHTA8Nvj+G+aQyH2bzX+T3e+cKX8FNnsircMCnsN+rdOBVifB55aAPfSKi
cTS0QPgsg/0guw9ZDyyQvi4ZCsyT+HwQvYLgW6gIpCpDK4ZCa5RRrWPJfR8L
1F/pH//B2/5vxe5/j/7xP7M7f5lc21avbI5+/jL/5dunL99WNnZXR+bHxtcW
pndWZr58mtxaGv40yRkVNQnbhNNi/rSIPyPgz/T1TfP65njSVYnqyzB7ltEz
2cEY72ZPc0UfZZJ1tXhFLVhSMieErCl+3xyXO93eMJCf0xaW1RJAZYQW1r0o
rnleVPk0v+xRXvGD7IK7H3JvZ+XcyS2A+/uZBffS8++n5d1Lybv7Lu9uUt6d
uKzr0WmXw5LPByWdDXl3PiztUkTG5YjMq8nUx28L7icWPH2b+yT03R2/mF8e
B5w5f8eJdMQM64qIdJRsfdKWcsIOHI9w2Mr2lKvNSZcf3SaalRlrnBPJiGJo
amNgZo8B/IiuFhaulmjwhaISY2txyAqnadky0iGZIF0KFJyFg6WhubGFDdHB
3Z7iRDYhGLqfcErOjG3qqm5j1qXlxZ6/dsTEYt9BYy0jghbZGeoajDZRWwuz
dz/uoA7ZEAQlzwELQyAQFUCoa4UgBwI4QVAZGdiY/okfDiUQdT8g599kaUwh
G1uRTK3IKH4YG3OMDcIe/FohKzyOBAjxyCaOJVaTOpL1yAjAaD+GNtHsIMG0
RvOI8BpJYM1gcK1mkCOwVzYYCF4H1KHsgfsBe8UDvoBfnSq4RPKieOB5rSqA
NhpaPuRbLPEuG/QvlQUgHcjq2JKBoAzmy9Te57kCv1JpeI30Tdvwe+HHsqnf
ez7/j+zX/63a+rtq9VfFx8/yjS9jO9/mvn77uL37cXNncWNraXVneWZ7afGP
zcmdpR4lr6C1vLC9rFfFGf91RrQ4wJ7i8Ga5sjWJcInXOdrCne+d/OvI1H+O
qP8yqNiVDn2RKb4qh76qBjYUgk9SurK1a6KTNdPeOlJJ5SZl0P2T65+l1T8p
oj0tqXlYUnW/sPxOfsnt7ILr2bnXMnN+ySm4lZV/IzX3WvKHq4mZV+IzL8dp
FJVyPvz96dDkk0HJJ4LfnQQFJh33Szwe9P60f+JJ4DAu/25o6i8BCVf843/2
iv752E17mzMk/GEM0RNvfYoCRSjgB/Wm1THHH7uxaFsm8vApD1vkyYO2hlCA
YB3MIPez8rBBnsLmgTy/DwgEw9EYoCFI28L4EAljAvkeGWtKxtq42Zrb4E3J
mPC4oOXPs4trE7IRHoNd39hakvQ+6OgJir6xlhnpgBlFX49wcD9mz37sAR2i
PnJGEjn0ZLjXXF8Lp7cHq7sPfwjKcD0SUoaDoCDSszLUHFj7vkykadv+3if2
Z+6H7LkATuB+GArFjEIxtbEytbEA6wP8gD1jGwxUVXADSGsabjHge7ok4kEC
OB4ewDtgjtmPN9mHM2aMxtEVEbWSwFppEE0ZDkkgJH6aRxj4QfAtGwoCVQ6H
Ir1PI+Hl8gCqzLtC4QPXXMGzov5XSFPKaHSlHOm9rxmMrpXFUPlheQz/QmZQ
rfhtx0jWwBJSYqz+R//WP4e2/oEc9974NrL16/jml8n1z5PLq2PzH9VzSyoo
XeeWx2bXJtTrE20yRi69sLy3WrQonfnLvHJrmDHa3SJvrhVV0gaqOkYam+VV
VPaHGnExe6516AtHstkjWO7uW+rmLjHYC4zu6c628ea20YaeWXrPdH2jPLeM
G1fQHZxBf/m++k5R3QNq9d3iyttF5TcLSq8XFF/LK7yWW3C1uPRWXvH1zPwr
73MuJmade5t5BhSbdeZNxqno9JOgqPSTkWknQlKO+ie6v45zeRXr9CTczvut
Z2j6Bd+EM89jTnjHn/NNvHrL/8TR23ak48ZY90NETzPycSLpqAVEYfJRWxKy
JGiL7ul/7xF1sQT8MNb6hlb6GFsTcD/Aj3zYDgwQysYf+O03N9iH10eOiuAN
9mJ0sDYEXZwB3oZIdCA5H3MqrMhb3/n4cXVy5+vH2bkhDreJ0V1dU535/NkV
gsVBHSMtI6KuiaW+Lv7gAdxBXQsoT0wQ5IhG+wgGe3F6yFFxcz0gUyM9iNGa
o+KHQKhb6pCMQZrzAmbofhmAB5FU38pCHwpwijXgh7G2RN3PxNoMwAMhg8TJ
BhqzRbe5ATncfjx2P94UBW8v1gjUoYiqE/kXs54XsZEQXC7xLxR6Z3GepvQ+
AAME3ysQvwZnQx4TKQ+mSnyyOI/L5H41wyHIICCRX5UktHIgvIQbWNEXWSeK
a5Wl9Qzn8UZLxNM1I8ttU597Zz6zF74IVn4d+LQjXdgYWFyVrW6qP+9MrW1O
LHwcmZ5VzC6OLKyOTy4Ni4bYLez6wta8Fildvjo4sTsqX5P0jnbQpbXN0qrq
voJydnY5J6uSl1XOSSthJpdxUmpFmbT+D7WCjCpeagUvrYyXVspNK2S9y+tJ
qBSm14gzqgRJRT3hxT2hFeywki6/nPoHVNq98trbpdU3qRW/FJX+XFh8Ob/w
Ul7BRWrZtULqlQ8FF9JyzyR9OBGfeQz0NutYQvaJxJyTSbmnEvNPg+JyT0Rm
eASnuEfnnPZNdPNL9gxKP/Mq/ujDSLfH0UceRXreCj58+jHF7qKhxQkdwlE9
4lFD0jGc1UmS1QmK1XFbgBCSQHM3ipkTCQITxClTOxPAD4pWUzsM4Ed2p0Dk
xTogwwDN7MmAH/zQwfr24g6h0jLSNrLE7zHWxVjhyE4UR0+n2HfRPdx2YX/P
/MLIzJRM2Nci4tL7uU1VJe/Dgx46OOPwlvoGuAN62AO6eB1tPMCmWXJEj+4S
DOCP8KKO+SEdgq62+UEdC52D/xJyWgrFT2O/GEjYIG37gZ8BmWhgQfrXGjjZ
VJ9kpEfS1yXpHrI8BDeabzfR2B2Cn4ZABD9wP9QA22RhdRAlWS9K2C8qRL7I
CozEv0DkncZ6hOZ+IDBDKH7RFcKqoZCKwZBqRWTDSByAl9/rU8oKbZG+549T
ReOVitnGqU+9C2t9c8u8yXnm+CxzdKZXOd4pH2lTjbPmFyUra6pPK+rFpZGp
afn8omppZXzmo0oxIebKurv4za19tQPzfMmyQLYs7JtmNIkrSrozirvTqrjZ
9cK8elFObV9mFTellp/a0J9ZL0yt4SY18N/V85JqOUnVnMRKbnw55y2VGVPU
G13OjavgxJT2hBR1+FUwgmnciFpmUHnri/rWJ3X0+7UNdytrrlPLrxQVX8wv
OJebd6ai8lppxeWisos5xWczC0+lFZ5MLTiRUnDiff7J94WnUopOp1PPZZad
Sy098674dHz+idSKy1G5J8NzT0Xknw/MOOWTdtI37ezzpGOPY4/cDHG48NLy
+H1z12tYylkDwtFD5keMIRybH8YTPIiaJUESlCRYFwLOGQf4Qe6H1L8OZgQX
Irrwgnf6/vhmtGkBsnf0oNwerD74xn6skZbJIXAbnC3JiGBy9vKZxHcxFVUF
dTWFzM76cQV/ViXmddQ0lX/oaSmNjnrledIGPPCQ2T5jkuEB04Naxgf0SMiG
C4qfNh7BD8jUwR04aLYPyNEm6aL4aQxQH5mqQf7eJAb4adYAyWjwNaZY6ZkT
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
5sflf/ik4u33in7/ZtZv/9sf/uFbf/+N1376ldurRfzwldurRfzoiwvogFby
3Vdf+cYrr3zzi+Pvf+WrP/ral3rth1995c8An6+CzvIq6Czfe+WVb98KGOYX
c/xrf/6z7/7wn37ys3/5uxF1MUKUA2OkjYoKV7R1C4rKZU01I9g7qyldMN5+
1AorqRll1w2TG6GgsqMKqnsffFj06z9k/neQWn/x/j/+PvM3HWPNA3j4umJl
ijVM1C4QdJPzctS6dXTVPDCvgowBr1Nj1ozDeA2CoO2jmKAUYy9R3sQwdAlt
ULlzQG5HM6Qd04TC2bVSrqo3dLboPBzRxeHyQBfAT+xuBJK46vjGMqm1WmWp
UeqqlMpKnbLWqK7Xq+rkqmq5tlZuqJfp6yS6WpmhXmNvNno6pLpK4H5aU53O
WKfVVapVZWp5iUIOOKyRy6olkjKRqIjPz+XyMgF+bE4awE8kzpVI8wXCHL4g
WyQqkMnKxMpKkbVFYG8VOdvl7i65q0NsawHgMZUVPE0tS1FJE5dR+KVkfgWJ
W0FglSxv5y3Ss3CszDVeLkB0k59D4WdvC7MZ4lymGKy3x1R+JlWYy5AXMeQl
DHG+SFEgkmeL5XlSbZHCVKl2Nmg9rTp/p9jWxDM3cAz1bH0dU1vH0NRy9c1i
ewfPXMe11nJNteB2rrGFb+pg69op8haSuHlN2IDj1cyxKqYYxWPUHDQpHbF2
D4m/h8KnYVbTBonpmPUMQCaSmIFYzYDgHnTN32ua/Khm+I/VQx+UY97Lgbzx
ccMvP6j87dsFv3636Lfvl97a4Nv5b/zq3i9+9uu/fuWvvjgx+J1XXvnhV177
yZ/d6sff/upP/vyL68t86ys/vi3Lr/7w1df+Clji177xk6/969v/8vaD37+f
8fYf7v77Gx/96pdv//Mv//B/v3Xnt8VN+VXdFR0DLdCJPsw8atxQPG2unNFX
z6qrsMJiGDltiJ274ehaMNThnW1r3h68HbKs71uUQ6fZvaObHR0TxZ2TJeX9
aWXQjLyOezWo4lnW2DAJ0bvU3IdvJhln6a65FR1ywzawrO8e4dfOSLvWLUM0
x/CmEbZp6GHaINv6FoKwmCyv4pvbJNZegaF3W9a+QC6ZJhavsWp9p7OOoxHD
DlwV6pL52uTeZpWvWetvlttrNI46tbVWrilTKMq06hqTodFkalHo6hSmRoW1
GUhmbZLbmjXuNpO/W2lp0NoajY5mg7VRo69Ra8q1mgqdttpsareYO8FqNDZr
gFvKSgCEbE46QE4iLZAriqWyQsCeUJgPgiIIkNvKcpqummVuENhbJM42gJ/Q
2AAIBPixlTUMaTVdUrMtqSfxa/CM0oWt3EVa9tJ2xsp25iojc52VReFk03jZ
TEE2SwhaTCadl0nlZlD52UxJAUdWypOXiOSFQmmeQJYnVhXLTVUaVzNgTxvs
kjhbhA6AfZvU0yXzdkvcnUJHB9gIEk+L2NskdDeBX4GUovYhZE4YV9/L0kEY
mh6qqpOsbAe7GyeunuEVY5l5Y6RM7GYW0Dg5AxwPbaQPbqSh1tPha+l9K/c7
5u82zXzSMnuvYfpuEertey2/fr/iV2/m/uKtvF++U/ibt3J/+1bu736X8euf
v/vffvDPP/rm3337lR9/7ZUff+MrP/n2qz/+9is/+rNXwFT91iu3Tvjj1777
j9/7+9f/4Xd3f/Og/E5hc+7ADHRle3ZLuLrOXsJRJiZwqPElxMLG6AR+YG5j
hECf2+AsbnCWkYq0GXvFvKUWKy8dFZTdXrJcUkuwdElOZ8gx1LS5eUxdN2/q
JliQC0rYOLNjQQDb1GBRq01wfNMkAzFOhS/yR6eZ6N6FGgSxiWKeYLgnV3X9
BF3ntLhimFm4pGjbtCAYDiTNAuE4ehQhqMLfI7A2bCtLJfZWsal1W15PkzZt
8BsWqRUzlCLL7rgxidJE+xSBDrm7Re5oUDjqlPZanatBa69RGiqkqhKlttxs
a3Z6Oh2+HpW9VePpNgT6gDT+brWvSx/oMYZ6zKFeS7DX4u82OFuAB6p11QZD
ndncrFY1aDVNRkMbIBDQqwP0qisk8hKZsgwcgLsBKdRVoK2IpGV8RTlFXrKp
LqPpqpiGWo6xjqOv5mpreJoavrqWp6rjKBt56haepp2haCULG9bYFavsYgIj
F0/LxlMziNvpZFYmnZvNFuQweVkMbiadk8Xk5YBmBCo56ObAt9UG4OcVUk2p
SF3G15YJ9FU8UzUIukJns9DVAiRyt4Mo8kUa6eA6mqXBViCQh0E2Vvph2vCg
2jsotiC5RhjHAGUboSxTP93Uu2W4/RTxqrx2gVm4QC+Y386foWVPbWVjKZkj
m+lDm4DAB7C1+70r9zqX73Xjs9pXMquwn+T2v53W/If3S1//Y/Gt3sz5ze+z
f/tG1m//7ZNf/Pk/fvfVv/7aK3/56is/+NqrP/3zr//ND7719z/+zj/99P96
919+ee9Xf8h794OSDz4oev+9wnc+KHjnk6J3y9tzB2Z7l7ewuC3s0sbIFA45
sQRd2hgis+e2BAsMKYElB1pr576LVmcOSrNBAVlQt2z7h+iB4U0Pkhodwvv6
pyyto7r6MXXjqLxhkFOD2Koi6jCrCgxitW58u4dqnF8WDM1zBlg2HNuOm+dB
sPTmKXY92QhhOaGzgsIhWjrZ1E219NNtELa9S+zp1EQgxmiPMdyh9jYZgp0S
SzNNXs1Qt9CUnWv8piVWpf1wyryH0ScQ2lCv1tehdjWrgOMZK3S2ap2lSqkv
V+jKDNZ6T7gnkkKE9gbMkX7LDsq5PwRkS6EtOwggexIVOBrx7aFdcbg10GNy
tpjszRZ7i8PRpde1GA0dZlOX1QLUaTa36owNt/aoq1Zpq8CB3tQIbgEzHeAH
DIquq6Yaa+imWrqhZltXQVeVgcnLVlYypZUMSRWwPoaska1so8vbyKLmdW4N
mMJrjAIcOQtHuk8g39/czqAxsxjsLCYnm8HOYPNy+aJCoaRUKC2TqWo1wMDt
rcCi9Y5mjb1RbmuU2hqkrmap94vc623hORsYthq2rZbvbZb4OwS+Fr63EYjr
buTaW4TObrkHCQKM0IRgaPqA6EC31z7rpeg6iepmorxulV9B5FescktwnKIl
VsECM3+WkTvFzB0kpw1spsPXMyDETCgpr49U2LqUWT16P6P1nQ/L//2Dsjc+
rnz7veI3Pyh9527VJx+Xf/x2/nuvp7/1q7tv/S79vXfy7n9clpdeV5bbWnG/
NiOzOSO3PS+7NSu9/sH96o8fVH6UVvXRHzNfb+gvHl3smyLA54mohfUBHAmz
yZxgCBeYkgWOfBmILVvqFX+A0WaiRBk9lLuDnNI5Rfu0tG1YUIuR1k0Y2+Y8
PUBjuiY4vwRCL+jfKl6Q9s5wuza1IwLvCs+1ssRDwZfrxsidRAl6VQwlSm4v
dSQNDDGMbaObHy8JCiXBAa6rn+Polvh6VaEefbjDEm137HQGjxHWaJfYUsc1
1PNNnTRV+6asDexc3+Nl++m4KTVgjEHNEYg10GVyNmnN1VpjhclWa3U2WN2N
Dn97IAmNnwzGzka9xyO+s8ngxUzwYtp3NuE9xfofToYeT8UvZ6MPJwIHGN8O
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
GKwx+cp0rhJQfOiKArq6hmvtE7jHOa4Zvm9ZGiML/WskLXZNgaEZsEwTlqJC
k0SwTTGcLEH+f0y9V3BU6b7lSQHy3htk8OU4BRQUVEHhEfIpk0rvvffee++t
0ihlUkp575BA2KKqqDpljj99z+l7z9zpfpieh4mZjomJfpv5BPfenogVX2zt
JIUgf1rrv1Jb+5vY0CWXNJll09rTyKvfzn/74+L+QebJbvK7VzOgEfzwdPK7
3bHnq7Ffns/96dvVv/+08/eft/70dv0P3y2DTvHXXzb+6Q+7f/vj7t//9Phv
f9r+6x+2//y79T/9uvbn323+8eetP/y0+fsfV8Fc97tvF37/Ove7F9O/Ps9+
v5t6swWoC2zPuDezrvWsczZlHgsr9GqEzUaKR8QT48aZSdvctHtjOXHwePpg
J/vqae71QTY3aZaJIHj0VRL+CxLxKhz1GRx7CU28iqNcJ9C+Gj+Q+1cYnnla
4rF08sCQ2FVH1mSxTWVqR+9fEpkyROs0EfDpXSaZJkdMU7DgBnf0sXT0sdy/
zLVOUsxjBOsY0ZYheaYZvhwjuMCMrnASG7yxx8KJJ5Lx55LJbyS57xRzr5Rj
G9xAhuAdxcXGWcD90gvS9W+8cweW6AJ/clu28kw//1i6uCMBsTs5y5xY5E9u
KicfG5a+CbzH7/Hr1P7T+FhCYtMhVbxOMf02h/BF160KNuVi2I1an1E/WfG8
2ko+W02vTQTnE06vkRl20/0epN70tUz3od593pv6OD55MT562e/6jdd2dTwO
2d+Q/PyN/08/pf/8a/qX30Y3NiTJFNxs/9ruu/P0jeynP1vT86jUEi2zwZ3f
l2291r34reXHP7j+8Bf3n//m/ss/Of/pn51//1fHf/ovlj/+q+GXfyh+/Gfx
278LfvmH4Nd/5v/0N85v/4n9C/jwX0Q//k3w5o/st3/lv/2r8Js/cZ/+RN96
g197gV1/idt4hd99Q956RVx5Sll+zt78QfPkT769P8c2fomu/Zyc+z62+P3o
xs+Z1bfJmae+6X338stAbt86sa3NrGkyG/rkoi6aU02sOtYPEtOLztExrT8g
XFn0bCz6Xu2ltxd8u/O+rWnX/kLg5Vrk9Vb8m+3RN7vJ75+k3j7L/PLN9O+/
n/nTj3N//O3c797O/PJd9tfvp3/9Iffjm+wP30z98Crz/Yv0myfxV9uh5+ue
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
7sKQX/UNXensvfTVrbMffVrferKsvqmwoupYfvGRysZjpfWH1AEV1Bze/zmv
Gvx1BQV1hxto/scd/443HAewHW8qPNrwb3p/lzaEBgHE9DLlKbl0VK5Mq61z
dseSwzpvtc6bLXMmsPo2XZG9gHPFKs/wlZMc2RRdN8t3b2liT+yRPZtvRW+f
VXiXDI45pS0nd86rnItK66zEMCPUT/NM8wJDjm3PcVVRgi6E908KA1OiyILa
P68EgI0992ZeeGM7Ft+Syj0rc89Ig4vq6Ko+tmGMbZpjG6bEpm1qy7Ww47O6
qSoNXK2GK1QjDH5H5/BH9hh7clnP590KOlETo6yxIP09gREbOe5lBZ0UlWKQ
wvkaxbgqcg0o48gO5vmTj44MKc+ln7OTOxzzKFxjG5SreqwmuELySCa4o1N3
kKifYukfj1DPYUSXgiuc3Bsn+CItk0J1nGadYPtnub4pqn+KFJ+jxGaJyUXK
2DozvcEMzRNNGaguOaBNI0yTVJZzwLsodS/JMZpujLafZIZ1cu4MKyB9wr77
jI4bhLuXEDfO9V1svne+5nprzeWmhist9Z83NV1rbrvZWnu5uupCWcv1Ru2o
cubF5PK388H5oH8mML2Xm92bj83HYnOB2JxvdCEQmfOE5j2Te4ns00xo0Rtc
8BhHNRwz/WrXxdK2wqqTZeWtxYUNx0tbi4tbiwpPFBY05+c35eU1Hs9vOJ7f
ePR4/RGgosYPSk8cL246Wth4BByAIe3U6cpPPqy9eKHp4mdNn11qvnCp6aML
dSfPlTe05Nc151fUHC0sPVJc+kFlVVFNbXllTXFR1dGC6g+K646XNRaUNBbk
1xwFKqwvyKs5fqwm/2h13tHafKAP6vMAbEeb3qmx5D82s4bK0BgdmReQqsdM
moxZN2G1z/v8GxFlWmeasbpXfOGdWPJgLP18PLgVNs8a+TGmbIJnnFNaFzWm
nMqcVTlnzYEVlyNnsk0bTBMa/ZjSMKEE5/VTCkWGr50RWJalrmW5PsXQREjW
FMc1xreP821TosCaPv3Mk3nhi+1YfYtaT07pnVWFlvTRVVNs3TK6bU/vulLb
jvi8PjgmVRlQai1CIhsUyQah+Ks9qM8iCxoAM4tzw2ODJcLkmI8QcxFCNpzP
hPHZiAE3VaGEEFlf05WPPLOCzHObY02kymLR1s8nvhWnn4pl/n6G8r7E0G/3
4gGEYvkDsfoekvIhjHYeK77McT4KrgtijzWJPYczp9ImmIYUwzHO9ExQfROk
cJY0Ok+N5gijS/TxLTDHMs0ZpDwEEQcHFQkS2TqkTDF14wKkFjIs70Lqhrp4
9x8y7z9gPXzI6uxgd99jdt8kP7iMvHlh8OqJr1rbvz7ZcLWx+mJV07XGxi/q
az6rALrUe8E2YV7+biHzeCy+Gg3MBQCHCy/mE4vR8JR7dDaQWg5H5ryRRf/Y
1ujYTsKX86jDSpqG+smdCyDdSlsqKtuqylorD/eDPl1ZfKqqsL3svYragEqK
WgCTBYDMkrZiMIMd0lh3tLSpoP1U7emTtc3N5VU1ecDfquqOVzXmVzTmldXn
VdYXVtYXl9cWV9eU1dZVVldXlpQVFlXlF9XmVzSX1rZXVbdVlzSU5NcebhJ3
vLYACIB3pO6dGgqAPmgsfE/d8eay9/oKffNz6NWLg5fvEO+NyGEIFbJfAHnE
7Ojl9QxLB9BaBM6AxhsxBBMWHKD0MIafwEtQZBmONMURRpniMEs1KjFn1Pqk
HKxAurTCOKlyzpt8K1bXqlkJ8FtXgTTXZTjKMFkboTnHhY4psX1aEgTj31Nv
+sAX3rR45rWeGXVgVuuf0wUXDKFl0+imY2LPn9pwWKJsjmKAL4Wo9Sga6yFH
1Ptw8COcuDO4pOdYoCTGdZMB4nUi3RaY2wS360ZMygGTdkQh7eVJOumSDqUf
58iJDDN884os9trk2qRH9tieZYZ7lmVO0sQWuNgMk5lHmPIHbM1DovQrsvpr
vrvfOEmKP9GlntlC69bAktk2KdFGqboo0Z2hBbP0IHg0Rw1O4cI5SmqNO7rC
tWSwUv8A1w3hBdEsP4bmQlGdSJRuACJ+OCTrhsr7hmW9wABHVIMwFXREOQwR
Qx5xO+/T73ezHnbR71+B/KbxSnXNZ2W1FyvrLlU1X21o/Lzu+tBV85hh4bu5
8IrfOmUOrwUjy4Hc9kR0yufPOMMz3thCcHQ1Gl0K2cbMrimXYdQkskuu990q
aakua6uvaGuqPNWU31KR11p2vKX82ImS9zp+oiSv5fB+pB/UH8trzCs+tMdi
YIyFTQXlJ4rPfHTq9JnWxhO1JVUFheVHS2sLKpqLK0+UFNcVVDQUVzWUVdaV
19RWAPbKSouPHz9aUJpfVFlU2VBZ21Zf1VpTWFv8QflxoOO1RYebItUUvNul
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
SHxtFmZaxmoX4KY5tGuabI5j5O5+nqWDqb9N099iWu7y3J3eJZpvhWqYQigz
g7osTJzsEY522dYwY98J/U8o4LmaeYRpnahaRElmhjUrSNF0nyTXp14a1i6M
WNeImhwu+4Nz8Xej4Q1bbNuTfBIA7M29TS79nJ79Ljr+wp16bPLNi4xJgi6M
MMWQtlGMNQzT+uBc8whe0U/VQelGKJR3u49+DSa4gxTf5zkQIGf5ThRgTOwh
8R04rg0ntBNEJjQweYWLJHZgxS6CIkhXRVkgguGSTpx2UDnKMYyL+W6S0Ecy
psWaUT7XQ8Kohx7Rvr6LvfaIdHuI3YMSQnEiGFNL4ugow6Selk9q6k6VnbzQ
WHuytOXD+jOftp3+pP3chbMfXv7o1IWzdaebihqr8urLCxrL8xvK8htLAV3F
J4pKWopKmvMKm48fbTx2FKxNeUDHmwqB3uF3uC9bUVNFYUMlgLawtjK/ujwP
tOPqkoLaEhDNeQ0lxxpKjzaUf1BfcaS+8khdxZHa8sMVDIH1ZccbywDARU3l
RScqitprCtqrC9pqwZrfWmOdt/o2fK5VLy8shOmQLQ/bL6MvcaJM+SRfOsZg
BIakaaRxFmOYgTuXUOYcVDU+JE1A5GmIdmrENofxrpIBeMpEn25i2DQNV41D
pOkeTQ4KGopxBW3fI9kOCIEfuYG3bN0OWrOFDXwrGv+jZfKPdvsuW5HDKmfx
2jmiZByumyO4t7nmVZJxg6BeRmiWEMYV7OGVD/FuUbxbNwF1LuIB294tKvjk
jm2C+ynZ9ZRsWEb4lkiOKbQpPWIeg9knEc4ZtHceF1g93CI2/pjumAcGOBLZ
JTtXEcbZgeBjfOyA5NyAKbLdmtyAY5NoWsUoZgbUS4OqRYh+fciyA3c9xkWe
c3VzmNEXquxbT3DdMLrrHnsamHgRzH0bX/zx8CrQyVfesX1LZFXhnGKDYUAX
ROr8CKMPofWhBFYUWTPEMIKJDs93YhimYaYZyrUjpH7Cu6kPC+Y9gRPPsaI5
VqwI4GfAKCw4lYOicBBlbpDCh96ojrGBBxJ1Q1wXzjIptkxKjRmBPi0Q+Yma
BJvtwCAkPUOchyP8XsAenDcEZUC6MB0PYHcu3b9Qc7qk+nQh0NHKIxWtx+tP
Vdadqmk829j6aVvzJ+0155pKT9aWtNdUnK0rO11T3F5e1FZS0lZc0lZY3JJf
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
hpjKgMpAmY04z1uQp2be5nXCWzIAfpDfUlM8v6HAedGBF+8FEk001UjAgECl
W4lUk6QaBAggXoth9SjeQIBA8FPQtOwEWkYqv0onJgQ23N3XMdL1RrpuaoE0
XuZAACtnmfp5oTRLF0aZ+rTSmNRKvQIoHngu4AcrHNfOLIVTfbB6EmlzYCC5
xQfCWI+bmEpSM3FhpSjMZZWFHGipzWTluQwE0FM/iHQZ+EwITaT60tR650xv
VNSpAtbshS5zriWWsthEmFwqC9fGzFaZ3siTd/tUi0tZ+0LbO9c2VvLCiNvc
KhobaXrCwod0YsrMnAsab3X1W23/C2vlSkVOOamloHAhL14qKjfq8rWKWguz
51J0zkamzMTuGnN+4VaRB7S23PQZL38lSpyygr3nof4LOIBH0Olxcs2uvJKD
4sEj5IqJzU9AQqM9Jj7lFq4Uu51aC0Ziy8lcivIvZekrSepCXn5tTp7rkLmc
3BiRmS7a18dH9szKn5y5E1NXfh0urMOZhR9qKYS0Xe/I7E4sQ7+4O/Ei31EX
3Y0N1d3tfNbYEjp3zmRLa+wZtT2vcZZUjpLKXpLbSzIYfZLrLMnjfVugplfH
eMooF8AzExoTrrVTJnfa6snYvFm7N2eF7wN4g/oBgXT9o085P/z+8z/9q8d/
+ncH33/I+fhT9k9PdMdCB0fuE4Ljg+Qa4iJXWqcLyXUhpSYigQ/tlCxY0eB9
Z3oWwns+dVQg9LChREQanmjLGeu4yEEo2YpnW1S+ky50M7ACfmQ1jpYQAqzz
zoihuoIYQo/IDBLpUbK8ztcuSuWLPDBcOKcar/Iw5WsqtYxVL9KNi2JlkS1P
iu1lo7Po1Md1qk5SrUS6Q8GAI9cvnPm1EekIPRUGMVFQEM8W6txG56+dgBhm
ZpLMSFiby4tDfmepaJ4qyAHP3ziODXjEVBjtgZ4oStfGOBj3gFu8MU3+JTr4
OphcKwN9NrVRDb7xU1v5bgvxlQ4stbZVjl6b1l+5z3/ubm9lrXNp50rRvpZX
rySgXfW3qvbPDKVreflSCexF+7Tkkp87k6bXIqAutRHhK176QhpfcOCg9EpT
uFXV3+vLr5WJMy65067dm3QgYtQ5r/xWWX2ngmN0QUfmtNBoH9b0pSBzKcms
FeE2B555ciEGFQ33j6PD4+iE3vmZJXUhxVYibCkODPmBoZBYG9KXrtjYEO7q
85tAauHGhrb8JgT45U9DoZrBU1DdX8gGwQw6qTOtdlA6L2VxYKY7CNW6kGx3
kYUfrFOqRsTqmFCDiwzwJTmFvai0FRTWglSNs2DMlMhACiWBXR6zJnSOFBRq
lzNtNaKau32DGiAwVNopIfwskFmR++iZ5Cd/9eS//cGPfuePP/q9v/jsz360
/4Nj9R78OG10t9UKtE6LcCA3qnxSlVeuCkpMmMyT213mGWvv9lFT47A9peO7
mFzHiS4u85VN0Koyk1imjQN1xV4WBg7SjQRRQePF6H0ZAXKgRKS6FNUhqU4y
0SVTY7K0yZTOc/lNonKd7n2oNF7nUqex4nkC8Kud5WurfG1eac4bzWmzOqzm
B7niKF+ZlqqzMqzEUI32pLGuxJ6jlS8c+ESRXGggs3nLJ4EKPT0SJzucxkKR
77CbY3F5wM9OxKEmgxhLiKnYXT6OdNlAYKDNQMaC/JUBeBv9S6jyxkKeKbJX
2taXrtJrffODufnGlN9KM3N+aSkoznjp3nFlzs1PoWWzC2tOHoB5KcnfiuJL
WnrDo0558ckJPmMWLqX3m0hhLV7Ls1fS8ms1ueWDS3a+tuZu5dAXcreS/Btp
/pU4ecWjLrnpWyEcp24EuZci/IwF9TY8PwyMnsc3DHh895bfSh1pCYNNDtLj
h9rMcI+BTtiREbP5hRVf7jZ9hYZce4Ph6fLwjaH6LkKtneGutngWyKwAP0v5
Ailto0Ag0rJ4i2pgT48KQFjMhNRCKMAiPUmzPa6/s2Cl2i8BH5R6ILCJtKhc
GRFKQhxphK3E+NqEUJcUaRN8LXl34/EIHWxX5GPIgjxDHPqFxpf3uO8310UU
MDbSADLoy1tAZo2YQOw5fiL8B8h+v/KdB7/ynV/6ne/95p9+/F/3ZJ+rQiJj
XGqICxUhmtj7QhFkqv0yXVBrQtQOcrfjOlg2RGpmpGFHmu5ow2PAVSCAekyO
dn2pWSQ1iuZ7iWJnp3u5dgpkEPCDHAg1AVYQLmgldxAmdxy2dxAmenFqgqUW
ZG5NFi+SoHu5SzKzidduMuUzqrhKVdeF5qpen9Yqg1q5Xy6OCuVZobYs11cV
WIMVnr/EIfpKe/a48yYYavF8dbY1uw8vUKDOAPWjhrz+taG2kPY3yvJUVDxV
x3r8NCA6V7uL9EiLn13pw21+fCgJd/mxoRD8F6hr/sxVemtO36jIc2nuRlm8
VkJLLW6ltQt5fsFDG3tk97CyEQ7faKERxMdH1JpZupWCY6bW/NSKl1xwgL32
e0PpRpE+41deKUDliq8V1fea1KUQ1vm/BQA/73AvON3PvxWXvpDFt/TY+rjw
TlJ8L4Xj8GIf1vRLfuoln7hgpl8Jsq+F8RWz8cZOrTTxsRi60u5S5RkfClR8
yYXeEZ7QYnNuaMK11WnuDhdbGervY6WrcLSjL52Hs6c+cmRr3uDVi1hxE4Hs
B+Z7v3dUExFoIqLdBEX6kEwbkOiCUjOiAvO92/RiCddcjoxBj0sBP56PJgic
iCNMSZQljpzoEnxx4FAaooPzKkJcRWjHqsjNNeE6V8YWKLiBOiuhN6JQQGQQ
//RRnip4wrO8eMj+2z/8299+8K0HD373wW9899d/+89/6xHrU5VPbCE0dvLu
9GD4xBwXawMqc8TkwCwOwmAn1M6k2pfVBYoWZ0pP9hGk4beQ2mDFUVonimuM
6Pnyw0S+tztPAqVj1zuaJFgkGCU0BRisEserGFHDIRzuCmyHyoxJchChJmhp
mwTFA8/NrrH6bbZ5Xcwtk+kJWTktttfN2qRc6pUqgwp0kMI4W5kXq4sScGhC
nqb6anfqyEK8WH1NDN6H6reuUIsL/tt4ZStd6kItWmEtq12ondlH+IBDLaWl
K3Nqqc2v4ZdIGm8q1l+muxdhsq3y5tjUTLv7Ly9/7h38qz91Kyt9oUFPedhK
gMw44SEjsRKWb9Xgp8iAHmzux4cMasGHgAdr+pRPrQTgublTUbxLi3WP82th
8UKaWnML1+LhN5bWV3qw19oXmvn/5R/9L1futTw0O7Y0HiaumNHVXvKamXvD
j2+PYuuD8OqFrvoj/+zz0PJ5bHsYv6RF1/u++efBxTN0C15M9/UOAwM6/F5k
X6rISxG6ZcUvGL750+Qt29L6FIUKfKtDZ/L62xCwR0091MRXu8DBcAurUPMK
q2yjnVsyOXJB7wAtgjwGCV/mFYhdArGdA+ypPRyFkyl3MzQhnhWXurMaX8ng
r5gg7bvLBmdZb6DkgjCT5T3ieo9B9GRBED2GMsxRhTlSL1PopAkcx8og35U2
hCvO3V7WoiXWcMOBLsIzR/li8wuhaV9qZXznb3/vwa88+NU//PUHv/rgl7/9
a0+YL+QOhZfyhHPe3eVFTiY8GUvYYI/a3HGHm3C6CNtuHw6qs6Aa+NXwZSxo
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
      "], {{0, 160.}, {213., 0}}, {0, 255},
      ColorFunction->RGBColor],
     BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{213., 160.},
    PlotRange->{{0, 213.}, {0, 160.}}], "]"}], "//", "Timing"}]], "Input",
 CellChangeTimes->{{3.887136839626298*^9, 3.8871368476296673`*^9}, {
  3.887136970268157*^9, 3.887136971149555*^9}, {3.8871383148199472`*^9, 
  3.887138328166285*^9}, {3.887138571092292*^9, 3.887138602086134*^9}, {
  3.887138872198668*^9, 3.8871388753469133`*^9}},
 CellLabel->
  "In[192]:=",ExpressionUUID->"979505ee-d2e9-483d-a778-c7b5367cbeef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.357928`", ",", "\<\"n03888257\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.8871368423322783`*^9, 3.887136848038941*^9}, {
   3.8871369715334663`*^9, 3.887137023891481*^9}, {3.8871371066301003`*^9, 
   3.887137108126923*^9}, 3.8871373347140923`*^9, 3.887138201766046*^9, {
   3.887138317045623*^9, 3.887138328853202*^9}, {3.887138588442734*^9, 
   3.8871386051225643`*^9}, {3.88713887595721*^9, 3.887138894353483*^9}, {
   3.887139180362644*^9, 3.887139184351976*^9}, 3.887139279162459*^9, {
   3.887142558449477*^9, 3.8871425641074877`*^9}, 3.887153671426902*^9},
 CellLabel->
  "Out[192]=",ExpressionUUID->"33452147-11d4-4d70-a661-4be4b3a33ca5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "alexNetMini", "]"}]], "Input",
 CellChangeTimes->{{3.8871389030508347`*^9, 3.887138907338005*^9}},
 CellLabel->
  "In[193]:=",ExpressionUUID->"12987dbe-3cce-4b1a-b5a4-6325c3a5d38d"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    TagBox[GridBox[{
       {
        ItemBox[
         PaneBox[
          StyleBox["\<\" Net Information\"\>", "InformationTitleText",
           StripOnInput->False],
          FrameMargins->{{4, 0}, {-1, 1}}],
         BaseStyle->"InformationTitleBackground",
         StripOnInput->False]},
       {
        PaneBox[GridBox[{
           {
            
            DynamicModuleBox[{System`InformationDump`open$$ = {
             False, False, False, False, False, False, False, False}}, 
             StyleBox[GridBox[{
                {
                 TagBox[
                  TooltipBox[
                   StyleBox["\<\" Layers Count\"\>", "InformationRowLabel",
                    StripOnInput->False],
                   "\"LayersCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "LayersCount", "Tooltip"]& ], "27"},
                {
                 TagBox[
                  TooltipBox[
                   StyleBox["\<\" Arrays Count\"\>", "InformationRowLabel",
                    StripOnInput->False],
                   "\"ArraysCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "ArraysCount", "Tooltip"]& ], "36"},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Shared Arrays Count\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"SharedArraysCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "SharedArraysCount", "Tooltip"]& ], "0"},
                {
                 TagBox[
                  TooltipBox[
                   StyleBox["\<\" Input Port Names\"\>", "InformationRowLabel",
                    StripOnInput->False],
                   "\"InputPortNames\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "InputPortNames", "Tooltip"]& ], 
                 RowBox[{"{", "\<\"Input\"\>", "}"}]},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Output Port Names\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"OutputPortNames\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "OutputPortNames", "Tooltip"]& ], 
                 RowBox[{"{", "\<\"Output\"\>", "}"}]},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Arrays Total Element Count\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"ArraysTotalElementCount\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "ArraysTotalElementCount", "Tooltip"]& ], 
                 "1012172"},
                {
                 TagBox[
                  TooltipBox[
                   
                   StyleBox["\<\" Arrays Total Size\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                   "\"ArraysTotalSize\"",
                   TooltipStyle->"TextStyling"],
                  Annotation[#, "ArraysTotalSize", "Tooltip"]& ], 
                 
                 TemplateBox[{
                  "4.048687999999999`", "\"MB\"", "megabytes", 
                   "\"Megabytes\""},
                  "Quantity"]}
               },
               AutoDelete->False,
               GridBoxAlignment->{"Columns" -> {Right, Left}},
               GridBoxDividers->None,
               GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
               GridBoxSpacings->{"Columns" -> {
                   Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                   Offset[0.27999999999999997`]}, "Rows" -> {
                   Offset[0.2], {
                    Offset[0.8]}, 
                   Offset[0.2]}}], "DialogStyle",
              StripOnInput->False],
             DynamicModuleValues:>{}]}
          },
          DefaultBaseStyle->"Column",
          GridBoxAlignment->{"Columns" -> {{Left}}},
          GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
          
          GridBoxItemSize->{
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.5599999999999999]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[3.6]}, 
              Offset[0.2]}}],
         FrameMargins->6]}
      },
      DefaultBaseStyle->"Column",
      FrameStyle->Directive[
        GrayLevel[0.8], 
        Thickness[Tiny]],
      GridBoxAlignment->{"Columns" -> {{Left}}},
      GridBoxDividers->{
       "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
     
     "Column"],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "LayersCount" -> 27, "ArraysCount" -> 36, "SharedArraysCount" -> 0, 
    "InputPortNames" -> {"Input"}, "OutputPortNames" -> {"Output"}, 
    "ArraysTotalElementCount" -> 1012172, "ArraysTotalSize" -> 
    Quantity[4.048687999999999, "Megabytes"], "ObjectType" -> 
    "NetInformation"|>, True]]], "Output",
 CellChangeTimes->{
  3.8871389076057053`*^9, 3.887139286607576*^9, 3.8871425681774607`*^9, {
   3.887153660418647*^9, 3.8871536728836946`*^9}},
 CellLabel->
  "Out[193]=",ExpressionUUID->"862cf7d3-1386-4151-8c53-f607c46cdaa4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"alexNetMini", " ", "=", " ", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"alexNetMini", ",", 
    RowBox[{"{", 
     RowBox[{"genTrain", ",", 
      RowBox[{"\"\<RoundLength\>\"", "\[Rule]", 
       RowBox[{"Length", "[", "trainingDataFiles", "]"}]}]}], "}"}], ",", 
    RowBox[{"BatchSize", "->", "16"}], ",", 
    RowBox[{"MaxTrainingRounds", "->", "50"}], ",", 
    RowBox[{"ValidationSet", "->", 
     RowBox[{"Scaled", "[", "0.1", "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.887139191381907*^9, 3.887139214990491*^9}, {
  3.887139835201268*^9, 3.887139836698352*^9}, {3.8871399528082113`*^9, 
  3.887139953609837*^9}, {3.88714001202826*^9, 3.88714001951877*^9}, {
  3.8871414520755177`*^9, 3.887141453206833*^9}, {3.887141486018591*^9, 
  3.887141489020554*^9}, {3.887142529892151*^9, 3.8871425414476624`*^9}, {
  3.8871535589427433`*^9, 3.887153567979046*^9}, {3.887153630779949*^9, 
  3.887153631884293*^9}},
 CellLabel->
  "In[194]:=",ExpressionUUID->"8cc91035-4386-4b7c-9ee8-c08e44a85b33"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "featureExtractor" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{19, 3, 11,
                     11}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{19}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 19, "KernelSize" -> {11, 11}, 
                    "Stride" -> {4, 4}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {120, 120}, 
                    "$OutputSize" -> {28, 28}, "$WeightsInputChannels" -> 3|>,
                     "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{3, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{19, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {19, 28, 28}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{19, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{19, 28, 28}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 19, "$InputSize" -> {28, 28}, 
                    "$OutputSize" -> {13, 13}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{19, 28, 28}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{19, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{19}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{19}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{19}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{19}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 19, 
                    "$SpatialDimensions" -> {13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{19, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{19, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{53, 19, 5,
                     5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{53}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 53, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 19, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {13, 13}, "$WeightsInputChannels" -> 
                    19|>, "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{19, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {53, 13, 13}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 13, 13}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 53, "$InputSize" -> {13, 13}, 
                    "$OutputSize" -> {6, 6}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 13, 13}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{53}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{53}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{53}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{53}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 53, 
                    "$SpatialDimensions" -> {6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "9" -> <|"Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{76, 53, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{76}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 76, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 53, "$InputSize" -> {6, 6}, 
                    "$OutputSize" -> {6, 6}, "$WeightsInputChannels" -> 53|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "10" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {76, 6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "11" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{76}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{76}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{76}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{76}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 76, 
                    "$SpatialDimensions" -> {6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "12" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{76, 76, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{76}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 76, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 76, "$InputSize" -> {6, 6}, 
                    "$OutputSize" -> {6, 6}, "$WeightsInputChannels" -> 76|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "13" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {76, 6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "14" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{76}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{76}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{76}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{76}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 76, 
                    "$SpatialDimensions" -> {6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "15" -> <|
                    "Type" -> "Convolution", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{53, 76, 3,
                     3}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{53}]|>, 
                    "Parameters" -> <|
                    "OutputChannels" -> 53, "KernelSize" -> {3, 3}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> "Same", 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 76, "$InputSize" -> {6, 6}, 
                    "$OutputSize" -> {6, 6}, "$WeightsInputChannels" -> 76|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{76, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "16" -> <|
                    "Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {53, 6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "17" -> <|
                    "Type" -> "BatchNormalization", 
                    "Arrays" -> <|
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{53}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{53}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{53}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{53}]|>, 
                    "Parameters" -> <|
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    False, "$Channels" -> 53, 
                    "$SpatialDimensions" -> {6, 6}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>|>, 
                    "18" -> <|
                    "Type" -> "Pooling", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "KernelSize" -> {3, 3}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 53, "$InputSize" -> {6, 6}, 
                    "$OutputSize" -> {2, 2}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False, "$IgnorePadding" -> 
                    False, "$InputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "$OutputType" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 6, 6}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{53, 2, 2}, 
                    NeuralNetworks`RealT]|>|>, 
                    "19" -> <|
                    "Type" -> "Flatten", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> DirectedInfinity[1]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{53, 2, 2}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{212}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "14", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "15", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "14", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "16", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "15", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "17", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "16", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "18", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "17", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "19", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "18", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "19", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 120, 120}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{212}, NeuralNetworks`RealT]|>|>, 
                    "classifier" -> <|
                    "Type" -> "Chain", 
                    "Nodes" -> <|
                    "1" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{819, 
                    212}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{819}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {819}, "$OutputSize" -> 819, 
                    "$InputSize" -> 212, "$InputDimensions" -> {212}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{212}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>|>, 
                    "2" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {819}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>|>, 
                    "3" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>|>, 
                    "4" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{819, 
                    819}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{819}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {819}, "$OutputSize" -> 819, 
                    "$InputSize" -> 819, "$InputDimensions" -> {819}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>|>, 
                    "5" -> <|"Type" -> "Elementwise", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {819}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>|>, 
                    "6" -> <|"Type" -> "Dropout", "Arrays" -> <||>, 
                    "Parameters" -> <|
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>|>, 
                    "7" -> <|"Type" -> "Linear", 
                    "Arrays" -> <|
                    "Weights" -> NeuralNetworks`Private`DummyArray[{10, 819}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{10}]|>, 
                    "Parameters" -> <|
                    "OutputDimensions" -> {10}, "$OutputSize" -> 10, 
                    "$InputSize" -> 819, "$InputDimensions" -> {819}|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{819}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>, 
                    "8" -> <|"Type" -> "Softmax", "Arrays" -> <||>, 
                    "Parameters" -> <|"Level" -> -1|>, 
                    "Inputs" -> <|
                    "Input" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "8", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> 
                    NeuralNetworks`TensorT[{212}, NeuralNetworks`RealT]|>, 
                    "Outputs" -> <|
                    "Output" -> 
                    NeuralNetworks`TensorT[{10}, NeuralNetworks`RealT]|>|>|>, 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "featureExtractor", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classifier", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "featureExtractor", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classifier", "Outputs", "Output"]}, 
                    "Inputs" -> <|
                    "Input" -> <|
                    "Form" -> NeuralNetworks`TensorT[{3, 120, 120}, 
                    NeuralNetworks`RealT], "Type" -> "Image", "ImageSize" -> 
                    NeuralNetworks`ValidatedParameter[{120, 120}], 
                    "ColorSpace" -> "RGB", "ColorChannels" -> 3, 
                    "Interleaving" -> False, "MeanImage" -> None, 
                    "VarianceImage" -> None, "DataTransposed" -> False, 
                    "Method" -> "Stretch", "Resampling" -> 
                    NeuralNetworks`ValidatedParameter[Automatic], "Padding" -> 
                    GrayLevel[0], "Alignment" -> Center, "$Version" -> 
                    "13.1.4"|>|>, 
                    "Outputs" -> <|
                    "Output" -> <|
                    "Form" -> NeuralNetworks`TensorT[{10}, 
                    NeuralNetworks`RealT], "Type" -> "Class", "Labels" -> 
                    Tooltip[{"\"n01440764\"", "\"n02102040\"", 
                    Skeleton[7], "\"n03888257\""}, {
                    "n01440764", "n02102040", "n02979186", "n03000684", 
                    "n03028079", "n03394916", "n03417042", "n03425413", 
                    "n03445777", "n03888257"}], "InputDepth" -> 1, 
                    "Multilabel" -> False, "Dimensions" -> 10, "$Rank" -> 0, 
                    "$Version" -> "13.1.4"|>|>|>, 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"array\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 3\[Times]120\[Times]120\
\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"featureExtractor\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "featureExtractor"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "19", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "featureExtractor"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 212\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "featureExtractor"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"classifier\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}]}]}], "]"}]& ), 
                    BaseStyle -> GrayLevel[0.5]]}, "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox["\"(\[VeryThinSpace]size: 10\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "classifier"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, <||>, {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.887139247507613*^9, 3.887139322979417*^9, {3.887139949304378*^9, 
   3.8871399791858664`*^9}, 3.8871411069791822`*^9, 3.887141483828578*^9, 
   3.887141856884632*^9, 3.887145666295257*^9, {3.8871536272933693`*^9, 
   3.887153656250218*^9}, 3.887153766831962*^9},
 CellLabel->
  "Out[194]=",ExpressionUUID->"94118713-faa3-4af2-9ad4-da1ccab2cb80"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetMeasurements", "[", 
  RowBox[{"alexNetMini", ",", "testDataFiles", ",", 
   RowBox[{"{", 
    RowBox[{"\"\<Accuracy\>\"", ",", 
     RowBox[{"\"\<ErrorRate\>\"", "->", "2"}], ",", 
     "\"\<ConfusionMatrixPlot\>\""}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8871411086577797`*^9, 3.887141155330662*^9}, {
  3.887141195151024*^9, 3.887141195492817*^9}, {3.887141227447445*^9, 
  3.8871412654644737`*^9}, {3.8871413018873262`*^9, 3.887141302253614*^9}, {
  3.887141380994021*^9, 3.887141381837483*^9}, {3.887141880758121*^9, 
  3.887141881159686*^9}, {3.887141915472473*^9, 3.8871419274912033`*^9}},
 CellLabel->
  "In[185]:=",ExpressionUUID->"dab6dac0-8b0f-4ad1-9f98-4b483d43d9ed"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.6552866242038217`", ",", "0.21121019108280253`", ",", GridBox[{
     {
      RotationBox[
       ItemBox["\<\"actual class\"\>",
        DefaultBaseStyle->"LabeledLabel"],
       BoxRotation->1.5708], 
      GraphicsBox[RasterBox[CompressedData["
1:eJyVVWlMVGcUHSBGxhZlbS3iwkyBMiDRIi2j1aMGsVEW0bCKUbFi3dDgBOy0
bkCKoGWkilJbK1EjqIBDYVAJHQyLILtoEVwYGIF5M/MWLbQYF9LR9O/9wZe8
5OXLfeeenHPufe4Je9ZutRGJRFP+f969T08qjwtaIyCgtt1lcqaAhPPzH4c3
CpB62B1NfMkjXFpZkL1KgPOe5qaxqwJKbi0rEj0yIVudI9UoWGz2GTV3R/HI
PrVgztkBMxb91JMmk3EIq/aW6q7xZP22PV75/kYW7HaJ/ryOw8LQjXEGkQCF
55GGyFwWk1vEu6UXObBuL1eqBmn8+JttOxyWceiyXRTt5sYj68CdXZgpoL31
/cHyTUOdksdPIXp/GPg9SdQcLeCxPeOcz9SpAuqXbKk8nyOgsy9s3rYuI3rv
B9WjxgzFWW1FuxWPLr3UURFlwBvfVP/9YhP6Zy/++coCDjf3/vqXJM2ESw4p
pYGBLBxfH+89uJDmSdVHWCkWC/kWvMJ1rfkxPHpK5h46IxeQtzontDrLjEi+
xq6UYzF+rNY+U2XhE1rQMTujG+qkSnvNzQHIDpcaZoYbkZCbEVs7aRhBfwbm
lLkboTwi8bBrYkH5G7zK1b7tOYffg3ctc8nj4dV3KleIFLD0ia6vsfcZlKfc
Ph67YMCVqpiPKpxZfDGj1MFjdBitw22qlgYj4teP+404cxAnT3NynMEg/tZd
5b0TJpiKLB8oOAyHWB+7JjHC7rTTo+BgM7rlz1Wz7nKo8/rHeoXMBG3yBnn1
azPqmj0aPWfx+LZm0+1Uvx5MGzpdsW+1HqKL8+oHThpJnpTOlJ4f3IidKykS
4LrZkJ1eJ6CsI58rfCbA1mXpw5HSQfRMeVulCWBw8Omjv1NjWdKvERtL4poZ
fDb26ptmsRlHxZbEFXNkbsMiSrb69/VgNP269/NMPcLun+mWq41krij+FD41
R9TcUfpT/lL1toYte5f8+ACy9Sf/CBAP4MCH7Y39bxiS/0TnhfKdmnfqnupL
4bttFHbYON+Da0N8qmu5Dm8urvw8L4khdaDu7/g0D0aUGqBvURWNrjBh3ppL
l6wiOFywZpR9883YG16YP7+MhXq9Reh9PA69y52chbvvi7HLiRx+Y08EfNlE
7w1qvkKiftGM/DAM27U2Ku0+I3Ym2csO8yyCvR9Uv/DToUPe4LO9YhCf/vtJ
+dsKE8mfiayr3r9iCN/nfbdy3TkGDpnhpknZ9FxQfSl/KX3kJ2/rr37NI30o
ozL3Ho+UqRYHkgUyVyEtnOMcpguHvdRfFSv7sUTYr3apYsg8UPjUvqXux6s0
Q0Iyg+UxeiG0zQR5r/vOpBPchPtSOUyL63XSFt/H9d2x/THaftSW33Bq7WXI
/xS1lyjdKP5UPZXbx3lFG7KURows8A2vSzPDc0f0hZQhjvT91UPPaK19J8ZD
Lk8vEOnQLUl7UhfETHifU7mlcCjdKHzKL2pOKZz/AGPV1pM=
        "], {{0, 0}, {10, 10}}, {0, 1}],
       Background->GrayLevel[1],
       BaseStyle->Directive[
        FontSize -> 7, FontFamily -> "Verdana", FontWeight -> "Thin", 
         FontTracking -> "Condensed"],
       Epilog->{{
          InsetBox[
           FormBox["291", TraditionalForm], {0.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["12", TraditionalForm], {1.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {2.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["17", TraditionalForm], {3.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["12", TraditionalForm], {4.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["18", TraditionalForm], {5.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {6.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["5", TraditionalForm], {7.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["11", TraditionalForm], {8.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {9.5, 9.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["6", TraditionalForm], {0.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["269", TraditionalForm], {1.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["18", TraditionalForm], {2.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["21", TraditionalForm], {3.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {4.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["22", TraditionalForm], {5.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {6.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["14", TraditionalForm], {7.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["19", TraditionalForm], {8.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["12", TraditionalForm], {9.5, 8.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["5", TraditionalForm], {0.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {1.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["271", TraditionalForm], {2.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["8", TraditionalForm], {3.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["5", TraditionalForm], {4.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["13", TraditionalForm], {5.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["13", TraditionalForm], {6.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["22", TraditionalForm], {7.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["8", TraditionalForm], {8.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["5", TraditionalForm], {9.5, 7.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["16", TraditionalForm], {0.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["20", TraditionalForm], {1.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["33", TraditionalForm], {2.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["165", TraditionalForm], {3.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["17", TraditionalForm], {4.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["48", TraditionalForm], {5.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["16", TraditionalForm], {6.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["33", TraditionalForm], {7.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["12", TraditionalForm], {8.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["26", TraditionalForm], {9.5, 6.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["8", TraditionalForm], {0.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["8", TraditionalForm], {1.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["16", TraditionalForm], {2.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["6", TraditionalForm], {3.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["286", TraditionalForm], {4.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["17", TraditionalForm], {5.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["17", TraditionalForm], {6.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["26", TraditionalForm], {7.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["14", TraditionalForm], {8.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["11", TraditionalForm], {9.5, 5.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["9", TraditionalForm], {0.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["15", TraditionalForm], {1.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["17", TraditionalForm], {2.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["29", TraditionalForm], {3.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["17", TraditionalForm], {4.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["266", TraditionalForm], {5.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {6.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["16", TraditionalForm], {7.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["12", TraditionalForm], {8.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["6", TraditionalForm], {9.5, 4.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["7", TraditionalForm], {0.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["1", TraditionalForm], {1.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["55", TraditionalForm], {2.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["16", TraditionalForm], {3.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["21", TraditionalForm], {4.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["10", TraditionalForm], {5.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["235", TraditionalForm], {6.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["27", TraditionalForm], {7.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {8.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["10", TraditionalForm], {9.5, 3.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["2", TraditionalForm], {0.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["6", TraditionalForm], {1.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["68", TraditionalForm], {2.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["29", TraditionalForm], {3.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["23", TraditionalForm], {4.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["20", TraditionalForm], {5.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["17", TraditionalForm], {6.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["236", TraditionalForm], {7.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["6", TraditionalForm], {8.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["12", TraditionalForm], {9.5, 2.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["4", TraditionalForm], {0.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["18", TraditionalForm], {1.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["27", TraditionalForm], {2.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["16", TraditionalForm], {3.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["12", TraditionalForm], {4.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["16", TraditionalForm], {5.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["7", TraditionalForm], {6.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["13", TraditionalForm], {7.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["249", TraditionalForm], {8.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["37", TraditionalForm], {9.5, 1.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}, {
          InsetBox[
           FormBox["2", TraditionalForm], {0.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["3", TraditionalForm], {1.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["15", TraditionalForm], {2.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["12", TraditionalForm], {3.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["15", TraditionalForm], {4.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["9", TraditionalForm], {5.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["10", TraditionalForm], {6.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["12", TraditionalForm], {7.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["8", TraditionalForm], {8.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]], 
          InsetBox[
           FormBox["304", TraditionalForm], {9.5, 0.5}, 
           NCache[
            ImageScaled[{
              Rational[1, 2], 
              Rational[1, 2]}], 
            ImageScaled[{0.5, 0.5}]]]}},
       Frame->True,
       FrameLabel->{None, None},
       FrameTicks->{{{{9.5, 
            FormBox[
             RotationBox["\"n01440764\"", BoxRotation -> 0.], 
             TraditionalForm]}, {8.5, 
            FormBox[
             RotationBox["\"n02102040\"", BoxRotation -> 0.], 
             TraditionalForm]}, {7.5, 
            FormBox[
             RotationBox["\"n02979186\"", BoxRotation -> 0.], 
             TraditionalForm]}, {6.5, 
            FormBox[
             RotationBox["\"n03000684\"", BoxRotation -> 0.], 
             TraditionalForm]}, {5.5, 
            FormBox[
             RotationBox["\"n03028079\"", BoxRotation -> 0.], 
             TraditionalForm]}, {4.5, 
            FormBox[
             RotationBox["\"n03394916\"", BoxRotation -> 0.], 
             TraditionalForm]}, {3.5, 
            FormBox[
             RotationBox["\"n03417042\"", BoxRotation -> 0.], 
             TraditionalForm]}, {2.5, 
            FormBox[
             RotationBox["\"n03425413\"", BoxRotation -> 0.], 
             TraditionalForm]}, {1.5, 
            FormBox[
             RotationBox["\"n03445777\"", BoxRotation -> 0.], 
             TraditionalForm]}, {0.5, 
            FormBox[
             RotationBox["\"n03888257\"", BoxRotation -> 0.], 
             TraditionalForm]}}, {{9.5, 
            FormBox["387", TraditionalForm]}, {8.5, 
            FormBox["395", TraditionalForm]}, {7.5, 
            FormBox["357", TraditionalForm]}, {6.5, 
            FormBox["386", TraditionalForm]}, {5.5, 
            FormBox["409", TraditionalForm]}, {4.5, 
            FormBox["394", TraditionalForm]}, {3.5, 
            FormBox["389", TraditionalForm]}, {2.5, 
            FormBox["419", TraditionalForm]}, {1.5, 
            FormBox["399", TraditionalForm]}, {0.5, 
            FormBox["390", TraditionalForm]}}}, {{{0.5, 
            FormBox[
             RotationBox["350", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {1.5, 
            FormBox[
             RotationBox["359", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {2.5, 
            FormBox[
             RotationBox["527", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {3.5, 
            FormBox[
             RotationBox["319", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {4.5, 
            FormBox[
             RotationBox["415", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {5.5, 
            FormBox[
             RotationBox["439", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {6.5, 
            FormBox[
             RotationBox["336", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {7.5, 
            FormBox[
             RotationBox["404", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {8.5, 
            FormBox[
             RotationBox["346", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}, {9.5, 
            FormBox[
             RotationBox["430", BoxRotation -> 1.5707963267948966`], 
             TraditionalForm]}}, {{0.5, 
            FormBox[
             RotationBox["\"n01440764\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {1.5, 
            FormBox[
             RotationBox["\"n02102040\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {2.5, 
            FormBox[
             RotationBox["\"n02979186\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {3.5, 
            FormBox[
             RotationBox["\"n03000684\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {4.5, 
            FormBox[
             RotationBox["\"n03028079\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {5.5, 
            FormBox[
             RotationBox["\"n03394916\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {6.5, 
            FormBox[
             RotationBox["\"n03417042\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {7.5, 
            FormBox[
             RotationBox["\"n03425413\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {8.5, 
            FormBox[
             RotationBox["\"n03445777\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}, {9.5, 
            FormBox[
             RotationBox["\"n03888257\"", BoxRotation -> 1.5707963267948966`],
              TraditionalForm]}}}},
       GridLinesStyle->Directive[
         GrayLevel[0.5, 0.4]],
       ImagePadding->{{All, 30.}, {30., All}},
       ImageSize->300,
       Method->{
        "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
         "DefaultGraphicsInteraction" -> {
          "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
           "Effects" -> {
            "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2},
              "Droplines" -> {
              "freeformCursorMode" -> True, 
               "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
         "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
         "RangePadding" -> Scaled[0.05]},
       ImageCache->GraphicsData["CompressedBitmap", "\<\
eJztvQd4FMeyNryHlYQiYKJIIkchIQnlLAQSIETGZDDRYEzOYHLOGZOTiQKT
c845Y5JJNjkYsH1sn3zr77dmejS72iTgfuc/52qeZ3Znenqme2rerq7q6qpO
bdu3c8dubft2ad+2eHLvtj07d2nfp3hSj94iyfgng+FPM8Q+u7jBSRyTwWDy
g20mfv7vHSfwnwv95S9/If32+vVrevfunbfty0X4spH+/ve/09u3b/msgHrL
X//6V/rXv/6l3fL777/T06dPC6m3iLtpyZIl9NtvvxkKW0grqKb9z//8jyzd
kE1N+/HHH7lInHmraSgqLS2N7t69ayhku9ayCkeOHKFjx47xWZRCjnj1Eio/
a9Ysk1K///57Wrt2LZ/ldzCfJMbgwYNp6NChNGLECK4J7pswYYIk78yZM+UL
6S8rNHBi0i1cuJAWLVoEMheynCwpduvWLdq+fbtJnXB+8eJFXZ2cmLKrV6+m
b7/9ls6cOSNvt/dKkuCg3K5du2jFihWGaD31svP3Wb9+Pf35z3/mLNj+9re/
0fTp09XSbeeRRUycOJHTZ8yYoVVFpum/wuTJkzlBfH8b+Zz5+SAWcLZmzRoQ
TcWZrWvZaf/+/XTlyhW6efMmXb9+nR+Kf1Fvta5OTEVQHlTWqOnIazrxLbt3
7+Y8gppmxHzx4gV/ZVQA3wWf7c6dO7R8+XKNmLbySIxJgoiS6ZdffuHGMW7c
OEnr8ePH05s3b+irr74SNEQLNOKyGQ2z45H09ddf8/uOGTOGaYXjly9fatVx
JA/gc/jwYdqxYwdt2rSJCwFKT58+reURxzR27Fi+d968eTRnzhw+vnHjhkOv
LvOIcmngwIF877p162jUqFF8fPToUUOkQm3JBxcvXswwOH/+PN+CrOJ2b8cu
SxoDHAMGDOBmLyomLx84cIDf5/79+8wNBg0aRFevXvVWq3nv3j26fPky73iV
EydO8PGvv/6qvYojeYAjfLpDhw4x9lBR5P3HP/5hQjb5HJAC+XD87Nkzg52X
lY8QGNEegS8FYOFYMAtJ1WoquPBRUCvBsTRmr0+TFEDjk3wQDP2f//wn01Lk
NblPglJyclFrvB2fydrjXD5LXhfUk0Xp+hXecK72K+ojnPn27777jgkp2jRY
o1YNdB4CP3xWUC1SPg/VFl2d7G8iTRv0w4cPtf5ANHe+AwxWtBLt89jKI99g
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\
\>"]]},
     {"", 
      ItemBox["\<\"predicted class\"\>",
       DefaultBaseStyle->"LabeledLabel"]}
    },
    BaseStyle->{
     FontFamily -> "Verdana", FontSize -> 8, FontColor -> GrayLevel[0.4]},
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Center}}},
    GridBoxSpacings->{"Columns" -> {{0.5}}}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.887141120855536*^9, {3.887141187577405*^9, 3.8871411996532803`*^9}, {
   3.8871412391218367`*^9, 3.887141269363475*^9}, 3.887141306942068*^9, {
   3.887141869121502*^9, 3.8871418850826817`*^9}, 3.887141932795657*^9, 
   3.887145685759487*^9},
 CellLabel->
  "Out[185]=",ExpressionUUID->"57d66b71-216a-40f1-93b0-8ba8f617631d"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{982.5, 528.},
WindowMargins->{{Automatic, 0}, {0, Automatic}},
FrontEndVersion->"13.1 for Linux x86 (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"b2040128-38b8-4dac-b67d-ab9f12a046a5"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 251, 5, 68, "Section",ExpressionUUID->"ab75cd20-4ceb-488a-8340-c2261203da1d"],
Cell[834, 29, 2765, 62, 266, "Input",ExpressionUUID->"d2788577-798d-4130-bbf6-e5c2085af804"],
Cell[CellGroupData[{
Cell[3624, 95, 971, 23, 95, "Input",ExpressionUUID->"908aa6ed-84cd-4fdd-8c67-3c91c27d8518"],
Cell[4598, 120, 522, 10, 48, "Output",ExpressionUUID->"5bfc484a-f462-494c-b186-380ca7d202f3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5157, 135, 223, 4, 29, "Input",ExpressionUUID->"40a0b480-d68a-4446-9e0a-c40ddcfaf47f"],
Cell[5383, 141, 204, 4, 48, "Output",ExpressionUUID->"30c2e8f0-309e-4c3f-9cdb-69647bed4adb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5624, 150, 222, 4, 29, "Input",ExpressionUUID->"31a47070-ddd0-42e4-87bc-b0d22a0c4b45"],
Cell[5849, 156, 155, 3, 48, "Output",ExpressionUUID->"4b9801ab-c3c5-45da-bfb1-ccb5df88065d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6041, 164, 381, 8, 29, "Input",ExpressionUUID->"5e05f33a-a81a-407b-a255-e27b8406d040"],
Cell[6425, 174, 280, 5, 33, "Output",ExpressionUUID->"f4ba1eb7-400e-4284-9a5e-42e63f3c15bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6742, 184, 593, 16, 32, "Input",ExpressionUUID->"c442d6c8-25a3-4cdf-af7c-d08ba04b9c55"],
Cell[7338, 202, 470729, 7736, 285, "Output",ExpressionUUID->"ae44b8d2-c177-4bbc-83d2-bb70a60abfcc"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[478116, 7944, 207, 4, 68, "Section",ExpressionUUID->"c353d6e6-97d4-46bc-ad0a-84ccad07ff15"],
Cell[CellGroupData[{
Cell[478348, 7952, 430, 9, 32, "Input",ExpressionUUID->"d384da90-a011-4e4d-9280-0d0b7bf15882"],
Cell[478781, 7963, 7113, 150, 65, "Output",ExpressionUUID->"c4d2a23b-a382-4744-91b0-5f04441730f1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[485931, 8118, 2732, 56, 320, "Input",ExpressionUUID->"c12bb5ff-d5e6-4609-86b5-1b00e8e28a4a"],
Cell[488666, 8176, 69973, 1362, 65, "Output",ExpressionUUID->"fe2173b9-2af3-478d-9a01-665916d8e19b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[558676, 9543, 772, 14, 119, "Input",ExpressionUUID->"90feed2b-8594-4393-b40a-117ea10dcf4c"],
Cell[559451, 9559, 31087, 628, 65, "Output",ExpressionUUID->"90ed414c-1878-4df2-b4c2-3a822073cea3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[590575, 10192, 584, 12, 52, "Input",ExpressionUUID->"54e4ab48-d411-4549-a93d-4cbdd9f733f2"],
Cell[591162, 10206, 47477, 884, 65, "Output",ExpressionUUID->"c1d0759b-a488-4b9d-949f-9232dea0b9cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[638676, 11095, 118865, 1953, 55, "Input",ExpressionUUID->"3f273765-afbd-421e-9446-ee4b5e9baa6a"],
Cell[757544, 13050, 859, 17, 69, "Output",ExpressionUUID->"72a625eb-66ac-4efb-81ae-eec2c9e6c38e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[758440, 13072, 215, 3, 29, "Input",ExpressionUUID->"c7a57467-cb6b-47c3-af62-bb185ccc531e"],
Cell[758658, 13077, 5678, 141, 189, "Output",ExpressionUUID->"778b9153-8c0e-47d9-a10f-10aff27b99b3"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[764385, 13224, 158, 3, 68, "Section",ExpressionUUID->"060b31db-e878-4348-ac0b-e477490d418e"],
Cell[764546, 13229, 218, 5, 35, "Text",ExpressionUUID->"260b9f62-64ec-424c-a8fc-8c2de4f24e5b"],
Cell[CellGroupData[{
Cell[764789, 13238, 481, 11, 32, "Input",ExpressionUUID->"40deb83a-467a-4d5f-8766-e417c4409dce"],
Cell[765273, 13251, 7144, 152, 79, "Output",ExpressionUUID->"e760d9db-b390-437f-ab74-4f81fc9f5a29"]
}, Open  ]],
Cell[CellGroupData[{
Cell[772454, 13408, 2784, 57, 320, "Input",ExpressionUUID->"f9291ccf-fb1f-4db5-a284-15d83b8d8fa8"],
Cell[775241, 13467, 69711, 1360, 79, "Output",ExpressionUUID->"95da6bf5-9a3c-4697-a539-91ec785c99c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[844989, 14832, 281, 6, 32, "Input",ExpressionUUID->"d22b857e-809a-4fe7-b721-19909cd938ca"],
Cell[845273, 14840, 212, 4, 48, "Output",ExpressionUUID->"94d23a17-3d76-4bf3-9455-89a57700a287"]
}, Open  ]],
Cell[CellGroupData[{
Cell[845522, 14849, 827, 16, 119, "Input",ExpressionUUID->"b0ef9430-fb44-4ba9-8997-5d367b3f2b11"],
Cell[846352, 14867, 31131, 630, 79, "Output",ExpressionUUID->"a78d062e-1eff-496e-bfd3-6e341e094f38"]
}, Open  ]],
Cell[CellGroupData[{
Cell[877520, 15502, 786, 20, 73, "Input",ExpressionUUID->"d67bc430-be24-4894-83da-020dc95fa301"],
Cell[878309, 15524, 47448, 886, 79, "Output",ExpressionUUID->"61fe7672-2d9e-4539-a8e6-547d89469cc6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[925794, 16415, 118920, 1954, 55, "Input",ExpressionUUID->"979505ee-d2e9-483d-a778-c7b5367cbeef"],
Cell[1044717, 18371, 691, 11, 48, "Output",ExpressionUUID->"33452147-11d4-4d70-a661-4be4b3a33ca5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1045445, 18387, 225, 4, 29, "Input",ExpressionUUID->"12987dbe-3cce-4b1a-b5a4-6325c3a5d38d"],
Cell[1045673, 18393, 5820, 145, 203, "Output",ExpressionUUID->"862cf7d3-1386-4151-8c53-f607c46cdaa4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1051530, 18543, 1026, 20, 52, "Input",ExpressionUUID->"8cc91035-4386-4b7c-9ee8-c08e44a85b33"],
Cell[1052559, 18565, 47497, 887, 65, "Output",ExpressionUUID->"94118713-faa3-4af2-9ad4-da1ccab2cb80"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1100093, 19457, 717, 13, 29, "Input",ExpressionUUID->"dab6dac0-8b0f-4ad1-9f98-4b483d43d9ed"],
Cell[1100813, 19472, 61081, 1375, 350, "Output",ExpressionUUID->"57d66b71-216a-40f1-93b0-8ba8f617631d"]
}, Open  ]]
}, Open  ]]
}
]
*)

